<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Duality</name>
    </assembly>
    <members>
        <member name="T:Duality.SoundBudgetPriority">
            <summary>
            Defines priorities for the budget-based sound system
            </summary>
        </member>
        <member name="F:Duality.SoundBudgetPriority.Highest">
            <summary>
            Highest priority. Overpowers anything else. Value: 100.
            </summary>
        </member>
        <member name="F:Duality.SoundBudgetPriority.Action">
            <summary>
            Second-highest priority, designated for action pads. Value: 80.
            </summary>
        </member>
        <member name="F:Duality.SoundBudgetPriority.Alarm">
            <summary>
            Priority of an alarming pad. Value: 60.
            </summary>
        </member>
        <member name="F:Duality.SoundBudgetPriority.Tension">
            <summary>
            Priority of a pad to build up tension. Value: 40.
            </summary>
        </member>
        <member name="F:Duality.SoundBudgetPriority.Background">
            <summary>
            Second-lowest priority, designated for background pads. Value: 20.
            </summary>
        </member>
        <member name="F:Duality.SoundBudgetPriority.Lowest">
            <summary>
            Lowest priority. Is overpowered by anything else. Value: 0.
            </summary>
        </member>
        <member name="F:Duality.SoundBudgetPriority.StepOne">
            <summary>
            Priority offset from one default priority to the next.
            </summary>
        </member>
        <member name="F:Duality.SoundBudgetPriority.StepHalf">
            <summary>
            Priority offset for a half step in the default priority scale.
            </summary>
        </member>
        <member name="F:Duality.SoundBudgetPriority.StepQuarter">
            <summary>
            Priority offset for a quarter step in the default priority scale.
            </summary>
        </member>
        <member name="F:Duality.SoundBudgetPriority.StepMicro">
            <summary>
            Smalles possible priority offset in the default priority scale.
            </summary>
        </member>
        <member name="T:Duality.SoundBudgetPad">
            <summary>
            Wraps a SoundInstance in order to make it budget-based. Intended
            only to be used for longer sound pads such as ambient or music.
            </summary>
        </member>
        <member name="M:Duality.SoundBudgetPad.Update(System.Boolean,System.Single@)">
            <summary>
            Updates the budget pad.
            </summary>
            <param name="nonWeakAbove"></param>
            <param name="budget"></param>
        </member>
        <member name="P:Duality.SoundBudgetPad.Disposed">
            <summary>
            [GET] Whether the object has been disposed. Disposed objects are not to be used.
            Treat them as null or similar.
            </summary>
        </member>
        <member name="P:Duality.SoundBudgetPad.Sound">
            <summary>
            [GET] The <see cref="T:Duality.SoundInstance"/> that is wrapped by this budget pad.
            </summary>
        </member>
        <member name="P:Duality.SoundBudgetPad.Priority">
            <summary>
            [GET] The priority of this budget pad. Higher priorities overpower lower priorities.
            </summary>
        </member>
        <member name="P:Duality.SoundBudgetPad.PriorityValue">
            <summary>
            [GET] The numeric value of this budget pads priority.
            </summary>
        </member>
        <member name="P:Duality.SoundBudgetPad.SortId">
            <summary>
            [GET] The budget pads additional sorting id.
            </summary>
        </member>
        <member name="P:Duality.SoundBudgetPad.GivesUpWithoutBudget">
            <summary>
            [GET / SET] Whether this budget pad disposes itsself if it doesn't get any budget, i.e.
            is overpowered by another budget pad and isn't audible anyway.
            </summary>
        </member>
        <member name="P:Duality.SoundBudgetPad.Weak">
            <summary>
            [GET / SET] Whether this is a weak budget pad. Weak pads are automatically disposed as
            soon as a non-weak pad overpowers them. This behaviour can for example to be used for 
            automatically playing background music that is to be removed as soon as there's a scripted
            sequence playing its own, specific music.
            </summary>
        </member>
        <member name="P:Duality.SoundBudgetPad.Weight">
            <summary>
            [GET / SET] The budget weight this pad consumes.
            </summary>
        </member>
        <member name="T:Duality.SoundBudgetQueue">
            <summary>
            A queue of <see cref="T:Duality.SoundBudgetPad">SoundBudgetPads</see>.
            </summary>
        </member>
        <member name="F:Duality.SoundBudgetQueue.DefaultFadeInTime">
            <summary>
            A pads default fadein time in seconds.
            </summary>
        </member>
        <member name="F:Duality.SoundBudgetQueue.DefaultFadeOutTime">
            <summary>
            A pads default fadeout time in seconds.
            </summary>
        </member>
        <member name="M:Duality.SoundBudgetQueue.Update">
            <summary>
            Updates the queue.
            </summary>
        </member>
        <member name="M:Duality.SoundBudgetQueue.IsAnyScheduled">
            <summary>
            Determines whether there is currently any pad scheduled.
            </summary>
            <returns>True, if there is, false if not.</returns>
        </member>
        <member name="M:Duality.SoundBudgetQueue.Push(Duality.ContentRef{Duality.Resources.Sound},Duality.SoundBudgetPriority,System.Single)">
            <summary>
            Schedules a new budget pad.
            </summary>
            <param name="snd">The Sound that is to play.</param>
            <param name="priority">The priority of the pad.</param>
            <param name="fadeInTimeSec">The pads fadein time in seconds.</param>
            <returns>A new SoundBudgetPad.</returns>
        </member>
        <member name="M:Duality.SoundBudgetQueue.Pop(Duality.ContentRef{Duality.Resources.Sound},System.Single)">
            <summary>
            Fades out all currently scheduled pads that use the specified <see cref="T:Duality.Resources.Sound"/>.
            </summary>
            <param name="snd"></param>
            <param name="fadeOutTimeSec"></param>
        </member>
        <member name="M:Duality.SoundBudgetQueue.PopHigh(System.Single)">
            <summary>
            Fades out the pad with the highest priority i.e. that is (most) audible.
            </summary>
            <param name="fadeOutTimeSec"></param>
        </member>
        <member name="M:Duality.SoundBudgetQueue.PopLow(System.Single)">
            <summary>
            Fades out the pad with the lowest priority i.e. that is (most) inaudible.
            </summary>
            <param name="fadeOutTimeSec"></param>
        </member>
        <member name="M:Duality.SoundBudgetQueue.Clear(System.Single)">
            <summary>
            Fades out all currently scheduled pads.
            </summary>
            <param name="fadeOutTimeSec"></param>
        </member>
        <member name="T:Duality.DualityApp">
            <summary>
            This class controls Duality's main program flow control and general maintenance functionality.
            It initializes the engine, loads plugins, provides access to user input, houses global data structures
            and handles logfiles internally.
            </summary>
        </member>
        <member name="M:Duality.DualityApp.Init(Duality.DualityApp.ExecutionEnvironment,Duality.DualityApp.ExecutionContext,System.String[])">
            <summary>
            Initializes this DualityApp. Should be called before performing any operations withing Duality.
            </summary>
            <param name="context">The <see cref="T:Duality.DualityApp.ExecutionContext"/> in which Duality runs.</param>
            <param name="args">
            Command line arguments to run this DualityApp with. 
            Usually these are just the ones from the host application, passed on.
            </param>
        </member>
        <member name="M:Duality.DualityApp.Terminate">
            <summary>
            Terminates this DualityApp. This does not end the current Process, but it isn't recommended to
            attemp performing any Duality operations after it has been terminated.
            </summary>
            <param name="unexpected">
            If true, this is handled as an unexpected termination, such as because of an exception that
            from which the application can't recover.
            </param>
        </member>
        <member name="M:Duality.DualityApp.Update">
            <summary>
            Performs a single update cycle.
            </summary>
        </member>
        <member name="M:Duality.DualityApp.Render">
            <summary>
            Performs a single render cycle.
            </summary>
        </member>
        <member name="M:Duality.DualityApp.DisposeLater(System.Object)">
            <summary>
            Schedules the specified object for disposal. It is guaranteed to be disposed by the end of the current update cycle.
            </summary>
            <param name="o">The object to schedule for disposal.</param>
        </member>
        <member name="M:Duality.DualityApp.LoadSaveAll">
            <summary>
            Loads all <see cref="T:Duality.Resource">Resources</see> that are located in this DualityApp's data directory and
            saves them again. All loaded content is discarded both before and after this operation. You usually don't
            need this.
            </summary>
        </member>
        <member name="M:Duality.DualityApp.LoadAppData">
            <summary>
            Triggers Duality to (re)load its <see cref="T:Duality.DualityAppData"/>.
            </summary>
        </member>
        <member name="M:Duality.DualityApp.LoadUserData">
            <summary>
            Triggers Duality to (re)load its <see cref="T:Duality.DualityUserData"/>.
            </summary>
        </member>
        <member name="M:Duality.DualityApp.LoadMetaData">
            <summary>
            Triggers Duality to (re)load its <see cref="T:Duality.DualityMetaData"/>.
            </summary>
        </member>
        <member name="M:Duality.DualityApp.SaveAppData">
            <summary>
            Triggers Duality to save its <see cref="T:Duality.DualityAppData"/>.
            </summary>
        </member>
        <member name="M:Duality.DualityApp.SaveUserData">
            <summary>
            Triggers Duality to save its <see cref="T:Duality.DualityUserData"/>.
            </summary>
        </member>
        <member name="M:Duality.DualityApp.SaveMetaData">
            <summary>
            Triggers Duality to save its <see cref="T:Duality.DualityMetaData"/>.
            </summary>
        </member>
        <member name="M:Duality.DualityApp.GetDualityAssemblies">
            <summary>
            Enumerates all currently loaded assemblies that are part of Duality, i.e. Duality itsself and all loaded plugins.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duality.DualityApp.GetAvailDualityTypes(System.Type)">
            <summary>
            Enumerates all available Duality <see cref="T:System.Type">Types</see> that are assignable
            to the specified Type. 
            </summary>
            <param name="baseType">The base type to use for matching the result types.</param>
            <returns>An enumeration of all Duality types deriving from the specified type.</returns>
            <example>
            The following code logs all available kinds of <see cref="T:Duality.Components.Renderer">Renderers</see>:
            <code>
            var rendererTypes = DualityApp.GetAvailDualityTypes(typeof(Duality.Components.Renderer));
            foreach (Type rt in rendererTypes)
            {
            	Log.Core.Write("Renderer Type '{0}' from Assembly '{1}'", Log.Type(rt), rt.Assembly.FullName);
            }
            </code>
            </example>
        </member>
        <member name="M:Duality.DualityApp.CheckOpenALErrors(System.Boolean)">
            <summary>
            Checks for errors that might have occured during audio processing.
            </summary>
            <param name="silent">If true, errors aren't logged.</param>
            <returns>True, if an error occured, false if not.</returns>
        </member>
        <member name="M:Duality.DualityApp.CheckOpenGLErrors(System.Boolean)">
            <summary>
            Checks for errors that might have occured during video processing. You should avoid calling this method due to performance reasons.
            Only use it on suspect.
            </summary>
            <param name="silent">If true, errors aren't logged.</param>
            <returns>True, if an error occured, false if not.</returns>
        </member>
        <member name="M:Duality.DualityApp.GuardSingleThreadState(System.Boolean)">
            <summary>
            Guards the calling method agains being called from a thread that is not the main thread.
            Use this only at critical code segments that are likely to be called from somewhere else than the main thread
            but aren't allowed to.
            </summary>
            <param name="silent"></param>
            <returns>True if everyhing is allright. False if the guarded state has been violated.</returns>
        </member>
        <member name="E:Duality.DualityApp.UserDataChanged">
            <summary>
            Called when the games UserData changes
            </summary>
        </member>
        <member name="E:Duality.DualityApp.AppDataChanged">
            <summary>
            Called when the games AppData changes
            </summary>
        </member>
        <member name="E:Duality.DualityApp.Terminating">
            <summary>
            Called when Duality is being terminated by choice (e.g. not because of crashes or similar).
            It is also called in an editor environment.
            </summary>
        </member>
        <member name="E:Duality.DualityApp.PluginReady">
            <summary>
            Fired whenever a core plugin has been initialized. This is the case after loading or reloading one.
            </summary>
        </member>
        <member name="P:Duality.DualityApp.TargetResolution">
            <summary>
            [GET / SET] The size of the current rendering surface (full screen, a single window, etc.) in pixels. Setting this will not actually change
            Duality's state - this is a pure "for your information" property.
            </summary>
        </member>
        <member name="P:Duality.DualityApp.TargetMode">
            <summary>
            [GET / SET] The <see cref="T:OpenTK.Graphics.GraphicsMode"/> in which rendering takes place. Setting this will not actually change
            Duality's state - this is a pure "for your information" property.
            </summary>
        </member>
        <member name="P:Duality.DualityApp.Mouse">
            <summary>
            [GET] Provides access to mouse user input.
            </summary>
        </member>
        <member name="P:Duality.DualityApp.Keyboard">
            <summary>
            [GET] Provides access to keyboard user input
            </summary>
        </member>
        <member name="P:Duality.DualityApp.Sound">
            <summary>
            [GET] Provides access to the main <see cref="T:Duality.SoundDevice"/>.
            </summary>
        </member>
        <member name="P:Duality.DualityApp.AppData">
            <summary>
            [GET / SET] Provides access to Duality's current <see cref="T:Duality.DualityAppData">application data</see>. This is never null.
            Any kind of data change event is fired as soon as you re-assign this property. Be sure to do that after changing its data.
            </summary>
        </member>
        <member name="P:Duality.DualityApp.UserData">
            <summary>
            [GET / SET] Provides access to Duality's current <see cref="T:Duality.DualityUserData">user data</see>. This is never null.
            Any kind of data change event is fired as soon as you re-assign this property. Be sure to do that after changing its data.
            </summary>
        </member>
        <member name="P:Duality.DualityApp.MetaData">
            <summary>
            [GET] Provides access to Duality's current <see cref="T:Duality.DualityMetaData">meta data</see>. This is never null.
            </summary>
        </member>
        <member name="P:Duality.DualityApp.AppDataPath">
            <summary>
            [GET] Returns the path where this DualityApp's <see cref="T:Duality.DualityAppData">application data</see> is located at.
            </summary>
        </member>
        <member name="P:Duality.DualityApp.UserDataPath">
            <summary>
            [GET] Returns the path where this DualityApp's <see cref="T:Duality.DualityUserData">user data</see> is located at.
            </summary>
        </member>
        <member name="P:Duality.DualityApp.MetaDataPath">
            <summary>
            [GET] Returns the path where this DualityApp's <see cref="T:Duality.DualityMetaData">meta data</see> is located at.
            </summary>
        </member>
        <member name="P:Duality.DualityApp.DefaultMode">
            <summary>
            [GET] Returns the <see cref="T:OpenTK.Graphics.GraphicsMode"/> that Duality intends to use by default.
            </summary>
        </member>
        <member name="P:Duality.DualityApp.AvailableModes">
            <summary>
            [GET] Enumerates all available <see cref="T:OpenTK.Graphics.GraphicsMode">GraphicsModes</see>.
            </summary>
        </member>
        <member name="P:Duality.DualityApp.ExecContext">
            <summary>
            [GET] Returns the <see cref="T:Duality.DualityApp.ExecutionContext"/> in which this DualityApp is currently running.
            </summary>
        </member>
        <member name="P:Duality.DualityApp.ExecEnvironment">
            <summary>
            [GET] Returns the <see cref="T:Duality.DualityApp.ExecutionEnvironment"/> in which this DualityApp is currently running.
            </summary>
        </member>
        <member name="P:Duality.DualityApp.LoadedPlugins">
            <summary>
            [GET] Enumerates all currently loaded plugins.
            </summary>
        </member>
        <member name="P:Duality.DualityApp.DisposedPlugins">
            <summary>
            [GET] Enumerates all plugin assemblies that have been loaded before, but have been discarded due to a runtime plugin reload operation.
            This is usually only the case when being executed from withing the editor or manually triggering a plugin reload. However,
            this is normally unnecessary.
            </summary>
        </member>
        <member name="T:Duality.DualityApp.ExecutionContext">
            <summary>
            Describes the context in which the current DualityApp runs.
            </summary>
        </member>
        <member name="F:Duality.DualityApp.ExecutionContext.Terminated">
            <summary>
            Duality has been terminated. There is no guarantee that any object is still valid or usable.
            </summary>
        </member>
        <member name="F:Duality.DualityApp.ExecutionContext.Unknown">
            <summary>
            The context in which Duality is executed is unknown.
            </summary>
        </member>
        <member name="F:Duality.DualityApp.ExecutionContext.Game">
            <summary>
            Duality runs in a game environment.
            </summary>
        </member>
        <member name="F:Duality.DualityApp.ExecutionContext.Editor">
            <summary>
            Duality runs in an editing environment.
            </summary>
        </member>
        <member name="T:Duality.DualityApp.ExecutionEnvironment">
            <summary>
            Describes the environment in which the current DualityApp runs.
            </summary>
        </member>
        <member name="F:Duality.DualityApp.ExecutionEnvironment.Unknown">
            <summary>
            The environment in which Duality is executed is unknown.
            </summary>
        </member>
        <member name="F:Duality.DualityApp.ExecutionEnvironment.Launcher">
            <summary>
            Duality runs in the DualityLauncher
            </summary>
        </member>
        <member name="F:Duality.DualityApp.ExecutionEnvironment.Editor">
            <summary>
            Duality runs in the DualityEditor
            </summary>
        </member>
        <member name="T:Duality.ICmpUpdatable">
            <summary>
            Implement this interface in <see cref="T:Duality.Component">Components</see> that require per-frame updates.
            </summary>
        </member>
        <member name="M:Duality.ICmpUpdatable.OnUpdate">
            <summary>
            Called once per frame in order to update the Component.
            </summary>
        </member>
        <member name="T:Duality.ICmpEditorUpdatable">
            <summary>
            Implement this interface in C<see cref="T:Duality.Component">Components</see> that require per-frame updates in the editor.
            </summary>
        </member>
        <member name="M:Duality.ICmpEditorUpdatable.OnUpdate">
            <summary>
            Called once per frame in order to update the Component in the editor.
            </summary>
        </member>
        <member name="T:Duality.ICmpComponentListener">
            <summary>
            Implement this interface in <see cref="T:Duality.Component">Components</see> that require notifications for other Components 
            being added or removed at the same GameObject.
            </summary>
        </member>
        <member name="M:Duality.ICmpComponentListener.OnComponentAdded(Duality.Component)">
            <summary>
            Called whenever another Component has been added to this Components GameObject.
            </summary>
            <param name="comp">The Component that has been added</param>
        </member>
        <member name="M:Duality.ICmpComponentListener.OnComponentRemoving(Duality.Component)">
            <summary>
            Called whenever another Component is being removed from this Components GameObject.
            </summary>
            <param name="comp">The Component that is being removed</param>
        </member>
        <member name="T:Duality.ICmpGameObjectListener">
            <summary>
            Implement this interface in <see cref="T:Duality.Component">Components</see> that require notification if the location of 
            their GameObject inside the scene graph changes.
            </summary>
        </member>
        <member name="M:Duality.ICmpGameObjectListener.OnGameObjectParentChanged(Duality.GameObject,Duality.GameObject)">
            <summary>
            Called whenever this Components GameObjects <see cref="P:Duality.GameObject.Parent"/> has changed.
            </summary>
            <param name="oldParent">The old parent object.</param>
            <param name="newParent">The new parent object.</param>
        </member>
        <member name="T:Duality.ICmpInitializable">
            <summary>
            Implement this interface in <see cref="T:Duality.Component">Components</see> that require specific init and shutdown logic.
            </summary>
        </member>
        <member name="M:Duality.ICmpInitializable.OnInit(Duality.Component.InitContext)">
            <summary>
            Called in order to initialize the Component in a specific way.
            </summary>
            <param name="context">The kind of initialization that is intended.</param>
        </member>
        <member name="M:Duality.ICmpInitializable.OnShutdown(Duality.Component.ShutdownContext)">
            <summary>
            Called in order to shutdown the Component in a specific way.
            </summary>
            <param name="context">The kind of shutdown that is intended.</param>
        </member>
        <member name="T:Duality.ICmpRenderer">
            <summary>
            Implement this interface in <see cref="T:Duality.Component">Components</see> that are considered renderable. 
            </summary>
        </member>
        <member name="M:Duality.ICmpRenderer.IsVisible(Duality.IDrawDevice)">
            <summary>
            Determines whether or not this renderer is visible to the specified <see cref="T:Duality.IDrawDevice"/>.
            </summary>
            <param name="device">The <see cref="T:Duality.IDrawDevice"/> to which visibility is determined.</param>
            <returns>True, if this renderer is visible to the <see cref="T:Duality.IDrawDevice"/>. False, if not.</returns>
        </member>
        <member name="M:Duality.ICmpRenderer.Draw(Duality.IDrawDevice)">
            <summary>
            Draws the object.
            </summary>
            <param name="device">The <see cref="T:Duality.IDrawDevice"/> to which the object is drawn.</param>
        </member>
        <member name="P:Duality.ICmpRenderer.BoundRadius">
            <summary>
            [GET] The Renderers bounding radius, originating from its <see cref="!:SpaceCoord"/>.
            </summary>
        </member>
        <member name="T:Duality.ICmpCollisionListener">
            <summary>
            Implement this interface in <see cref="T:Duality.Component">Components</see> that require notification of
            collision events that occur to the <see cref="T:Duality.GameObject"/> they belong to.
            </summary>
        </member>
        <member name="M:Duality.ICmpCollisionListener.OnCollisionBegin(Duality.Component,Duality.CollisionEventArgs)">
            <summary>
            Called whenever the GameObject starts to collide with something.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Duality.ICmpCollisionListener.OnCollisionEnd(Duality.Component,Duality.CollisionEventArgs)">
            <summary>
            Called whenever the GameObject stops to collide with something.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Duality.ICmpCollisionListener.OnCollisionSolve(Duality.Component,Duality.CollisionEventArgs)">
            <summary>
            Called each frame after solving a collision with the GameObject.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:Duality.RequiredComponentAttribute">
            <summary>
            This attribute indicates a <see cref="T:Duality.Component">Components</see> requirement for another Component
            of a specific Type, that is attached to the same <see cref="T:Duality.GameObject"/>.
            </summary>
            <example>
            The following code uses a RequiredComponentAttribute to indicate that a <see cref="T:Duality.Components.SoundEmitter"/>
            always needs a <see cref="T:Duality.Components.Transform"/> available as well.
            <code>
            [RequiredComponent(typeof(Transform))]
            public sealed class SoundEmitter : Component, ICmpUpdatable, ICmpInitializable
            {
            	// ...
            }
            </code>
            </example>
        </member>
        <member name="P:Duality.RequiredComponentAttribute.RequiredComponentType">
            <summary>
            The Component Type that is required by this Component.
            </summary>
        </member>
        <member name="T:Duality.Component">
            <summary>
            Components are isolated logic units that can independently be added to and removed from <see cref="T:Duality.GameObject">GameObjects</see>.
            Each Component has a distinct purpose, thus it is not possible to add multiple Components of the same Type to one GameObject.
            Also, a Component may not belong to multiple GameObjects at once.
            </summary>
        </member>
        <member name="T:Duality.IManageableObject">
            <summary>
            Represents an object that can be managed by an <see cref="T:Duality.ObjectManager`1"/>.
            </summary>
        </member>
        <member name="M:Duality.IManageableObject.Dispose">
            <summary>
            Disposes the object.
            </summary>
        </member>
        <member name="P:Duality.IManageableObject.Disposed">
            <summary>
            [GET] Returns whether the object is considered disposed.
            </summary>
        </member>
        <member name="P:Duality.IManageableObject.Active">
            <summary>
            [GET] Returns whether the object is currently active.
            </summary>
        </member>
        <member name="T:Duality.Cloning.ICloneable">
            <summary>
            Provides a general interface for an object type with custom cloning.
            </summary>
        </member>
        <member name="M:Duality.Component.Dispose">
            <summary>
            Disposes this Component. You usually don't need this - use <see cref="M:Duality.Component.DisposeLater"/> instead.
            </summary>
            <seealso cref="M:Duality.Component.DisposeLater"/>
        </member>
        <member name="M:Duality.Component.DisposeLater">
            <summary>
            Schedules this Component for disposal. It is guaranteed to be executed until the next update cycle starts.
            </summary>
            <seealso cref="M:Duality.Component.Dispose"/>
        </member>
        <member name="M:Duality.Component.Clone">
            <summary>
            Creates a deep copy of this Component.
            </summary>
            <returns>A reference to a newly created deep copy of this Component.</returns>
        </member>
        <member name="M:Duality.Component.CopyTo(Duality.Component)">
            <summary>
            Deep-copies this Components data to the specified target Component. If source and 
            target Component Type do not match, the operation will fail.
            </summary>
            <param name="target">The target Component to copy to.</param>
        </member>
        <member name="M:Duality.Component.OnCopyTo(Duality.Component,Duality.Cloning.CloneProvider)">
            <summary>
            This method Performs the <see cref="M:Duality.Component.CopyTo(Duality.Component)"/> operation for custom Component Types.
            It uses reflection to copy each field that is declared inside a Duality plugin automatically.
            However, you may override this method to specify your own behaviour or simply speed things
            up a bit by not using Reflection.
            </summary>
            <remarks>
            Note: Since PrefabLinks may contain references to object-local values,
            all objects fields should either be overwritten or left untouched.
            DO NOT modify any referenced objects. Instead, discard them and create new.
            </remarks>
            <param name="target">The target Component where this Components data is copied to.</param>
        </member>
        <member name="M:Duality.Component.RequiresComponent(System.Type)">
            <summary>
            Returns whether this Component requires a Component of the specified Type.
            </summary>
            <param name="requiredType">The Component Type that might be required.</param>
            <returns>True, if there is a requirement, false if not</returns>
        </member>
        <member name="M:Duality.Component.IsComponentRequirementMet(Duality.Component)">
            <summary>
            Returns whether this objects Component requirement is met.
            </summary>
            <param name="evenWhenRemovingThis">If not null, the specified Component is assumed to be missing.</param>
            <returns>True, if the Component requirement is met, false if not.</returns>
        </member>
        <member name="M:Duality.Component.IsComponentRequirementMet(Duality.GameObject,System.Collections.Generic.IEnumerable{Duality.Component})">
            <summary>
            Returns whether this objects Component requirement is met assuming a different <see cref="P:Duality.Component.GameObj">parent GameObject</see>
            </summary>
            <param name="isMetInObj">The specified object is assumed as parent object.</param>
            <param name="whenAddingThose">If not null, the specified Components are assumed to be present in the specified parent object.</param>
            <returns>True, if the Component requirement is met, false if not.</returns>
        </member>
        <member name="M:Duality.Component.GetRequiredComponents">
            <summary>
            Returns all Component Types this Component requires.
            </summary>
            <returns>An array of required Component Types.</returns>
        </member>
        <member name="M:Duality.Component.RequiresComponent(System.Type,System.Type)">
            <summary>
            Returns whether a Component Type requires another Component Type to work properly.
            </summary>
            <param name="cmpType">The Component Type that might require another Component Type.</param>
            <param name="requiredType">The Component Type that might be required.</param>
            <returns>True, if there is a requirement, false if not</returns>
        </member>
        <member name="M:Duality.Component.GetRequiredComponents(System.Type)">
            <summary>
            Returns all required Component Types of a specified Component Type.
            </summary>
            <param name="cmpType">The Component Type that might require other Component Types.</param>
            <returns>An array of Component Types to require.</returns>
        </member>
        <member name="P:Duality.Component.Active">
            <summary>
            [GET / SET] Whether or not the Component is currently active. To return true,
            both the Component itsself and its parent GameObject need to be active.
            </summary>
            <seealso cref="P:Duality.Component.ActiveSingle"/>
        </member>
        <member name="P:Duality.Component.ActiveSingle">
            <summary>
            [GET / SET] Whether or not the Component is currently active. Unlike <see cref="P:Duality.Component.Active"/>,
            this property ignores parent activation states and depends only on this single Component.
            The scene graph and other Duality instances usually check <see cref="P:Duality.Component.Active"/>, not ActiveSingle.
            </summary>
            <seealso cref="P:Duality.Component.Active"/>
        </member>
        <member name="P:Duality.Component.Disposed">
            <summary>
            [GET] Returns whether this Component has been disposed. Disposed Components are not to be used and should
            be treated specifically or as null references by your code.
            </summary>
        </member>
        <member name="P:Duality.Component.GameObj">
            <summary>
            [GET / SET] The <see cref="T:Duality.GameObject"/> to which this Component belongs.
            </summary>
        </member>
        <member name="T:Duality.Component.InitContext">
            <summary>
            Describes the kind of initialization that can be performed on a Component
            </summary>
        </member>
        <member name="F:Duality.Component.InitContext.Saved">
            <summary>
            A saving process has just finished.
            </summary>
        </member>
        <member name="F:Duality.Component.InitContext.Loaded">
            <summary>
            The Component has been fully loaded.
            </summary>
        </member>
        <member name="F:Duality.Component.InitContext.Activate">
            <summary>
            The Component is being activated. This can be the result of <see cref="P:Duality.Component.Active">activating</see> it,
            <see cref="P:Duality.GameObject.Active">activating</see> its GameObject, adding itsself or its GameObject
            to the <see cref="P:Duality.Resources.Scene.Current">current Scene</see> or entering a <see cref="T:Duality.Resources.Scene"/>
            in which this Component is registered.
            </summary>
        </member>
        <member name="F:Duality.Component.InitContext.AddToGameObject">
            <summary>
            The Component has just been added to a GameObject
            </summary>
        </member>
        <member name="T:Duality.Component.ShutdownContext">
            <summary>
            Describes the kind of shutdown that can be performed on a Component
            </summary>
        </member>
        <member name="F:Duality.Component.ShutdownContext.Saving">
            <summary>
            A saving process is about to start
            </summary>
        </member>
        <member name="F:Duality.Component.ShutdownContext.Deactivate">
            <summary>
            The Component has been deactivated. This can be the result of <see cref="P:Duality.Component.Active">deactivating</see> it,
            <see cref="P:Duality.GameObject.Active">deactivating</see> its GameObject, removing itsself or its GameObject
            from the <see cref="P:Duality.Resources.Scene.Current">current Scene</see> or leaving a <see cref="T:Duality.Resources.Scene"/>
            in which this Component is registered.
            </summary>
        </member>
        <member name="F:Duality.Component.ShutdownContext.RemovingFromGameObject">
            <summary>
            The Component is being removed from its GameObject.
            </summary>
        </member>
        <member name="T:Duality.IMouseInput">
            <summary>
            Provides access to user mouse input
            </summary>
        </member>
        <member name="P:Duality.IMouseInput.X">
            <summary>
            [GET] The current viewport-local cursor X position.
            </summary>
        </member>
        <member name="P:Duality.IMouseInput.Y">
            <summary>
            [GET] The current viewport-local cursor Y position.
            </summary>
        </member>
        <member name="P:Duality.IMouseInput.Wheel">
            <summary>
            [GET] The current mouse wheel value
            </summary>
        </member>
        <member name="P:Duality.IMouseInput.Item(OpenTK.Input.MouseButton)">
            <summary>
            [GET] Returns whether a specific <see cref="T:OpenTK.Input.MouseButton"/> is currently pressed.
            </summary>
        </member>
        <member name="E:Duality.IMouseInput.ButtonUp">
            <summary>
            Fired when a <see cref="T:OpenTK.Input.MouseButton"/> is no longer pressed.
            </summary>
        </member>
        <member name="E:Duality.IMouseInput.ButtonDown">
            <summary>
            Fired once when a <see cref="T:OpenTK.Input.MouseButton"/> is pressed.
            </summary>
        </member>
        <member name="E:Duality.IMouseInput.Move">
            <summary>
            Fired when the cursor moves.
            </summary>
        </member>
        <member name="E:Duality.IMouseInput.WheelChanged">
            <summary>
            Fired when the mouse wheel value changes.
            </summary>
        </member>
        <member name="T:Duality.VertexFormat.VertexC1P3T2">
            <summary>
            Vertex data providing each vertex a position (3x4 byte), color (1x4 byte) and texture coordinate (2x4 byte)
            </summary>
        </member>
        <member name="T:Duality.VertexFormat.IVertexData">
            <summary>
            A general interface for different types of vertex data.
            </summary>
        </member>
        <member name="M:Duality.VertexFormat.IVertexData.SetupVBO(Duality.Resources.BatchInfo)">
            <summary>
            Sets up the currently bound OpenGL VertexBufferObject and injects actual vertex data.
            </summary>
            <param name="mat">
            The <see cref="T:Duality.Resources.Material"/> that is currently active. Usually only needed
            for custom vertex attributes in order to access <see cref="T:Duality.Resources.ShaderVarInfo">shader variables</see>.
            </param>
        </member>
        <member name="M:Duality.VertexFormat.IVertexData.UploadToVBO``1(``0[])">
            <summary>
            Uploads vertex data to the currently bound OpenGL VertexBufferObject.
            </summary>
            <typeparam name="T">The type of input vertex data to use.</typeparam>
            <param name="vertexData">The vertex data to be uploaded into the VBO.</param>
        </member>
        <member name="M:Duality.VertexFormat.IVertexData.FinishVBO(Duality.Resources.BatchInfo)">
            <summary>
            Resets the VBO configuration.
            </summary>
            <param name="mat">The <see cref="T:Duality.Resources.Material"/> that was active when setting it up.</param>
        </member>
        <!-- Ungültiger XML-Kommentar wurde für den Member "P:Duality.VertexFormat.IVertexData.TypeIndex" ignoriert -->
        <member name="P:Duality.VertexFormat.IVertexData.Pos">
            <summary>
            [GET] The vertices position.
            </summary>
        </member>
        <member name="F:Duality.VertexFormat.VertexC1P3T2.OffsetColor">
            <summary>
            Byte offset for the color.
            </summary>
        </member>
        <member name="F:Duality.VertexFormat.VertexC1P3T2.OffsetPos">
            <summary>
            Byte offset for the position.
            </summary>
        </member>
        <member name="F:Duality.VertexFormat.VertexC1P3T2.OffsetTex0">
            <summary>
            Byte offset for the texture coordinate.
            </summary>
        </member>
        <member name="F:Duality.VertexFormat.VertexC1P3T2.Size">
            <summary>
            Total size in bytes.
            </summary>
        </member>
        <member name="F:Duality.VertexFormat.VertexC1P3T2.Color">
            <summary>
            The vertices color.
            </summary>
        </member>
        <member name="F:Duality.VertexFormat.VertexC1P3T2.Pos">
            <summary>
            The vertices position.
            </summary>
        </member>
        <member name="F:Duality.VertexFormat.VertexC1P3T2.TexCoord">
            <summary>
            The vertices texture coordinate.
            </summary>
        </member>
        <member name="T:Duality.Serialization.XmlMetaFormatter">
            <summary>
            De/Serializes abstract object data using <see cref="T:Duality.Serialization.MetaFormat.DataNode">DataNodes</see> instead of the object itsself.
            </summary>
            <seealso cref="T:Duality.Serialization.XmlFormatter"/>
        </member>
        <member name="T:Duality.Serialization.XmlFormatterBase">
            <summary>
            Base class for Dualitys xml serializers.
            </summary>
        </member>
        <member name="T:Duality.Serialization.Formatter">
            <summary>
            Base class for Dualitys serializers.
            </summary>
        </member>
        <member name="F:Duality.Serialization.Formatter.fieldBlockers">
            <summary>
            The de/serialization <see cref="T:Duality.Log"/>.
            </summary>
            <summary>
            A list of <see cref="T:System.Reflection.FieldInfo">field</see> blockers. If any registered field blocker
            returns true upon serializing a specific field, a default value is assumed instead.
            </summary>
        </member>
        <member name="F:Duality.Serialization.Formatter.surrogates">
            <summary>
            A list of <see cref="T:Duality.Serialization.ISurrogate">Serialization Surrogates</see>. If any of them
            matches the <see cref="T:System.Type"/> of an object that is to be serialized, instead of letting it
            serialize itsself, the <see cref="T:Duality.Serialization.ISurrogate"/> with the highest <see cref="P:Duality.Serialization.ISurrogate.Priority"/>
            is used instead.
            </summary>
        </member>
        <member name="F:Duality.Serialization.Formatter.idManager">
            <summary>
            Manages object IDs during de/serialization.
            </summary>
        </member>
        <member name="M:Duality.Serialization.Formatter.ReadObject">
            <summary>
            Writes the specified object including all referenced objects.
            </summary>
            <param name="obj">The object to write.</param>
        </member>
        <member name="M:Duality.Serialization.Formatter.WriteObject(System.Object)">
            <summary>
            Reads an object including all referenced objects.
            </summary>
            <returns>The object that has been read.</returns>
        </member>
        <member name="M:Duality.Serialization.Formatter.GetNullObject">
            <summary>
            Returns an object indicating a "null" value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duality.Serialization.Formatter.GetWriteObjectData(System.Object,Duality.Serialization.SerializeType@,Duality.Serialization.DataType@,System.UInt32@)">
            <summary>
            Determines internal data for writing a given object.
            </summary>
            <param name="obj">The object to write</param>
            <param name="objSerializeType">The <see cref="T:Duality.Serialization.SerializeType"/> that describes the specified object.</param>
            <param name="dataType">The <see cref="T:Duality.Serialization.DataType"/> that is used for writing the specified object.</param>
            <param name="objId">An object id that is assigned to the specified object.</param>
        </member>
        <member name="M:Duality.Serialization.Formatter.ClearFieldBlockers">
            <summary>
            Unregisters all <see cref="P:Duality.Serialization.Formatter.FieldBlockers"/>.
            </summary>
        </member>
        <member name="M:Duality.Serialization.Formatter.AddFieldBlocker(System.Predicate{System.Reflection.FieldInfo})">
            <summary>
            Registers a new <see cref="P:Duality.Serialization.Formatter.FieldBlockers">FieldBlocker</see>.
            </summary>
            <param name="blocker"></param>
        </member>
        <member name="M:Duality.Serialization.Formatter.RemoveFieldBlocker(System.Predicate{System.Reflection.FieldInfo})">
            <summary>
            Unregisters an existing <see cref="P:Duality.Serialization.Formatter.FieldBlockers">FieldBlocker</see>.
            </summary>
            <param name="blocker"></param>
        </member>
        <member name="M:Duality.Serialization.Formatter.IsFieldBlocked(System.Reflection.FieldInfo)">
            <summary>
            Determines whether a specific <see cref="T:System.Reflection.FieldInfo">field</see> is blocked.
            Instead of writing the value of a blocked field, the matching <see cref="T:System.Type">Types</see>
            defautl value is assumed.
            </summary>
            <param name="field">The <see cref="T:System.Reflection.FieldInfo">field</see> in question</param>
            <returns>True, if the <see cref="T:System.Reflection.FieldInfo">field</see> is blocked, false if not.</returns>
        </member>
        <member name="M:Duality.Serialization.Formatter.ClearSurrogates">
            <summary>
            Unregisters all <see cref="T:Duality.Serialization.ISurrogate">Surrogates</see>.
            </summary>
        </member>
        <member name="M:Duality.Serialization.Formatter.AddSurrogate(Duality.Serialization.ISurrogate)">
            <summary>
            Registers a new <see cref="T:Duality.Serialization.ISurrogate">Surrogate</see>.
            </summary>
            <param name="surrogate"></param>
        </member>
        <member name="M:Duality.Serialization.Formatter.RemoveSurrogate(Duality.Serialization.ISurrogate)">
            <summary>
            Unregisters an existing <see cref="T:Duality.Serialization.ISurrogate">Surrogate</see>.
            </summary>
            <param name="surrogate"></param>
        </member>
        <member name="M:Duality.Serialization.Formatter.GetSurrogateFor(System.Type)">
            <summary>
            Retrieves a matching <see cref="T:Duality.Serialization.ISurrogate"/> for the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="t">The <see cref="T:System.Type"/> to retrieve a <see cref="T:Duality.Serialization.ISurrogate"/> for.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.Serialization.Formatter.LogCustomSerializationError(System.UInt32,System.Type,System.Exception)">
            <summary>
            Logs an error that occured during <see cref="T:Duality.Serialization.ISerializable">custom serialization</see>.
            </summary>
            <param name="objId">The object id of the affected object.</param>
            <param name="serializeType">The <see cref="T:System.Type"/> of the affected object.</param>
            <param name="e">The <see cref="T:System.Exception"/> that occured.</param>
        </member>
        <member name="M:Duality.Serialization.Formatter.LogCustomDeserializationError(System.UInt32,System.Type,System.Exception)">
            <summary>
            Logs an error that occured during <see cref="T:Duality.Serialization.ISerializable">custom deserialization</see>.
            </summary>
            <param name="objId">The object id of the affected object.</param>
            <param name="serializeType">The <see cref="T:System.Type"/> of the affected object.</param>
            <param name="e">The <see cref="T:System.Exception"/> that occured.</param>
        </member>
        <member name="M:Duality.Serialization.Formatter.LogCantResolveTypeError(System.UInt32,System.String)">
            <summary>
            Logs an error that occured trying to resolve a <see cref="T:System.Type"/> by its <see cref="M:Duality.ReflectionHelper.GetTypeId(System.Type)">type string</see>.
            </summary>
            <param name="objId">The object id of the affected object.</param>
            <param name="typeString">The <see cref="M:Duality.ReflectionHelper.GetTypeId(System.Type)">type string</see> that couldn't be resolved.</param>
        </member>
        <member name="M:Duality.Serialization.Formatter.LogCantResolveMemberError(System.UInt32,System.String)">
            <summary>
            Logs an error that occured trying to resolve a <see cref="!:System.MemberInfo"/> by its <see cref="M:Duality.ReflectionHelper.GetMemberId(System.Reflection.MemberInfo)">id string</see>.
            </summary>
            <param name="objId">The object id of the affected object.</param>
            <param name="memberString">The <see cref="M:Duality.ReflectionHelper.GetMemberId(System.Reflection.MemberInfo)">id string</see> that couldn't be resolved.</param>
        </member>
        <member name="M:Duality.Serialization.Formatter.Create(System.IO.Stream,Duality.Serialization.FormattingMethod)">
            <summary>
            Creates a new Formatter using the specified stream for I/O.
            </summary>
            <param name="stream">The stream to use.</param>
            <param name="method">
            The formatting method to prefer. If <see cref="F:Duality.Serialization.FormattingMethod.Unknown"/> is specified, if the stream
            is read- and seekable, auto-detection is used. Otherwise, the <see cref="P:Duality.Serialization.Formatter.DefaultMethod">default formatting method</see> is used.
            </param>
            <returns>A newly created Formatter meeting the specified criteria.</returns>
        </member>
        <member name="M:Duality.Serialization.Formatter.CreateMeta(System.IO.Stream,Duality.Serialization.FormattingMethod)">
            <summary>
            Creates a new MetaFormat Formatter using the specified stream for I/O.
            </summary>
            <param name="stream">The stream to use.</param>
            <param name="method">
            The formatting method to prefer. If <see cref="F:Duality.Serialization.FormattingMethod.Unknown"/> is specified, if the stream
            is read- and seekable, auto-detection is used. Otherwise, the <see cref="P:Duality.Serialization.Formatter.DefaultMethod">default formatting method</see> is used.
            </param>
            <returns>A newly created MetaFormat Formatter meeting the specified criteria.</returns>
        </member>
        <member name="P:Duality.Serialization.Formatter.SerializationLog">
            <summary>
            [GET / SET] The de/serialization <see cref="T:Duality.Log"/>.
            </summary>
        </member>
        <member name="P:Duality.Serialization.Formatter.FieldBlockers">
            <summary>
            [GET] Enumerates registered <see cref="T:System.Reflection.FieldInfo">field</see> blockers. If any registered field blocker
            returns true upon serializing a specific field, a default value is assumed instead.
            </summary>
        </member>
        <member name="P:Duality.Serialization.Formatter.Surrogates">
            <summary>
            [GET] Enumerates registered <see cref="T:Duality.Serialization.ISurrogate">Serialization Surrogates</see>. If any of them
            matches the <see cref="T:System.Type"/> of an object that is to be serialized, instead of letting it
            serialize itsself, the <see cref="T:Duality.Serialization.ISurrogate"/> with the highest <see cref="P:Duality.Serialization.ISurrogate.Priority"/>
            is used instead.
            </summary>
        </member>
        <member name="P:Duality.Serialization.Formatter.Disposed">
            <summary>
            [GET] Whether this binary serializer has been disposed. A disposed object cannot be used anymore.
            </summary>
        </member>
        <member name="P:Duality.Serialization.Formatter.DefaultMethod">
            <summary>
            [GET / SET] The default formatting method to use, if no other is specified.
            </summary>
        </member>
        <member name="T:Duality.Serialization.Formatter.CustomSerialIOBase`1">
            <summary>
            Buffer object for <see cref="T:Duality.Serialization.ISerializable">custom de/serialization</see>, 
            providing read and write functionality.
            </summary>
        </member>
        <member name="T:Duality.Serialization.IDataReader">
            <summary>
            Provides reading capabilities for serialization purposes
            </summary>
        </member>
        <member name="M:Duality.Serialization.IDataReader.ReadValue(System.String)">
            <summary>
            Reads the value that is associated with the specified name.
            </summary>
            <param name="name">The name that is used for retrieving the value.</param>
            <returns>The value that has been read using the given name.</returns>
            <seealso cref="M:Duality.Serialization.IDataReader.ReadValue``1(System.String)"/>
            <seealso cref="M:Duality.Serialization.IDataReader.ReadValue``1(System.String,``0@)"/>
        </member>
        <member name="M:Duality.Serialization.IDataReader.ReadValue``1(System.String)">
            <summary>
            Reads the value that is associated with the specified name.
            </summary>
            <typeparam name="T">The expected value type.</typeparam>
            <param name="name">The name that is used for retrieving the value.</param>
            <returns>The value that has been read and cast using the given name and type.</returns>
            <seealso cref="M:Duality.Serialization.IDataReader.ReadValue(System.String)"/>
            <seealso cref="M:Duality.Serialization.IDataReader.ReadValue``1(System.String,``0@)"/>
        </member>
        <member name="M:Duality.Serialization.IDataReader.ReadValue``1(System.String,``0@)">
            <summary>
            Reads the value that is associated with the specified name.
            </summary>
            <typeparam name="T">The expected value type.</typeparam>
            <param name="name">The name that is used for retrieving the value.</param>
            <param name="value">The value that has been read and cast using the given name and type.</param>
            <seealso cref="M:Duality.Serialization.IDataReader.ReadValue(System.String)"/>
            <seealso cref="M:Duality.Serialization.IDataReader.ReadValue``1(System.String)"/>
        </member>
        <member name="P:Duality.Serialization.IDataReader.Keys">
            <summary>
            [GET] Enumerates all available keys.
            </summary>
        </member>
        <member name="T:Duality.Serialization.IDataWriter">
            <summary>
            Provides writing capabilities for serialization purposes
            </summary>
        </member>
        <member name="M:Duality.Serialization.IDataWriter.WriteValue(System.String,System.Object)">
            <summary>
            Writes the specified name and value.
            </summary>
            <param name="name">
            The name to which the written value is mapped. 
            May, for example, be the name of a <see cref="T:System.Reflection.FieldInfo">Field</see>
            to which the written value belongs, but there are no naming restrictions, except that one name can't be used twice.
            </param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Duality.Serialization.Formatter.CustomSerialIOBase`1.Serialize(`0)">
            <summary>
            Writes the contained data to the specified serializer.
            </summary>
            <param name="formatter">The serializer to write data to.</param>
        </member>
        <member name="M:Duality.Serialization.Formatter.CustomSerialIOBase`1.Deserialize(`0)">
            <summary>
            Reads data from the specified serializer
            </summary>
            <param name="formatter">The serializer to read data from.</param>
        </member>
        <member name="M:Duality.Serialization.Formatter.CustomSerialIOBase`1.Clear">
            <summary>
            Clears all contained data.
            </summary>
        </member>
        <member name="M:Duality.Serialization.Formatter.CustomSerialIOBase`1.WriteValue(System.String,System.Object)">
            <summary>
            Writes the specified name and value.
            </summary>
            <param name="name">
            The name to which the written value is mapped. 
            May, for example, be the name of a <see cref="T:System.Reflection.FieldInfo">Field</see>
            to which the written value belongs, but there are no naming restrictions, except that one name can't be used twice.
            </param>
            <param name="value">The value to write.</param>
            <seealso cref="T:Duality.Serialization.IDataWriter"/>
        </member>
        <member name="M:Duality.Serialization.Formatter.CustomSerialIOBase`1.ReadValue(System.String)">
            <summary>
            Reads the value that is associated with the specified name.
            </summary>
            <param name="name">The name that is used for retrieving the value.</param>
            <returns>The value that has been read using the given name.</returns>
            <seealso cref="T:Duality.Serialization.IDataReader"/>
            <seealso cref="M:Duality.Serialization.Formatter.CustomSerialIOBase`1.ReadValue``1(System.String)"/>
            <seealso cref="M:Duality.Serialization.Formatter.CustomSerialIOBase`1.ReadValue``1(System.String,``0@)"/>
        </member>
        <member name="M:Duality.Serialization.Formatter.CustomSerialIOBase`1.ReadValue``1(System.String)">
            <summary>
            Reads the value that is associated with the specified name.
            </summary>
            <typeparam name="U">The expected value type.</typeparam>
            <param name="name">The name that is used for retrieving the value.</param>
            <returns>The value that has been read and cast using the given name and type.</returns>
            <seealso cref="T:Duality.Serialization.IDataReader"/>
            <seealso cref="M:Duality.Serialization.Formatter.CustomSerialIOBase`1.ReadValue(System.String)"/>
            <seealso cref="M:Duality.Serialization.Formatter.CustomSerialIOBase`1.ReadValue``1(System.String,``0@)"/>
        </member>
        <member name="M:Duality.Serialization.Formatter.CustomSerialIOBase`1.ReadValue``1(System.String,``0@)">
            <summary>
            Reads the value that is associated with the specified name.
            </summary>
            <typeparam name="U">The expected value type.</typeparam>
            <param name="name">The name that is used for retrieving the value.</param>
            <param name="value">The value that has been read and cast using the given name and type.</param>
            <seealso cref="T:Duality.Serialization.IDataReader"/>
            <seealso cref="M:Duality.Serialization.Formatter.CustomSerialIOBase`1.ReadValue(System.String)"/>
            <seealso cref="M:Duality.Serialization.Formatter.CustomSerialIOBase`1.ReadValue``1(System.String)"/>
        </member>
        <member name="P:Duality.Serialization.Formatter.CustomSerialIOBase`1.Keys">
            <summary>
            [GET] Enumerates all available keys.
            </summary>
        </member>
        <member name="P:Duality.Serialization.Formatter.CustomSerialIOBase`1.Data">
            <summary>
            [GET] Enumerates all currently stored <see cref="T:System.Collections.Generic.KeyValuePair`2">KeyValuePairs</see>.
            </summary>
        </member>
        <member name="F:Duality.Serialization.XmlFormatterBase.writer">
            <summary>
            The <see cref="T:System.Xml.XmlWriter"/> that is used for serialization.
            </summary>
        </member>
        <member name="F:Duality.Serialization.XmlFormatterBase.reader">
            <summary>
            The <see cref="T:System.Xml.XmlReader"/> that is used for deserialization.
            </summary>
        </member>
        <member name="M:Duality.Serialization.XmlFormatterBase.ReadObject">
            <summary>
            Reads an object including all referenced objects using the <see cref="P:Duality.Serialization.XmlFormatterBase.ReadTarget"/>.
            </summary>
            <returns>The object that has been read.</returns>
        </member>
        <member name="M:Duality.Serialization.XmlFormatterBase.ReadObjectBody(Duality.Serialization.DataType)">
            <summary>
            Reads the body of an object.
            </summary>
            <param name="dataType">The <see cref="T:Duality.Serialization.DataType"/> that is assumed.</param>
            <returns>The object that has been read.</returns>
        </member>
        <member name="M:Duality.Serialization.XmlFormatterBase.ReadPrimitive(Duality.Serialization.DataType)">
            <summary>
            Reads a single primitive value, assuming the specified <see cref="T:Duality.Serialization.DataType"/>.
            </summary>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Serialization.XmlFormatterBase.WriteObject(System.Object)">
            <summary>
            Writes the specified object including all referenced objects using the <see cref="P:Duality.Serialization.XmlFormatterBase.WriteTarget"/>.
            </summary>
            <param name="obj">The object to write.</param>
        </member>
        <member name="M:Duality.Serialization.XmlFormatterBase.WriteObjectBody(Duality.Serialization.DataType,System.Object,Duality.Serialization.SerializeType,System.UInt32)">
            <summary>
            Writes the body of a given object.
            </summary>
            <param name="dataType">The <see cref="T:Duality.Serialization.DataType"/> as which the object will be written.</param>
            <param name="obj">The object to be written.</param>
            <param name="objSerializeType">The <see cref="T:Duality.Serialization.SerializeType"/> that describes the specified object.</param>
            <param name="objId">An object id that is assigned to the specified object.</param>
        </member>
        <member name="M:Duality.Serialization.XmlFormatterBase.WritePrimitive(System.Object)">
            <summary>
            Writes a single primitive value.
            </summary>
            <param name="obj">The primitive value to write.</param>
        </member>
        <member name="M:Duality.Serialization.XmlFormatterBase.IsXmlStream(System.IO.Stream)">
            <summary>
            Returns whether the specified stream is an XML stream. The check requires a stream that is both readable and seekable.
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="P:Duality.Serialization.XmlFormatterBase.WriteTarget">
            <summary>
            [GET / SET] The <see cref="T:System.Xml.XmlWriter"/> that is used for serialization.
            </summary>
        </member>
        <member name="P:Duality.Serialization.XmlFormatterBase.ReadTarget">
            <summary>
            [GET / SET] The <see cref="T:System.Xml.XmlReader"/> that is used for deserialization.
            </summary>
        </member>
        <member name="P:Duality.Serialization.XmlFormatterBase.CanWrite">
            <summary>
            [GET] Can this binary serializer write data?
            </summary>
        </member>
        <member name="P:Duality.Serialization.XmlFormatterBase.CanRead">
            <summary>
            [GET] Can this binary serializer read data?
            </summary>
        </member>
        <member name="T:Duality.Serialization.XmlFormatterBase.CustomSerialIO">
            <summary>
            Buffer object for <see cref="T:Duality.Serialization.ISerializable">custom de/serialization</see>, 
            providing read and write functionality.
            </summary>
        </member>
        <member name="M:Duality.Serialization.XmlFormatterBase.CustomSerialIO.Serialize(Duality.Serialization.XmlFormatterBase)">
            <summary>
            Writes the contained data to the specified serializer.
            </summary>
            <param name="formatter">The serializer to write data to.</param>
        </member>
        <member name="M:Duality.Serialization.XmlFormatterBase.CustomSerialIO.Deserialize(Duality.Serialization.XmlFormatterBase)">
            <summary>
            Reads data from the specified serializer
            </summary>
            <param name="formatter">The serializer to read data from.</param>
        </member>
        <member name="M:Duality.Serialization.XmlMetaFormatter.WriteMemberInfo(Duality.Serialization.MetaFormat.MemberInfoNode)">
            <summary>
            Writes the specified <see cref="T:Duality.Serialization.MetaFormat.MemberInfoNode"/>, including possible child nodes.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Duality.Serialization.XmlMetaFormatter.WriteArray(Duality.Serialization.MetaFormat.ArrayNode)">
            <summary>
            Writes the specified <see cref="T:Duality.Serialization.MetaFormat.ArrayNode"/>, including possible child nodes.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Duality.Serialization.XmlMetaFormatter.WriteStruct(Duality.Serialization.MetaFormat.StructNode)">
            <summary>
            Writes the specified <see cref="T:Duality.Serialization.MetaFormat.StructNode"/>, including possible child nodes.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Duality.Serialization.XmlMetaFormatter.WriteDelegate(Duality.Serialization.MetaFormat.DelegateNode)">
            <summary>
            Writes the specified <see cref="T:Duality.Serialization.MetaFormat.DelegateNode"/>, including possible child nodes.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Duality.Serialization.XmlMetaFormatter.WriteEnum(Duality.Serialization.MetaFormat.EnumNode)">
            <summary>
            Writes the specified <see cref="T:Duality.Serialization.MetaFormat.EnumNode"/>.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Duality.Serialization.XmlMetaFormatter.ReadMemberInfo(Duality.Serialization.DataType)">
            <summary>
            Reads a <see cref="T:Duality.Serialization.MetaFormat.MemberInfoNode"/>, including possible child nodes.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Duality.Serialization.XmlMetaFormatter.ReadArray">
            <summary>
            Reads an <see cref="T:Duality.Serialization.MetaFormat.ArrayNode"/>, including possible child nodes.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Duality.Serialization.XmlMetaFormatter.ReadStruct(System.Boolean)">
            <summary>
            Reads a <see cref="T:Duality.Serialization.MetaFormat.StructNode"/>, including possible child nodes.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Duality.Serialization.XmlMetaFormatter.ReadDelegate">
            <summary>
            Reads a <see cref="T:Duality.Serialization.MetaFormat.DelegateNode"/>, including possible child nodes.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Duality.Serialization.XmlMetaFormatter.ReadEnum">
            <summary>
            Reads an <see cref="T:Duality.Serialization.MetaFormat.EnumNode"/>.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Duality.Serialization.XmlMetaFormatter.ReadObjectRef">
            <summary>
            Reads an <see cref="T:Duality.Serialization.MetaFormat.ObjectRefNode"/>.
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:Duality.RtfDocWriterLogOutput">
            <summary>
            A <see cref="T:Duality.ILogOutput">Log output</see> that uses a RTF document as message destination.
            </summary>
        </member>
        <member name="T:Duality.ILogOutput">
            <summary>
            Represents a single <see cref="T:Duality.Log"/> output and provides actual writing functionality for 
            </summary>
        </member>
        <member name="M:Duality.ILogOutput.Write(Duality.Log,Duality.LogMessageType,System.String)">
            <summary>
            Writes a single message to the output.
            </summary>
            <param name="source">The <see cref="T:Duality.Log"/> from which the message originates.</param>
            <param name="type">The type of the log message.</param>
            <param name="msg">The message to write.</param>
        </member>
        <member name="M:Duality.RtfDocWriterLogOutput.Write(Duality.Log,Duality.LogMessageType,System.String)">
            <summary>
            Writes a single message to the output.
            </summary>
            <param name="source">The <see cref="T:Duality.Log"/> from which the message originates.</param>
            <param name="type">The type of the log message.</param>
            <param name="msg">The message to write.</param>
            <param name="indent">The messages indent value.</param>
        </member>
        <member name="T:Duality.ColorFormat.ColorRgba">
            <summary>
            Represents a 4-byte Rgba color value.
            </summary>
        </member>
        <member name="T:Duality.ColorFormat.IColorData">
            <summary>
            A general interface for different types of color data.
            </summary>
        </member>
        <member name="M:Duality.ColorFormat.IColorData.ToIntRgba">
            <summary>
            Converts the color to a <see cref="T:System.UInt32"/>-Rgba value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duality.ColorFormat.IColorData.SetIntRgba(System.Int32)">
            <summary>
            Sets the color base ond a <see cref="T:System.UInt32"/>-Rgba value.
            </summary>
            <param name="rgba"></param>
        </member>
        <member name="M:Duality.ColorFormat.IColorData.ToIntArgb">
            <summary>
            Converts the color to a <see cref="T:System.UInt32"/>-Argb value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duality.ColorFormat.IColorData.SetIntArgb(System.Int32)">
            <summary>
            Sets the color base ond a <see cref="T:System.UInt32"/>-Argb value.
            </summary>
            <param name="rgba"></param>
        </member>
        <member name="F:Duality.ColorFormat.ColorRgba.CompSize">
            <summary>
            Size of a single color component in bytes.
            </summary>
        </member>
        <member name="F:Duality.ColorFormat.ColorRgba.OffsetR">
            <summary>
            Byte offset of the red value.
            </summary>
        </member>
        <member name="F:Duality.ColorFormat.ColorRgba.OffsetG">
            <summary>
            Byte offset of the green value.
            </summary>
        </member>
        <member name="F:Duality.ColorFormat.ColorRgba.OffsetB">
            <summary>
            Byte offset of the blue value.
            </summary>
        </member>
        <member name="F:Duality.ColorFormat.ColorRgba.OffsetA">
            <summary>
            Byte offset of the alpha value.
            </summary>
        </member>
        <member name="F:Duality.ColorFormat.ColorRgba.Size">
            <summary>
            Total size of the struct in bytes.
            </summary>
        </member>
        <member name="F:Duality.ColorFormat.ColorRgba.White">
            <summary>
            White.
            </summary>
        </member>
        <member name="F:Duality.ColorFormat.ColorRgba.Black">
            <summary>
            Black.
            </summary>
        </member>
        <member name="F:Duality.ColorFormat.ColorRgba.Red">
            <summary>
            Fully saturated and max-brightness red. Also known as [255,0,0].
            </summary>
        </member>
        <member name="F:Duality.ColorFormat.ColorRgba.Green">
            <summary>
            Fully saturated and max-brightness green. Also known as [0,255,0].
            </summary>
        </member>
        <member name="F:Duality.ColorFormat.ColorRgba.Blue">
            <summary>
            Fully saturated and max-brightness blue. Also known as [0,0,255].
            </summary>
        </member>
        <member name="F:Duality.ColorFormat.ColorRgba.VeryLightGrey">
            <summary>
            A very light grey. Value: 224.
            </summary>
        </member>
        <member name="F:Duality.ColorFormat.ColorRgba.LightGrey">
            <summary>
            A light grey. Value: 192.
            </summary>
        </member>
        <member name="F:Duality.ColorFormat.ColorRgba.Grey">
            <summary>
            Medium grey. Value: 128.
            </summary>
        </member>
        <member name="F:Duality.ColorFormat.ColorRgba.DarkGrey">
            <summary>
            A dark grey. Value: 64.
            </summary>
        </member>
        <member name="F:Duality.ColorFormat.ColorRgba.VeryDarkGrey">
            <summary>
            A very dark grey. Value: 32.
            </summary>
        </member>
        <member name="F:Duality.ColorFormat.ColorRgba.TransparentWhite">
            <summary>
            Transparent white. Completely invisible, when drawn, but might make a difference as
            a background color.
            </summary>
        </member>
        <member name="F:Duality.ColorFormat.ColorRgba.TransparentBlack">
            <summary>
            Transparent black. Completely invisible, when drawn, but might make a difference as
            a background color.
            </summary>
        </member>
        <member name="F:Duality.ColorFormat.ColorRgba.R">
            <summary>
            Red color component.
            </summary>
        </member>
        <member name="F:Duality.ColorFormat.ColorRgba.G">
            <summary>
            Green color component.
            </summary>
        </member>
        <member name="F:Duality.ColorFormat.ColorRgba.B">
            <summary>
            Blue color component.
            </summary>
        </member>
        <member name="F:Duality.ColorFormat.ColorRgba.A">
            <summary>
            Alpha color component. Usually treated as opacity.
            </summary>
        </member>
        <member name="M:Duality.ColorFormat.ColorRgba.#ctor(Duality.ColorFormat.ColorRgba)">
            <summary>
            Creates a new color based on an existing one. This is basically a copy-constructor.
            </summary>
            <param name="clr"></param>
        </member>
        <member name="M:Duality.ColorFormat.ColorRgba.#ctor(System.Int32)">
            <summary>
            Creates a new color based on an int-Rgba value.
            </summary>
            <param name="rgba"></param>
        </member>
        <member name="M:Duality.ColorFormat.ColorRgba.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a new color.
            </summary>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
            <param name="a">The alpha component.</param>
        </member>
        <member name="M:Duality.ColorFormat.ColorRgba.#ctor(System.Byte,System.Byte)">
            <summary>
            Creates a new color based on value (brightness) and alpha.
            </summary>
            <param name="value">The value / brightness of the color.</param>
            <param name="a">The colors alpha value.</param>
        </member>
        <member name="M:Duality.ColorFormat.ColorRgba.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new color.
            </summary>
            <param name="r">The red component as float [0.0f - 1.0f].</param>
            <param name="g">The green component as float [0.0f - 1.0f].</param>
            <param name="b">The blue component as float [0.0f - 1.0f].</param>
            <param name="a">The alpha component as float [0.0f - 1.0f].</param>
        </member>
        <member name="M:Duality.ColorFormat.ColorRgba.#ctor(System.Single,System.Single)">
            <summary>
            Creates a new color based on value (brightness) and alpha.
            </summary>
            <param name="value">The value / brightness of the color as float [0.0f - 1.0f].</param>
            <param name="a">The colors alpha value as float [0.0f - 1.0f].</param>
        </member>
        <member name="M:Duality.ColorFormat.ColorRgba.WithRed(System.Byte)">
            <summary>
            Returns a new version of the color with an adjusted red component.
            </summary>
            <param name="r">The new red component.</param>
            <returns>A new color with the specified adjustments.</returns>
        </member>
        <member name="M:Duality.ColorFormat.ColorRgba.WithGreen(System.Byte)">
            <summary>
            Returns a new version of the color with an adjusted green component.
            </summary>
            <param name="g">The new green component.</param>
            <returns>A new color with the specified adjustments.</returns>
        </member>
        <member name="M:Duality.ColorFormat.ColorRgba.WithBlue(System.Byte)">
            <summary>
            Returns a new version of the color with an adjusted blue component.
            </summary>
            <param name="b">The new blue component.</param>
            <returns>A new color with the specified adjustments.</returns>
        </member>
        <member name="M:Duality.ColorFormat.ColorRgba.WithAlpha(System.Byte)">
            <summary>
            Returns a new version of the color with an adjusted alpha component.
            </summary>
            <param name="a">The new alpha component.</param>
            <returns>A new color with the specified adjustments.</returns>
        </member>
        <member name="M:Duality.ColorFormat.ColorRgba.WithRed(System.Single)">
            <summary>
            Returns a new version of the color with an adjusted red component.
            </summary>
            <param name="r">The new red component as float [0.0f - 1.0f].</param>
            <returns>A new color with the specified adjustments.</returns>
        </member>
        <member name="M:Duality.ColorFormat.ColorRgba.WithGreen(System.Single)">
            <summary>
            Returns a new version of the color with an adjusted green component.
            </summary>
            <param name="g">The new green component as float [0.0f - 1.0f].</param>
            <returns>A new color with the specified adjustments.</returns>
        </member>
        <member name="M:Duality.ColorFormat.ColorRgba.WithBlue(System.Single)">
            <summary>
            Returns a new version of the color with an adjusted blue component.
            </summary>
            <param name="b">The new blue component as float [0.0f - 1.0f].</param>
            <returns>A new color with the specified adjustments.</returns>
        </member>
        <member name="M:Duality.ColorFormat.ColorRgba.WithAlpha(System.Single)">
            <summary>
            Returns a new version of the color with an adjusted alpha component.
            </summary>
            <param name="a">The new alpha component as float [0.0f - 1.0f].</param>
            <returns>A new color with the specified adjustments.</returns>
        </member>
        <member name="M:Duality.ColorFormat.ColorRgba.GetLuminance">
            <summary>
            Calculates the colors luminance. It is an approximation on how bright the color actually looks to
            the human eye, weighting each color component differently.
            </summary>
            <returns>The colors luminance as float [0.0f - 1.0f].</returns>
        </member>
        <member name="M:Duality.ColorFormat.ColorRgba.ToIntRgba">
            <summary>
            Converts the color to int-Rgba.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duality.ColorFormat.ColorRgba.ToIntArgb">
            <summary>
            Converts the color to int-Argb.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duality.ColorFormat.ColorRgba.ToHsva">
            <summary>
            Converts the color to Hsva.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duality.ColorFormat.ColorRgba.SetIntArgb(System.Int32)">
            <summary>
            Adjusts the color to match the specified int-Argb color.
            </summary>
            <param name="argb"></param>
        </member>
        <member name="M:Duality.ColorFormat.ColorRgba.SetIntRgba(System.Int32)">
            <summary>
            Adjusts the color to match the specified int-Rgba color.
            </summary>
            <param name="rgba"></param>
        </member>
        <member name="M:Duality.ColorFormat.ColorRgba.SetHsva(Duality.ColorFormat.ColorHsva)">
            <summary>
            Adjusts the color to match the specified Hsva color.
            </summary>
            <param name="hsva"></param>
        </member>
        <member name="M:Duality.ColorFormat.ColorRgba.Equals(Duality.ColorFormat.ColorRgba)">
            <summary>
            Returns whether this color equals the specified one.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.ColorFormat.ColorRgba.FromIntRgba(System.Int32)">
            <summary>
            Creates a new color based on an int-Rgba value.
            </summary>
            <param name="rgba"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.ColorFormat.ColorRgba.FromIntArgb(System.Int32)">
            <summary>
            Creates a new color based on an int-Argb value.
            </summary>
            <param name="argb"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.ColorFormat.ColorRgba.FromHsva(Duality.ColorFormat.ColorHsva)">
            <summary>
            Creates a new color based on a Hsva value.
            </summary>
            <param name="hsva"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.ColorFormat.ColorRgba.Mix(Duality.ColorFormat.ColorRgba,Duality.ColorFormat.ColorRgba,System.Single)">
            <summary>
            Mixes two colors by performing a linear interpolation between both.
            </summary>
            <param name="first">The first color.</param>
            <param name="second">The second color.</param>
            <param name="factor">The linear interpolation value. Zero equals the first color, one equals the second color.</param>
            <returns>The interpolated / mixed color.</returns>
        </member>
        <member name="M:Duality.ColorFormat.ColorRgba.op_Equality(Duality.ColorFormat.ColorRgba,Duality.ColorFormat.ColorRgba)">
            <summary>
            Returns whether two colors are equal.
            </summary>
            <param name="left">The first color.</param>
            <param name="right">The second color.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.ColorFormat.ColorRgba.op_Inequality(Duality.ColorFormat.ColorRgba,Duality.ColorFormat.ColorRgba)">
            <summary>
            Returns whether two colors are unequal.
            </summary>
            <param name="left">The first color.</param>
            <param name="right">The second color.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.ColorFormat.ColorRgba.op_BitwiseAnd(Duality.ColorFormat.ColorRgba,Duality.ColorFormat.ColorRgba)">
            <summary>
            Performs a logical AND operation on the int-Rgba values of two colors.
            </summary>
            <param name="left">The first color.</param>
            <param name="right">The second color.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.ColorFormat.ColorRgba.op_BitwiseOr(Duality.ColorFormat.ColorRgba,Duality.ColorFormat.ColorRgba)">
            <summary>
            Performs a logical OR operation on the int-Rgba values of two colors.
            </summary>
            <param name="left">The first color.</param>
            <param name="right">The second color.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.ColorFormat.ColorRgba.op_Addition(Duality.ColorFormat.ColorRgba,Duality.ColorFormat.ColorRgba)">
            <summary>
            Adds two colors.
            </summary>
            <param name="left">The first color.</param>
            <param name="right">The second color.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.ColorFormat.ColorRgba.op_Subtraction(Duality.ColorFormat.ColorRgba,Duality.ColorFormat.ColorRgba)">
            <summary>
            Subtracts the second color from the first.
            </summary>
            <param name="left">The first color.</param>
            <param name="right">The second color.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.ColorFormat.ColorRgba.op_Multiply(Duality.ColorFormat.ColorRgba,Duality.ColorFormat.ColorRgba)">
            <summary>
            Multiplies two colors.
            </summary>
            <param name="left">The first color.</param>
            <param name="right">The second color.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.ColorFormat.ColorRgba.op_UnaryNegation(Duality.ColorFormat.ColorRgba)">
            <summary>
            Returns the inverse of a color.
            </summary>
            <param name="c">The color to invert.</param>
            <returns></returns>
        </member>
        <member name="T:Duality.ConsoleLogOutput">
            <summary>
            A <see cref="T:Duality.ILogOutput">Log output</see> that uses the <see cref="T:System.Console"/> as message destination.
            </summary>
        </member>
        <member name="T:Duality.TextWriterLogOutput">
            <summary>
            A <see cref="T:Duality.ILogOutput">Log output</see> that uses a <see cref="T:System.IO.TextWriter"/> as message destination.
            </summary>
        </member>
        <member name="M:Duality.TextWriterLogOutput.Write(Duality.Log,Duality.LogMessageType,System.String)">
            <summary>
            Writes a single message to the output.
            </summary>
            <param name="source">The <see cref="T:Duality.Log"/> from which the message originates.</param>
            <param name="type">The type of the log message.</param>
            <param name="msg">The message to write.</param>
        </member>
        <member name="M:Duality.ConsoleLogOutput.Write(Duality.Log,Duality.LogMessageType,System.String)">
            <summary>
            Writes a single message to the output.
            </summary>
            <param name="source">The <see cref="T:Duality.Log"/> from which the message originates.</param>
            <param name="type">The type of the log message.</param>
            <param name="msg">The message to write.</param>
        </member>
        <member name="T:Duality.ColorFormat.ColorHsva">
            <summary>
            Represents a 16-byte Hsva color value.
            </summary>
        </member>
        <member name="F:Duality.ColorFormat.ColorHsva.CompSize">
            <summary>
            Size of a single color component in bytes.
            </summary>
        </member>
        <member name="F:Duality.ColorFormat.ColorHsva.OffsetH">
            <summary>
            Byte offset of the hue value.
            </summary>
        </member>
        <member name="F:Duality.ColorFormat.ColorHsva.OffsetS">
            <summary>
            Byte offset of the saturation value.
            </summary>
        </member>
        <member name="F:Duality.ColorFormat.ColorHsva.OffsetV">
            <summary>
            Byte offset of the value / brightness value.
            </summary>
        </member>
        <member name="F:Duality.ColorFormat.ColorHsva.OffsetA">
            <summary>
            Byte offset of the alpha value.
            </summary>
        </member>
        <member name="F:Duality.ColorFormat.ColorHsva.Size">
            <summary>
            Total size of the struct in bytes.
            </summary>
        </member>
        <member name="F:Duality.ColorFormat.ColorHsva.White">
            <summary>
            White.
            </summary>
        </member>
        <member name="F:Duality.ColorFormat.ColorHsva.Black">
            <summary>
            Black.
            </summary>
        </member>
        <member name="F:Duality.ColorFormat.ColorHsva.Red">
            <summary>
            Fully saturated and max-brightness red.
            </summary>
        </member>
        <member name="F:Duality.ColorFormat.ColorHsva.Green">
            <summary>
            Fully saturated and max-brightness green.
            </summary>
        </member>
        <member name="F:Duality.ColorFormat.ColorHsva.Blue">
            <summary>
            Fully saturated and max-brightness blue.
            </summary>
        </member>
        <member name="F:Duality.ColorFormat.ColorHsva.VeryLightGrey">
            <summary>
            A very light grey.
            </summary>
        </member>
        <member name="F:Duality.ColorFormat.ColorHsva.LightGrey">
            <summary>
            A light grey.
            </summary>
        </member>
        <member name="F:Duality.ColorFormat.ColorHsva.Grey">
            <summary>
            Medium grey.
            </summary>
        </member>
        <member name="F:Duality.ColorFormat.ColorHsva.DarkGrey">
            <summary>
            A dark grey.
            </summary>
        </member>
        <member name="F:Duality.ColorFormat.ColorHsva.VeryDarkGrey">
            <summary>
            A very dark grey.
            </summary>
        </member>
        <member name="F:Duality.ColorFormat.ColorHsva.TransparentWhite">
            <summary>
            Transparent white. Completely invisible, when drawn, but might make a difference as
            a background color.
            </summary>
        </member>
        <member name="F:Duality.ColorFormat.ColorHsva.TransparentBlack">
            <summary>
            Transparent black. Completely invisible, when drawn, but might make a difference as
            a background color.
            </summary>
        </member>
        <member name="F:Duality.ColorFormat.ColorHsva.H">
            <summary>
            Hue component as float [0.0f - 1.0f].
            </summary>
        </member>
        <member name="F:Duality.ColorFormat.ColorHsva.S">
            <summary>
            Saturation component as float [0.0f - 1.0f].
            </summary>
        </member>
        <member name="F:Duality.ColorFormat.ColorHsva.V">
            <summary>
            Value component as float [0.0f - 1.0f].
            </summary>
        </member>
        <member name="F:Duality.ColorFormat.ColorHsva.A">
            <summary>
            Alpha component as float [0.0f - 1.0f].
            </summary>
        </member>
        <member name="M:Duality.ColorFormat.ColorHsva.#ctor(Duality.ColorFormat.ColorHsva)">
            <summary>
            Creates a new color based on an existing one. This is basically a copy-constructor.
            </summary>
            <param name="clr"></param>
        </member>
        <member name="M:Duality.ColorFormat.ColorHsva.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new color.
            </summary>
            <param name="h">Hue as float [0.0f - 1.0f].</param>
            <param name="s">Saturation as float [0.0f - 1.0f].</param>
            <param name="v">Value as float [0.0f - 1.0f].</param>
            <param name="a">Alpha as float [0.0f - 1.0f].</param>
        </member>
        <member name="M:Duality.ColorFormat.ColorHsva.GetLuminance">
            <summary>
            Calculates the colors luminance. It is an approximation on how bright the color actually looks to
            the human eye, weighting each (Rgba) color component differently.
            </summary>
            <returns>The colors luminance as float [0.0f - 1.0f].</returns>
        </member>
        <member name="M:Duality.ColorFormat.ColorHsva.WithHue(System.Single)">
            <summary>
            Returns a new version of the color with an adjusted hue component.
            </summary>
            <param name="r">The new hue component as float [0.0f - 1.0f].</param>
            <returns>A new color with the specified adjustments.</returns>
        </member>
        <member name="M:Duality.ColorFormat.ColorHsva.WithSaturation(System.Single)">
            <summary>
            Returns a new version of the color with an adjusted saturation component.
            </summary>
            <param name="r">The new saturation component as float [0.0f - 1.0f].</param>
            <returns>A new color with the specified adjustments.</returns>
        </member>
        <member name="M:Duality.ColorFormat.ColorHsva.WithValue(System.Single)">
            <summary>
            Returns a new version of the color with an adjusted value component.
            </summary>
            <param name="r">The new value component as float [0.0f - 1.0f].</param>
            <returns>A new color with the specified adjustments.</returns>
        </member>
        <member name="M:Duality.ColorFormat.ColorHsva.WithAlpha(System.Single)">
            <summary>
            Returns a new version of the color with an adjusted alpha component.
            </summary>
            <param name="r">The new alpha component as float [0.0f - 1.0f].</param>
            <returns>A new color with the specified adjustments.</returns>
        </member>
        <member name="M:Duality.ColorFormat.ColorHsva.ToIntRgba">
            <summary>
            Converts the color to int-Rgba.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duality.ColorFormat.ColorHsva.ToIntArgb">
            <summary>
            Converts the color to int-Argb.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duality.ColorFormat.ColorHsva.ToRgba">
            <summary>
            Converts the color to Rgba.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duality.ColorFormat.ColorHsva.SetIntRgba(System.Int32)">
            <summary>
            Adjusts the color to match the specified int-Rgba color.
            </summary>
            <param name="rgba"></param>
        </member>
        <member name="M:Duality.ColorFormat.ColorHsva.SetIntArgb(System.Int32)">
            <summary>
            Adjusts the color to match the specified int-Argb color.
            </summary>
            <param name="argb"></param>
        </member>
        <member name="M:Duality.ColorFormat.ColorHsva.SetRgba(Duality.ColorFormat.ColorRgba)">
            <summary>
            Adjusts the color to match the specified Rgba color.
            </summary>
            <param name="rgba"></param>
        </member>
        <member name="M:Duality.ColorFormat.ColorHsva.Equals(Duality.ColorFormat.ColorHsva)">
            <summary>
            Returns whether this color equals the specified one.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.ColorFormat.ColorHsva.FromIntRgba(System.Int32)">
            <summary>
            Creates a new color based on an int-Rgba value.
            </summary>
            <param name="rgba"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.ColorFormat.ColorHsva.FromIntArgb(System.Int32)">
            <summary>
            Creates a new color based on an int-Argb value.
            </summary>
            <param name="argb"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.ColorFormat.ColorHsva.FromRgba(Duality.ColorFormat.ColorRgba)">
            <summary>
            Creates a new color based on a Rgba value.
            </summary>
            <param name="hsva"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.ColorFormat.ColorHsva.op_Equality(Duality.ColorFormat.ColorHsva,Duality.ColorFormat.ColorHsva)">
            <summary>
            Returns whether two colors are equal.
            </summary>
            <param name="left">The first color.</param>
            <param name="right">The second color.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.ColorFormat.ColorHsva.op_Inequality(Duality.ColorFormat.ColorHsva,Duality.ColorFormat.ColorHsva)">
            <summary>
            Returns whether two colors are unequal.
            </summary>
            <param name="left">The first color.</param>
            <param name="right">The second color.</param>
            <returns></returns>
        </member>
        <member name="T:Duality.Serialization.BinaryFormatterBase">
            <summary>
            Base class for Dualitys binary serializers.
            </summary>
        </member>
        <member name="F:Duality.Serialization.BinaryFormatterBase.HeaderId">
            <summary>
            Binary serialization header id. 
            </summary>
        </member>
        <member name="F:Duality.Serialization.BinaryFormatterBase.Version">
            <summary>
            Binary serialization version number.
            </summary>
        </member>
        <member name="F:Duality.Serialization.BinaryFormatterBase.writer">
            <summary>
            The <see cref="T:System.IO.BinaryWriter"/> that is used for serialization.
            </summary>
        </member>
        <member name="F:Duality.Serialization.BinaryFormatterBase.reader">
            <summary>
            The <see cref="T:System.IO.BinaryReader"/> that is used for deserialization.
            </summary>
        </member>
        <member name="F:Duality.Serialization.BinaryFormatterBase.dataVersion">
            <summary>
            The binary format version in which the currently incoming data is available.
            </summary>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.ReadObject">
            <summary>
            Reads an object including all referenced objects using the <see cref="P:Duality.Serialization.BinaryFormatterBase.ReadTarget"/>.
            </summary>
            <returns>The object that has been read.</returns>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.ReadObjectBody(Duality.Serialization.DataType)">
            <summary>
            Reads the body of an object.
            </summary>
            <param name="dataType">The <see cref="T:Duality.Serialization.DataType"/> that is assumed.</param>
            <returns>The object that has been read.</returns>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.IsTypeDataLayoutCached(System.String)">
            <summary>
            Returns whether the <see cref="T:Duality.Serialization.TypeDataLayout"/> for the specified <see cref="T:System.Type"/> is
            already present in the binary serializers internal cache.
            </summary>
            <param name="t">A string referring to the <see cref="T:System.Type"/> that is described by the 
            <see cref="T:Duality.Serialization.TypeDataLayout"/> in question.</param>
            <returns>True, if the <see cref="T:Duality.Serialization.TypeDataLayout"/> is already cached, false if not.</returns>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.ReadTypeDataLayout(System.Type)">
            <summary>
            Reads the <see cref="T:Duality.Serialization.TypeDataLayout"/> describing the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="t">The <see cref="T:System.Type"/> of which to read the <see cref="T:Duality.Serialization.TypeDataLayout"/>.</param>
            <returns>A <see cref="T:Duality.Serialization.TypeDataLayout"/> describing the specified <see cref="T:System.Type"/></returns>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.ReadTypeDataLayout(System.String)">
            <summary>
            Reads the <see cref="T:Duality.Serialization.TypeDataLayout"/> describing the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="t">A string referring to the <see cref="T:System.Type"/> of which to read the <see cref="T:Duality.Serialization.TypeDataLayout"/>.</param>
            <returns>A <see cref="T:Duality.Serialization.TypeDataLayout"/> describing the specified <see cref="T:System.Type"/></returns>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.ReadFormatterHeader">
            <summary>
            Reads the binary serialization header.
            </summary>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.ReadPrimitive(Duality.Serialization.DataType)">
            <summary>
            Reads a single primitive value, assuming the specified <see cref="T:Duality.Serialization.DataType"/>.
            </summary>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.ReadString">
            <summary>
            Reads a single string value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.ReadArrayData(System.Boolean[])">
            <summary>
            Reads a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.ReadArrayData(System.Byte[])">
            <summary>
            Reads a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.ReadArrayData(System.SByte[])">
            <summary>
            Reads a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.ReadArrayData(System.Int16[])">
            <summary>
            Reads a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.ReadArrayData(System.UInt16[])">
            <summary>
            Reads a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.ReadArrayData(System.Int32[])">
            <summary>
            Reads a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.ReadArrayData(System.UInt32[])">
            <summary>
            Reads a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.ReadArrayData(System.Int64[])">
            <summary>
            Reads a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.ReadArrayData(System.UInt64[])">
            <summary>
            Reads a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.ReadArrayData(System.Single[])">
            <summary>
            Reads a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.ReadArrayData(System.Double[])">
            <summary>
            Reads a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.ReadArrayData(System.Decimal[])">
            <summary>
            Reads a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.ReadArrayData(System.Char[])">
            <summary>
            Reads a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.ReadArrayData(System.String[])">
            <summary>
            Reads a string array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.WriteObject(System.Object)">
            <summary>
            Writes the specified object including all referenced objects using the <see cref="P:Duality.Serialization.BinaryFormatterBase.WriteTarget"/>.
            </summary>
            <param name="obj">The object to write.</param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.WriteObjectBody(Duality.Serialization.DataType,System.Object,Duality.Serialization.SerializeType,System.UInt32)">
            <summary>
            Writes the body of a given object.
            </summary>
            <param name="dataType">The <see cref="T:Duality.Serialization.DataType"/> as which the object will be written.</param>
            <param name="obj">The object to be written.</param>
            <param name="objSerializeType">The <see cref="T:Duality.Serialization.SerializeType"/> that describes the specified object.</param>
            <param name="objId">An object id that is assigned to the specified object.</param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.WriteFormatterHeader">
            <summary>
            Writes the binary serialization header.
            </summary>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.WriteTypeDataLayout(Duality.Serialization.SerializeType)">
            <summary>
            Writes the <see cref="T:Duality.Serialization.TypeDataLayout"/> describing the specified <see cref="T:Duality.Serialization.SerializeType"/>.
            Note that this method does not write redundant layout data - if the specified TypeDataLayout has already been written withing the same
            operation, a back-reference is written instead.
            </summary>
            <param name="objSerializeType">
            The <see cref="T:Duality.Serialization.SerializeType"/> of which to write the <see cref="T:Duality.Serialization.TypeDataLayout"/>
            </param>
            <seealso cref="M:Duality.Serialization.BinaryFormatterBase.WriteTypeDataLayout(System.String)"/>
            <seealso cref="M:Duality.Serialization.BinaryFormatterBase.WriteTypeDataLayout(Duality.Serialization.TypeDataLayout,System.String)"/>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.WriteTypeDataLayout(System.String)">
            <summary>
            Writes the <see cref="T:Duality.Serialization.TypeDataLayout"/> describing the specified <see cref="T:Duality.Serialization.SerializeType"/>.
            Note that this method does not write redundant layout data - if the specified TypeDataLayout has already been written withing the same
            operation, a back-reference is written instead.
            </summary>
            <param name="typeString">
            A string referring to the <see cref="T:System.Type"/> of which to write the <see cref="T:Duality.Serialization.TypeDataLayout"/>.
            </param>
            <seealso cref="M:Duality.Serialization.BinaryFormatterBase.WriteTypeDataLayout(Duality.Serialization.SerializeType)"/>
            <seealso cref="M:Duality.Serialization.BinaryFormatterBase.WriteTypeDataLayout(Duality.Serialization.TypeDataLayout,System.String)"/>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.WriteTypeDataLayout(Duality.Serialization.TypeDataLayout,System.String)">
            <summary>
            Writes the specified <see cref="T:Duality.Serialization.TypeDataLayout"/> describing the <see cref="T:System.Type"/> referred to by
            the given <see cref="M:Duality.ReflectionHelper.GetTypeId(System.Type)">type string</see>. Doesn't care about redundant data, writes always.
            </summary>
            <param name="layout">The <see cref="T:Duality.Serialization.TypeDataLayout"/> to write.</param>
            <param name="typeString">
            The <see cref="M:Duality.ReflectionHelper.GetTypeId(System.Type)">type string</see> that refers to the <see cref="T:System.Type"/> that
            is described by the specified <see cref="T:Duality.Serialization.TypeDataLayout"/>.
            </param>
            <seealso cref="M:Duality.Serialization.BinaryFormatterBase.WriteTypeDataLayout(System.String)"/>
            <seealso cref="M:Duality.Serialization.BinaryFormatterBase.WriteTypeDataLayout(Duality.Serialization.SerializeType)"/>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.WritePrimitive(System.Object)">
            <summary>
            Writes a single primitive value.
            </summary>
            <param name="obj">The primitive value to write.</param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.WriteString(System.String)">
            <summary>
            Writes a single string value.
            </summary>
            <param name="obj">The string value to write.</param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.WriteArrayData(System.Boolean[])">
            <summary>
            Writes a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.WriteArrayData(System.Byte[])">
            <summary>
            Writes a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.WriteArrayData(System.SByte[])">
            <summary>
            Writes a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.WriteArrayData(System.Int16[])">
            <summary>
            Writes a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.WriteArrayData(System.UInt16[])">
            <summary>
            Writes a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.WriteArrayData(System.Int32[])">
            <summary>
            Writes a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.WriteArrayData(System.UInt32[])">
            <summary>
            Writes a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.WriteArrayData(System.Int64[])">
            <summary>
            Writes a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.WriteArrayData(System.UInt64[])">
            <summary>
            Writes a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.WriteArrayData(System.Single[])">
            <summary>
            Writes a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.WriteArrayData(System.Double[])">
            <summary>
            Writes a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.WriteArrayData(System.Decimal[])">
            <summary>
            Writes a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.WriteArrayData(System.Char[])">
            <summary>
            Writes a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.WriteArrayData(System.String[])">
            <summary>
            Writes a string array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.WriteDataType(Duality.Serialization.DataType)">
            <summary>
            Writes a <see cref="T:Duality.Serialization.DataType"/>.
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.ReadDataType">
            <summary>
            Reads a <see cref="T:Duality.Serialization.DataType"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.WritePushOffset">
            <summary>
            Writes the begin of a new "safe zone", usually encapsulating a data set.
            If any error occurs within a safe zone, it is guaranteed to not affect any other
            safe zone, although the damaged safe zone itsself might be unusable. In general,
            a safe zone prevents an error from affecting any of the zones surroundings.
            Safe zones may also be nested.
            </summary>
            <seealso cref="M:Duality.Serialization.BinaryFormatterBase.WritePopOffset"/>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.WritePopOffset">
            <summary>
            Writes the end of the most recent "safe zone", usually encapsulating a data set.
            If any error occurs within a safe zone, it is guaranteed to not affect any other
            safe zone, although the damaged safe zone itsself might be unusable. In general,
            a safe zone prevents an error from affecting any of the zones surroundings.
            Safe zones may also be nested.
            </summary>
            <seealso cref="M:Duality.Serialization.BinaryFormatterBase.WritePushOffset"/>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.ClearStreamSpecificData">
            <summary>
            Clears all <see cref="T:System.IO.Stream"/>- or Operation-specific cache data.
            </summary>
        </member>
        <member name="P:Duality.Serialization.BinaryFormatterBase.WriteTarget">
            <summary>
            [GET / SET] The <see cref="T:System.IO.BinaryWriter"/> that is used for serialization.
            </summary>
        </member>
        <member name="P:Duality.Serialization.BinaryFormatterBase.ReadTarget">
            <summary>
            [GET / SET] The <see cref="T:System.IO.BinaryReader"/> that is used for deserialization.
            </summary>
        </member>
        <member name="P:Duality.Serialization.BinaryFormatterBase.CanWrite">
            <summary>
            [GET] Can this binary serializer write data?
            </summary>
        </member>
        <member name="P:Duality.Serialization.BinaryFormatterBase.CanRead">
            <summary>
            [GET] Can this binary serializer read data?
            </summary>
        </member>
        <member name="T:Duality.Serialization.BinaryFormatterBase.CustomSerialIO">
            <summary>
            Buffer object for <see cref="T:Duality.Serialization.ISerializable">custom de/serialization</see>, 
            providing read and write functionality.
            </summary>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.CustomSerialIO.Serialize(Duality.Serialization.BinaryFormatterBase)">
            <summary>
            Writes the contained data to the specified serializer.
            </summary>
            <param name="formatter">The serializer to write data to.</param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.CustomSerialIO.Deserialize(Duality.Serialization.BinaryFormatterBase)">
            <summary>
            Reads data from the specified serializer
            </summary>
            <param name="formatter">The serializer to read data from.</param>
        </member>
        <member name="T:Duality.Serialization.BinaryFormatterBase.Operation">
            <summary>
            Operations, the serializer is able to perform.
            </summary>
        </member>
        <member name="F:Duality.Serialization.BinaryFormatterBase.Operation.None">
            <summary>
            No operation.
            </summary>
        </member>
        <member name="F:Duality.Serialization.BinaryFormatterBase.Operation.Read">
            <summary>
            Read a dataset / object
            </summary>
        </member>
        <member name="F:Duality.Serialization.BinaryFormatterBase.Operation.Write">
            <summary>
            Write a dataset / object
            </summary>
        </member>
        <member name="T:Duality.SoundDevice">
            <summary>
            Provides functionality to play and manage sound in Duality.
            </summary>
        </member>
        <member name="M:Duality.SoundDevice.GetNumPlaying(Duality.ContentRef{Duality.Resources.Sound})">
            <summary>
            Determines the number of playing instances of a specific <see cref="T:Duality.Resources.Sound"/>.
            </summary>
            <param name="snd">The Sound of which to determine the number of playing instances.</param>
            <returns>The number of the specified Sounds playing instances.</returns>
        </member>
        <member name="M:Duality.SoundDevice.RequestAlSource">
            <summary>
            Requests an OpenAL source handle.
            </summary>
            <returns>An OpenAL source handle. <see cref="F:Duality.SoundInstance.AlSource_NotAvailable"/> if no source is currently available.</returns>
        </member>
        <member name="M:Duality.SoundDevice.RegisterPlaying(Duality.ContentRef{Duality.Resources.Sound},System.Boolean)">
            <summary>
            Registers a <see cref="T:Duality.Resources.Sound">Sounds</see> playing instance.
            </summary>
            <param name="snd">The Sound that is playing.</param>
            <param name="is3D">Whether the instance is 3d or not.</param>
        </member>
        <member name="M:Duality.SoundDevice.FreeAlSource(System.Int32)">
            <summary>
            Frees a previously requested OpenAL source.
            </summary>
            <param name="alSource">The OpenAL handle of the source to free.</param>
        </member>
        <member name="M:Duality.SoundDevice.UnregisterPlaying(Duality.ContentRef{Duality.Resources.Sound},System.Boolean)">
            <summary>
            Unregisters a <see cref="T:Duality.Resources.Sound">Sounds</see> playing instance.
            </summary>
            <param name="snd">The Sound that was playing.</param>
            <param name="is3D">Whether the instance is 3d or not.</param>
        </member>
        <member name="M:Duality.SoundDevice.Update">
            <summary>
            Updates the SoundDevice.
            </summary>
        </member>
        <member name="M:Duality.SoundDevice.PlaySound(Duality.ContentRef{Duality.Resources.Sound})">
            <summary>
            Plays a sound.
            </summary>
            <param name="snd">The Sound to play.</param>
            <returns>A new SoundInstance representing the currentply playing sound.</returns>
        </member>
        <member name="M:Duality.SoundDevice.PlaySound3D(Duality.ContentRef{Duality.Resources.Sound},OpenTK.Vector3)">
            <summary>
            Plays a sound 3d "in space".
            </summary>
            <param name="snd">The Sound to play.</param>
            <param name="pos">The position of the sound in space.</param>
            <returns>A new SoundInstance representing the currentply playing sound.</returns>
        </member>
        <member name="M:Duality.SoundDevice.PlaySound3D(Duality.ContentRef{Duality.Resources.Sound},Duality.GameObject)">
            <summary>
            Plays a sound 3d "in space".
            </summary>
            <param name="snd">The Sound to play.</param>
            <param name="attachTo">The GameObject to which the sound will be attached.</param>
            <returns>A new SoundInstance representing the currentply playing sound.</returns>
        </member>
        <member name="M:Duality.SoundDevice.PlaySound3D(Duality.ContentRef{Duality.Resources.Sound},Duality.GameObject,OpenTK.Vector3)">
            <summary>
            Plays a sound 3d "in space".
            </summary>
            <param name="snd">The Sound to play.</param>
            <param name="attachTo">The GameObject to which the sound will be attached.</param>
            <param name="relativePos">The position of the sound relative to the GameObject.</param>
            <returns>A new SoundInstance representing the currentply playing sound.</returns>
        </member>
        <member name="P:Duality.SoundDevice.Context">
            <summary>
            [GET] The underlying OpenTK AudioContext.
            </summary>
        </member>
        <member name="P:Duality.SoundDevice.Ambient">
            <summary>
            [GET] A queue of currently playing ambient pads.
            </summary>
        </member>
        <member name="P:Duality.SoundDevice.Music">
            <summary>
            [GET] A queue of currently playing music pads.
            </summary>
        </member>
        <member name="P:Duality.SoundDevice.Listener">
            <summary>
            [GET / SET] The current listener object. This is automatically set to an available
            <see cref="T:Duality.Components.SoundListener"/>.
            </summary>
        </member>
        <member name="P:Duality.SoundDevice.ListenerPos">
            <summary>
            [GET] The current listeners position.
            </summary>
        </member>
        <member name="P:Duality.SoundDevice.ListenerVel">
            <summary>
            [GET] The current listeners velocity.
            </summary>
        </member>
        <member name="P:Duality.SoundDevice.ListenerAngle">
            <summary>
            [GET] The current listeners rotation / angle in radians.
            </summary>
        </member>
        <member name="P:Duality.SoundDevice.Mute">
            <summary>
            [GET / SET] Whether all Duality audio is currently muted completely.
            </summary>
        </member>
        <member name="P:Duality.SoundDevice.DefaultMinDist">
            <summary>
            [GET] Returns a <see cref="T:Duality.Resources.Sound">Sounds</see> default minimum distance.
            </summary>
        </member>
        <member name="P:Duality.SoundDevice.DefaultMaxDist">
            <summary>
            [GET] Returns a <see cref="T:Duality.Resources.Sound">Sounds</see> default maximum distance.
            </summary>
        </member>
        <member name="P:Duality.SoundDevice.MaxOpenALSources">
            <summary>
            [GET] Returns the maximum number of available OpenAL sound sources.
            </summary>
        </member>
        <member name="P:Duality.SoundDevice.NumPlaying2D">
            <summary>
            [GET] Returns the number of currently playing 2d sounds.
            </summary>
        </member>
        <member name="P:Duality.SoundDevice.NumPlaying3D">
            <summary>
            [GET] Returns the number of currently playing 3d sounds.
            </summary>
        </member>
        <member name="P:Duality.SoundDevice.NumAvailable">
            <summary>
            [GET] Returns the number of currently available OpenAL sound sources.
            </summary>
        </member>
        <member name="P:Duality.SoundDevice.Playing">
            <summary>
            [GET] Enumerates all currently playing SoundInstances.
            </summary>
        </member>
        <member name="T:Duality.Resources.Sound">
            <summary>
            A Sound is parameterized <see cref="T:Duality.Resources.AudioData"/>. Note that a Sound
            Resource does not contain any kind of audio data by itsself.
            </summary>
            <example>
            While there may be one AudioData Resource sounding like an Explosion effect, there could 
            be many Sounds referring to it, like a very loud or very quiet Explosion or one that is 
            noticable on higher distance than others.
            </example>
            <seealso cref="T:Duality.Resources.AudioData"/>
        </member>
        <member name="T:Duality.Resource">
            <summary>
            The abstract Resource class is inherited by any kind of Duality content. Instances of it or one of its subclasses
            are usually handled wrapped inside a <see cref="T:Duality.ContentRef`1"/> and requested from the <see cref="T:Duality.ContentProvider"/>.
            </summary>
            <seealso cref="T:Duality.ContentRef`1"/>
            <seealso cref="T:Duality.ContentProvider"/>
        </member>
        <member name="F:Duality.Resource.FileExt">
            <summary>
            A Resource files extension.
            </summary>
        </member>
        <member name="F:Duality.Resource.sourcePath">
            <summary>
            The path of the file from which the Resource has been originally imported or initialized.
            </summary>
        </member>
        <member name="F:Duality.Resource.path">
            <summary>
            The path of this Resource.
            </summary>
        </member>
        <member name="M:Duality.Resource.Save(System.String)">
            <summary>
            Saves the Resource to the specified path. If it has been generated at runtime, i.e. has
            not been loaded from file before, this will set the Resources <see cref="P:Duality.Resource.Path"/> Property.
            </summary>
            <param name="saveAsPath">The path to which this Resource is saved to. If null, the Resources <see cref="P:Duality.Resource.Path"/> is used as destination.</param>
        </member>
        <member name="M:Duality.Resource.Save(System.IO.Stream)">
            <summary>
            Saves the Resource to the specified stream.
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Duality.Resource.Clone">
            <summary>
            Creates a deep copy of this Resource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duality.Resource.CopyTo(Duality.Resource)">
            <summary>
            Deep-copies this Resource to the specified target Resource. The target Resource's Type must
            match this Resource's Type.
            </summary>
            <param name="r">The target Resource to copy this Resource's data to</param>
        </member>
        <member name="M:Duality.Resource.OnCopyTo(Duality.Resource,Duality.Cloning.CloneProvider)">
            <summary>
            This method Performs the <see cref="M:Duality.Resource.CopyTo(Duality.Resource)"/> operation for custom Resource Types.
            It uses reflection to copy each field that is declared inside a Duality plugin automatically.
            However, you may override this method to specify your own behaviour or simply speed things
            up a bit by not using Reflection.
            </summary>
            <param name="target">The target Resource where this Resources data is copied to.</param>
        </member>
        <member name="M:Duality.Resource.OnSaving">
            <summary>
            Called when this Resource is now beginning to be saved.
            </summary>
        </member>
        <member name="M:Duality.Resource.OnSaved">
            <summary>
            Called when this Resource has just been saved.
            </summary>
        </member>
        <member name="M:Duality.Resource.OnLoaded">
            <summary>
            Called when this Resource has just been loaded.
            </summary>
        </member>
        <member name="M:Duality.Resource.Dispose">
            <summary>
            Disposes the Resource.
            </summary>
        </member>
        <member name="M:Duality.Resource.DisposeLater">
            <summary>
            Schedules this Resource for disposal. It is guaranteed to be executed until the next update cycle starts.
            </summary>
            <seealso cref="M:Duality.Resource.Dispose"/>
        </member>
        <member name="M:Duality.Resource.OnDisposing(System.Boolean)">
            <summary>
            Called when beginning to dispose the Resource.
            </summary>
            <param name="manually"></param>
        </member>
        <member name="M:Duality.Resource.GetContentRef">
            <summary>
            Creates a <see cref="T:Duality.ContentRef`1"/> referring to this Resource.
            </summary>
            <returns>A <see cref="T:Duality.ContentRef`1"/> referring to this Resource.</returns>
        </member>
        <member name="M:Duality.Resource.LoadResource``1(System.String,System.Action{``0})">
            <summary>
            Loads the Resource that is located at the specified path. You usually don't need this method. 
            Consider requesting the Resource from the <see cref="T:Duality.ContentProvider"/> instead.
            </summary>
            <typeparam name="T">
            Desired Type of the returned reference. Does not affect the loaded Resource in any way - it is simply returned as T.
            Results in returning null if the loaded Resource's Type isn't assignable to T.
            </typeparam>
            <param name="path">The path to load the Resource from.</param>
            <param name="loadCallback">An optional callback that is invoked right after loading the Resource, but before initializing it.</param>
            <returns>The Resource that has been loaded.</returns>
        </member>
        <member name="M:Duality.Resource.LoadResource``1(System.IO.Stream,System.String,System.Action{``0})">
            <summary>
            Loads the Resource from the specified <see cref="T:System.IO.Stream"/>. You usually don't need this method. 
            Consider requesting the Resource from the <see cref="T:Duality.ContentProvider"/> instead.
            </summary>
            <typeparam name="T">
            Desired Type of the returned reference. Does not affect the loaded Resource in any way - it is simply returned as T.
            Results in returning null if the loaded Resource's Type isn't assignable to T.
            </typeparam>
            <param name="str">The stream to load the Resource from.</param>
            <param name="resPath">The path that is assumed as the loaded Resource's origin.</param>
            <param name="loadCallback">An optional callback that is invoked right after loading the Resource, but before initializing it.</param>
            <returns>The Resource that has been loaded.</returns>
        </member>
        <member name="M:Duality.Resource.IsResourceFile(System.String)">
            <summary>
            Determines whether or not the specified path points to a Duality Resource file.
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Resource.GetResourceFiles(System.String)">
            <summary>
            Returns all Resource files that are located in the specified directory. This doesn't affect
            any actual content- or load states.
            </summary>
            <param name="folderPath"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Resource.GetFileExtByType(System.Type)">
            <summary>
            Returns the Resource file extension for a specific Resource Type.
            </summary>
            <param name="resType">The Resource Type to return the file extension from.</param>
            <returns>The specified Resource Type's file extension.</returns>
        </member>
        <member name="M:Duality.Resource.GetTypeByFileName(System.String)">
            <summary>
            Returns the Resource Type that is associated with the specified file, based on its extension.
            </summary>
            <param name="filePath">Path to the file of whichs Resource Type will be returned</param>
            <returns>The Resource Type of the specified file</returns>
        </member>
        <member name="M:Duality.Resource.NonSerializedResourceBlocker(System.Reflection.FieldInfo)">
            <summary>
            A <see cref="P:Duality.Serialization.Formatter.FieldBlockers">FieldBlocker</see> to prevent
            fields flagged with a <see cref="T:Duality.NonSerializedResourceAttribute"/> from being serialized.
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="P:Duality.Resource.Disposed">
            <summary>
            [GET] Returns whether the Resource has been disposed. 
            Disposed Resources are not to be used and are treated the same as a null value by most methods.
            </summary>
        </member>
        <member name="P:Duality.Resource.Path">
            <summary>
            [GET] The path where this Resource has been originally loaded from or was first saved to.
            It is also the path under which this Resource is registered at the ContentProvider.
            </summary>
        </member>
        <member name="P:Duality.Resource.SourcePath">
            <summary>
            [GET / SET] The path of the file from which the Resource has been originally imported or initialized.
            Setting this does not affect the Resource in any way.
            </summary>
        </member>
        <member name="P:Duality.Resource.Name">
            <summary>
            [GET] The name of the Resource.
            </summary>
        </member>
        <member name="P:Duality.Resource.FullName">
            <summary>
            [GET] The full name of the Resource, including its path but not its file extension
            </summary>
        </member>
        <member name="P:Duality.Resource.IsDefaultContent">
            <summary>
            [GET] Returns whether the Resource is part of Duality's embedded default content.
            </summary>
        </member>
        <member name="P:Duality.Resource.IsRuntimeResource">
            <summary>
            [GET] Returns whether the Resource has been generated at runtime and  cannot be retrieved via content path.
            </summary>
        </member>
        <member name="F:Duality.Resources.Sound.FileExt">
            <summary>
            A Sound resources file extension.
            </summary>
        </member>
        <member name="F:Duality.Resources.Sound.VirtualContentPath">
            <summary>
            (Virtual) base path for Duality's embedded default Sounds.
            </summary>
        </member>
        <member name="F:Duality.Resources.Sound.ContentPath_Beep">
            <summary>
            (Virtual) path of the <see cref="P:Duality.Resources.Sound.Beep"/> Sound.
            </summary>
        </member>
        <member name="F:Duality.Resources.Sound.ContentPath_DroneLoop">
            <summary>
            (Virtual) path of the <see cref="P:Duality.Resources.Sound.DroneLoop"/> Sound.
            </summary>
        </member>
        <member name="F:Duality.Resources.Sound.ContentPath_LogoJingle">
            <summary>
            (Virtual) path of the <see cref="P:Duality.Resources.Sound.LogoJingle"/> Sound.
            </summary>
        </member>
        <member name="M:Duality.Resources.Sound.CreateFromAudioData(Duality.ContentRef{Duality.Resources.AudioData})">
            <summary>
            Creates a new Sound Resource based on the specified AudioData, saves it and returns a reference to it.
            </summary>
            <param name="baseRes"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Resources.Sound.#ctor">
            <summary>
            Creates a new, empty sound. Since it does not refer to any <see cref="T:Duality.Resources.AudioData"/> yet,
            it can't be played.
            </summary>
        </member>
        <member name="M:Duality.Resources.Sound.#ctor(Duality.ContentRef{Duality.Resources.AudioData})">
            <summary>
            Creates a new Sound referring to an existing <see cref="T:Duality.Resources.AudioData"/>.
            </summary>
            <param name="baseData"></param>
        </member>
        <member name="M:Duality.Resources.Sound.LoadData(Duality.ContentRef{Duality.Resources.AudioData})">
            <summary>
            Assigns new <see cref="T:Duality.Resources.AudioData"/> to this Sound.
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:Duality.Resources.Sound.Beep">
            <summary>
            [GET] A simple beep Sound.
            </summary>
        </member>
        <member name="P:Duality.Resources.Sound.DroneLoop">
            <summary>
            [GET] A drone loop Sound. Since this is a stereo Sound, it will always be played 2D.
            </summary>
        </member>
        <member name="P:Duality.Resources.Sound.LogoJingle">
            <summary>
            [GET] A logo jingle Sound. Since this is a stereo Sound, it will always be played 2D.
            </summary>
        </member>
        <member name="P:Duality.Resources.Sound.Data">
            <summary>
            [GET / SET] The <see cref="T:Duality.Resources.AudioData"/> that is parameterized by this Sound.
            </summary>
        </member>
        <member name="P:Duality.Resources.Sound.Type">
            <summary>
            [GET / SET] The category to which this Sound belongs.
            </summary>
        </member>
        <member name="P:Duality.Resources.Sound.MaxInstances">
            <summary>
            [GET / SET] Maximum number of <see cref="T:Duality.SoundInstance">SoundInstances</see> of this Sound that can
            play simultaneously. If exceeded, any new instances of it are discarded.
            </summary>
        </member>
        <member name="P:Duality.Resources.Sound.VolumeFactor">
            <summary>
            [GET / SET] A volume factor that is applied when playing this sound.
            </summary>
        </member>
        <member name="P:Duality.Resources.Sound.PitchFactor">
            <summary>
            [GET / SET] A pitch factor that is applied when playing this sound.
            </summary>
        </member>
        <member name="P:Duality.Resources.Sound.FadeOutAt">
            <summary>
            [GET / SET] Play time in seconds at which <see cref="T:Duality.SoundInstance">SoundInstances</see> of this Sound
            automatically fade out.
            </summary>
        </member>
        <member name="P:Duality.Resources.Sound.FadeOutTime">
            <summary>
            [GET / SET] If <see cref="P:Duality.Resources.Sound.FadeOutAt"/> has been triggered, this is the fade out time in seconds that is used.
            </summary>
        </member>
        <member name="P:Duality.Resources.Sound.MinDistFactor">
            <summary>
            [GET / SET] The distance at which the sound is played at full volume. Getting nearer to the source won't increase the volume anymore.
            Note that the value is a factor to <see cref="P:Duality.SoundDevice.DefaultMinDist"/>.
            </summary>
            <seealso cref="P:Duality.Resources.Sound.MinDist"/>
        </member>
        <member name="P:Duality.Resources.Sound.MaxDistFactor">
            <summary>
            [GET / SET] The distance at which the sound is played at zero volume.
            Note that the value is a factor to <see cref="P:Duality.SoundDevice.DefaultMaxDist"/>.
            </summary>
            <seealso cref="P:Duality.Resources.Sound.MaxDist"/>
        </member>
        <member name="P:Duality.Resources.Sound.MinDist">
            <summary>
            [GET / SET] The distance at which the sound is played at full volume. Getting nearer to the source won't increase the volume anymore.
            </summary>
            <seealso cref="P:Duality.Resources.Sound.MinDistFactor"/>
        </member>
        <member name="P:Duality.Resources.Sound.MaxDist">
            <summary>
            [GET / SET] The distance at which the sound is played at zero volume.
            </summary>
            <seealso cref="P:Duality.Resources.Sound.MaxDistFactor"/>
        </member>
        <member name="P:Duality.Resources.Sound.IsStreamed">
            <summary>
            [GET] Returns whether the Sound will be streamed when playing.
            </summary>
        </member>
        <member name="P:Duality.Resources.Sound.AlBuffer">
            <summary>
            The OpenAL buffer handle to the audio data that is used by this Sound.
            </summary>
        </member>
        <member name="T:Duality.Serialization.Surrogates.DictionarySurrogate">
            <summary>
            De/Serializes a <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
        </member>
        <member name="T:Duality.Serialization.Surrogate`1">
            <summary>
            Default base class for <see cref="T:Duality.Serialization.ISurrogate">Serialization Surrogates</see>. It implements both
            <see cref="T:Duality.Serialization.ISurrogate"/> and <see cref="T:Duality.Serialization.ISerializable"/>, thus being able to fully perform de/serialization
            of a designated object type.
            </summary>
            <typeparam name="T">
            The base <see cref="T:System.Type"/> of objects this surrogate can replace.
            </typeparam>
        </member>
        <member name="T:Duality.Serialization.ISurrogate">
            <summary>
            De/Serializes an object instead of letting it de/serialize itsself or using a Reflection-driven approach.
            </summary>
            <seealso cref="T:Duality.Serialization.Surrogate`1"/>
        </member>
        <member name="M:Duality.Serialization.ISurrogate.MatchesType(System.Type)">
            <summary>
            Checks whether this surrogate is able to de/serialize the specified object type.
            </summary>
            <param name="t">The <see cref="T:System.Type"/> of the object in question.</param>
            <returns>True, if this surrogate is able to de/serialize such object, false if not.</returns>
        </member>
        <member name="M:Duality.Serialization.ISurrogate.WriteConstructorData(Duality.Serialization.IDataWriter)">
            <summary>
            Writes constructor data for the replaced object. This will be used in a deserialization pre-pass 
            for constructing the object. Note that constructor data may not contain any object references to
            itsself, since it the object doesn't exist yet at this deserialization stage.
            </summary>
            <param name="writer">The <see cref="T:Duality.Serialization.IDataWriter"/> to serialize constructor data to.</param>
        </member>
        <member name="M:Duality.Serialization.ISurrogate.ConstructObject(Duality.Serialization.IDataReader,System.Type)">
            <summary>
            Constructs an object in deserialization based on the constructor data that has been written in
            serialization using <see cref="M:Duality.Serialization.ISurrogate.WriteConstructorData(Duality.Serialization.IDataWriter)"/>.
            </summary>
            <param name="reader">The <see cref="T:Duality.Serialization.IDataReader"/> to deserialize constructor data from.</param>
            <param name="objType">The <see cref="T:System.Type"/> of the object to create.</param>
            <returns>An instance of the specified <see cref="T:System.Type"/> that has been constructed using the provided data.</returns>
        </member>
        <member name="P:Duality.Serialization.ISurrogate.RealObject">
            <summary>
            [GET / SET] The object that is de/serialized
            </summary>
        </member>
        <member name="P:Duality.Serialization.ISurrogate.SurrogateObject">
            <summary>
            [GET] Returns a serializable object that represents the <see cref="P:Duality.Serialization.ISurrogate.RealObject"/>.
            </summary>
        </member>
        <member name="P:Duality.Serialization.ISurrogate.Priority">
            <summary>
            [GET] If more than one registered ISurrogate is capable of de/serializing a given object type, the one
            with the highest priority is picked.
            </summary>
        </member>
        <member name="T:Duality.Serialization.ISerializable">
            <summary>
            Provides a general interface for an object type with custom serialization.
            </summary>
        </member>
        <member name="M:Duality.Serialization.ISerializable.WriteData(Duality.Serialization.IDataWriter)">
            <summary>
            Writes the object data to the specified <see cref="T:Duality.Serialization.IDataWriter"/>.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Duality.Serialization.ISerializable.ReadData(Duality.Serialization.IDataReader)">
            <summary>
            Reads and applies the object data to the specified <see cref="T:Duality.Serialization.IDataReader"/>.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Duality.Serialization.Surrogate`1.MatchesType(System.Type)">
            <summary>
            Checks whether this surrogate is able to de/serialize the specified object type.
            </summary>
            <param name="t">The <see cref="T:System.Type"/> of the object in question.</param>
            <returns>True, if this surrogate is able to de/serialize such object, false if not.</returns>
        </member>
        <member name="M:Duality.Serialization.Surrogate`1.WriteConstructorData(Duality.Serialization.IDataWriter)">
            <summary>
            Writes constructor data for the replaced object. This will be used in a deserialization pre-pass 
            for constructing the object. Note that constructor data may not contain any object references to
            itsself, since it the object doesn't exist yet at this deserialization stage.
            </summary>
            <param name="writer">The <see cref="T:Duality.Serialization.IDataWriter"/> to serialize constructor data to.</param>
        </member>
        <member name="M:Duality.Serialization.Surrogate`1.WriteData(Duality.Serialization.IDataWriter)">
            <summary>
            Writes the object data to the specified <see cref="T:Duality.Serialization.IDataWriter"/>.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Duality.Serialization.Surrogate`1.ConstructObject(Duality.Serialization.IDataReader,System.Type)">
            <summary>
            Constructs an object in deserialization based on the constructor data that has been written in
            serialization using <see cref="M:Duality.Serialization.Surrogate`1.WriteConstructorData(Duality.Serialization.IDataWriter)"/>.
            </summary>
            <param name="reader">The <see cref="T:Duality.Serialization.IDataReader"/> to deserialize constructor data from.</param>
            <param name="objType">The <see cref="T:System.Type"/> of the object to create.</param>
            <returns>An instance of the specified <see cref="T:System.Type"/> that has been constructed using the provided data.</returns>
        </member>
        <member name="M:Duality.Serialization.Surrogate`1.ReadData(Duality.Serialization.IDataReader)">
            <summary>
            Reads and applies the object data to the specified <see cref="T:Duality.Serialization.IDataReader"/>.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="P:Duality.Serialization.Surrogate`1.RealObject">
            <summary>
            [GET] The object that is de/serialized
            </summary>
        </member>
        <member name="P:Duality.Serialization.Surrogate`1.Priority">
            <summary>
            [GET] If more than one registered surrogate is capable of de/serializing a given object type, the one
            with the highest priority is picked.
            </summary>
        </member>
        <member name="T:Duality.Serialization.XmlFormatter">
            <summary>
            De/Serializes object data.
            </summary>
            <seealso cref="T:Duality.Serialization.XmlMetaFormatter"/>
        </member>
        <member name="M:Duality.Serialization.XmlFormatter.WriteMemberInfo(System.Object,System.UInt32)">
            <summary>
            Writes the specified <see cref="T:System.Reflection.MemberInfo"/>, including references objects.
            </summary>
            <param name="obj">The object to write.</param>
            <param name="id">The objects id.</param>
        </member>
        <member name="M:Duality.Serialization.XmlFormatter.WriteArray(System.Object,Duality.Serialization.SerializeType,System.UInt32)">
            <summary>
            Writes the specified <see cref="T:System.Array"/>, including references objects.
            </summary>
            <param name="obj">The object to write.</param>
            <param name="objSerializeType">The <see cref="T:Duality.Serialization.SerializeType"/> describing the object.</param>
            <param name="id">The objects id.</param>
        </member>
        <member name="M:Duality.Serialization.XmlFormatter.WriteStruct(System.Object,Duality.Serialization.SerializeType,System.UInt32)">
            <summary>
            Writes the specified structural object, including references objects.
            </summary>
            <param name="obj">The object to write.</param>
            <param name="objSerializeType">The <see cref="T:Duality.Serialization.SerializeType"/> describing the object.</param>
            <param name="id">The objects id.</param>
        </member>
        <member name="M:Duality.Serialization.XmlFormatter.WriteDelegate(System.Object,Duality.Serialization.SerializeType,System.UInt32)">
            <summary>
            Writes the specified <see cref="T:System.Delegate"/>, including references objects.
            </summary>
            <param name="obj">The object to write.</param>
            <param name="objSerializeType">The <see cref="T:Duality.Serialization.SerializeType"/> describing the object.</param>
            <param name="id">The objects id.</param>
        </member>
        <member name="M:Duality.Serialization.XmlFormatter.WriteEnum(System.Enum,Duality.Serialization.SerializeType)">
            <summary>
            Writes the specified <see cref="T:System.Enum"/>.
            </summary>
            <param name="obj">The object to write.</param>
            <param name="objSerializeType">The <see cref="T:Duality.Serialization.SerializeType"/> describing the object.</param>
        </member>
        <member name="M:Duality.Serialization.XmlFormatter.ReadArray">
            <summary>
            Reads an <see cref="T:System.Array"/>, including referenced objects.
            </summary>
            <returns>The object that has been read.</returns>
        </member>
        <member name="M:Duality.Serialization.XmlFormatter.ReadStruct">
            <summary>
            Reads a structural object, including referenced objects.
            </summary>
            <returns>The object that has been read.</returns>
        </member>
        <member name="M:Duality.Serialization.XmlFormatter.ReadObjectRef">
            <summary>
            Reads an object reference.
            </summary>
            <returns>The object that has been read.</returns>
        </member>
        <member name="M:Duality.Serialization.XmlFormatter.ReadMemberInfo(Duality.Serialization.DataType)">
            <summary>
            Reads a <see cref="T:System.Reflection.MemberInfo"/>, including referenced objects.
            </summary>
            <param name="dataType">The <see cref="T:Duality.Serialization.DataType"/> of the object to read.</param>
            <returns>The object that has been read.</returns>
        </member>
        <member name="M:Duality.Serialization.XmlFormatter.ReadDelegate">
            <summary>
            Reads a <see cref="T:System.Delegate"/>, including referenced objects.
            </summary>
            <returns>The object that has been read.</returns>
        </member>
        <member name="M:Duality.Serialization.XmlFormatter.ReadEnum">
            <summary>
            Reads an <see cref="T:System.Enum"/>.
            </summary>
            <returns>The object that has been read.</returns>
        </member>
        <member name="T:Duality.Serialization.Surrogates.GuidSurrogate">
            <summary>
            De/Serializes a <see cref="T:System.Guid"/>.
            </summary>
        </member>
        <member name="T:Duality.Serialization.Surrogates.GuidArraySurrogate">
            <summary>
            De/Serializes an array of <see cref="T:System.Guid"/> objects.
            </summary>
        </member>
        <member name="T:Duality.Serialization.FormattingMethod">
            <summary>
            Represents a set of data formatting methods.
            </summary>
        </member>
        <member name="F:Duality.Serialization.FormattingMethod.Unknown">
            <summary>
            An unknown formatting method
            </summary>
        </member>
        <member name="F:Duality.Serialization.FormattingMethod.Xml">
            <summary>
            Text-based XML formatting
            </summary>
        </member>
        <member name="F:Duality.Serialization.FormattingMethod.Binary">
            <summary>
            Binary formatting
            </summary>
        </member>
        <member name="T:Duality.Resources.Material">
            <summary>
            Materials are standardized <see cref="T:Duality.Resources.BatchInfo">BatchInfos</see>, stored as a Resource. 
            Just like BatchInfo objects, they describe how an object, represented by a set of vertices, 
            looks like. Using Materials is generally more performant than using BatchInfos but not always
            reasonable, for example when there is a single, unique GameObject with a special appearance:
            This is a typical <see cref="T:Duality.Resources.BatchInfo"/> case.
            </summary>
            <seealso cref="T:Duality.Resources.BatchInfo"/>
        </member>
        <member name="F:Duality.Resources.Material.FileExt">
            <summary>
            A Material resources file extension.
            </summary>
        </member>
        <member name="F:Duality.Resources.Material.VirtualContentPath">
            <summary>
            (Virtual) base path for Duality's embedded default Materials.
            </summary>
        </member>
        <member name="F:Duality.Resources.Material.ContentPath_SolidWhite">
            <summary>
            (Virtual) path of the <see cref="P:Duality.Resources.Material.SolidWhite"/> Material.
            </summary>
        </member>
        <member name="F:Duality.Resources.Material.ContentPath_InvertWhite">
            <summary>
            (Virtual) path of the <see cref="P:Duality.Resources.Material.InvertWhite"/> Material.
            </summary>
        </member>
        <member name="F:Duality.Resources.Material.ContentPath_DualityLogo256">
            <summary>
            (Virtual) path of the <see cref="P:Duality.Resources.Material.DualityLogo256"/> Material.
            </summary>
        </member>
        <member name="F:Duality.Resources.Material.ContentPath_DualityLogoB256">
            <summary>
            (Virtual) path of the <see cref="P:Duality.Resources.Material.DualityLogoB256"/> Material.
            </summary>
        </member>
        <member name="M:Duality.Resources.Material.CreateFromTexture(Duality.ContentRef{Duality.Resources.Texture})">
            <summary>
            Creates a new Material Resource based on the specified Texture, saves it and returns a reference to it.
            </summary>
            <param name="baseRes"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Resources.Material.#ctor">
            <summary>
            Creates a new Material
            </summary>
        </member>
        <member name="M:Duality.Resources.Material.#ctor(Duality.ContentRef{Duality.Resources.DrawTechnique},Duality.ColorFormat.ColorRgba,Duality.ContentRef{Duality.Resources.Texture})">
            <summary>
            Creates a new single-texture Material.
            </summary>
            <param name="technique">The <see cref="T:Duality.Resources.DrawTechnique"/> to use.</param>
            <param name="mainColor">The <see cref="P:Duality.Resources.Material.MainColor"/> to use.</param>
            <param name="mainTex">The main <see cref="T:Duality.Resources.Texture"/> to use.</param>
        </member>
        <member name="M:Duality.Resources.Material.#ctor(Duality.ContentRef{Duality.Resources.DrawTechnique},Duality.ColorFormat.ColorRgba,System.Collections.Generic.Dictionary{System.String,Duality.ContentRef{Duality.Resources.Texture}},System.Collections.Generic.Dictionary{System.String,System.Single[]})">
            <summary>
            Creates a new complex Material.
            </summary>
            <param name="technique">The <see cref="T:Duality.Resources.DrawTechnique"/> to use.</param>
            <param name="mainColor">The <see cref="P:Duality.Resources.Material.MainColor"/> to use.</param>
            <param name="textures">A set of <see cref="T:Duality.Resources.Texture">Textures</see> to use.</param>
            <param name="uniforms">A set of <see cref="T:Duality.Resources.ShaderVarInfo">uniform values</see> to use.</param>
        </member>
        <member name="M:Duality.Resources.Material.#ctor(Duality.Resources.BatchInfo)">
            <summary>
            Creates a new Material based on the specified BatchInfo
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Duality.Resources.Material.GetTexture(System.String)">
            <summary>
            Gets a texture by name. Returns a null reference if the name doesn't exist.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Resources.Material.GetUniform(System.String)">
            <summary>
            Gets a uniform by name. Returns a null reference if the name doesn't exist.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Duality.Resources.Material.SolidWhite">
            <summary>
            A solid, white Material.
            </summary>
        </member>
        <member name="P:Duality.Resources.Material.InvertWhite">
            <summary>
            A Material that inverts its background.
            </summary>
        </member>
        <member name="P:Duality.Resources.Material.DualityLogo256">
            <summary>
            A Material showing the Duality logo.
            </summary>
        </member>
        <member name="P:Duality.Resources.Material.DualityLogoB256">
            <summary>
            A Material showing the Duality logo, but without the text on it.
            </summary>
        </member>
        <member name="P:Duality.Resources.Material.Info">
            <summary>
            [GET] Returns a newly created <see cref="T:Duality.Resources.BatchInfo"/> that visually equals this Material.
            </summary>
        </member>
        <member name="P:Duality.Resources.Material.Technique">
            <summary>
            [GET / SET] The <see cref="T:Duality.Resources.DrawTechnique"/> that is used.
            </summary>
        </member>
        <member name="P:Duality.Resources.Material.MainColor">
            <summary>
            [GET / SET] The main color, typically used for coloring displayed vertices.
            </summary>
        </member>
        <member name="P:Duality.Resources.Material.Textures">
            <summary>
            [GET] The set of <see cref="T:Duality.Resources.Texture">Textures</see> to use.
            </summary>
        </member>
        <member name="P:Duality.Resources.Material.MainTexture">
            <summary>
            [GET] Returns the main texture.
            </summary>
        </member>
        <member name="P:Duality.Resources.Material.Uniforms">
            <summary>
            [GET] The set of <see cref="T:Duality.Resources.ShaderVarInfo">uniform values</see> to use.
            </summary>
        </member>
        <member name="T:Duality.Resources.BatchInfo">
            <summary>
            BatchInfos describe how an object, represented by a set of vertices, looks like.
            </summary>
            <seealso cref="T:Duality.Resources.Material"/>
        </member>
        <member name="M:Duality.Resources.BatchInfo.#ctor">
            <summary>
            Creates a new, empty BatchInfo.
            </summary>
        </member>
        <member name="M:Duality.Resources.BatchInfo.#ctor(Duality.Resources.Material)">
            <summary>
            Creates a new BatchInfo based on an existing <see cref="T:Duality.Resources.Material"/>.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Duality.Resources.BatchInfo.#ctor(Duality.Resources.BatchInfo)">
            <summary>
            Creates a new BatchInfo based on an existing BatchInfo. This is essentially a copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Duality.Resources.BatchInfo.#ctor(Duality.ContentRef{Duality.Resources.DrawTechnique},Duality.ColorFormat.ColorRgba,Duality.ContentRef{Duality.Resources.Texture})">
            <summary>
            Creates a new single-texture BatchInfo.
            </summary>
            <param name="technique">The <see cref="T:Duality.Resources.DrawTechnique"/> to use.</param>
            <param name="mainColor">The <see cref="P:Duality.Resources.BatchInfo.MainColor"/> to use.</param>
            <param name="mainTex">The main <see cref="T:Duality.Resources.Texture"/> to use.</param>
        </member>
        <member name="M:Duality.Resources.BatchInfo.#ctor(Duality.ContentRef{Duality.Resources.DrawTechnique},Duality.ColorFormat.ColorRgba,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Duality.ContentRef{Duality.Resources.Texture}}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Single[]}})">
            <summary>
            Creates a new complex BatchInfo.
            </summary>
            <param name="technique">The <see cref="T:Duality.Resources.DrawTechnique"/> to use.</param>
            <param name="mainColor">The <see cref="P:Duality.Resources.BatchInfo.MainColor"/> to use.</param>
            <param name="textures">A set of <see cref="T:Duality.Resources.Texture">Textures</see> to use.</param>
            <param name="uniforms">A set of <see cref="T:Duality.Resources.ShaderVarInfo">uniform values</see> to use.</param>
        </member>
        <member name="M:Duality.Resources.BatchInfo.CopyTo(Duality.Resources.BatchInfo)">
            <summary>
            Copies this BatchInfo's data to a different one.
            </summary>
            <param name="info">The target BatchInfo to copy data to.</param>
        </member>
        <member name="M:Duality.Resources.BatchInfo.CleanDirty">
            <summary>
            Assures that the current BatchInfo is not a temporarily shallow copy of an existing one.
            </summary>
        </member>
        <member name="M:Duality.Resources.BatchInfo.MakeAvailable">
            <summary>
            Triggers content retrieval in all references Resources.
            </summary>
        </member>
        <member name="M:Duality.Resources.BatchInfo.SetupForRendering(Duality.IDrawDevice,Duality.Resources.BatchInfo)">
            <summary>
            Sets up the appropriate OpenGL rendering state to render vertices using this BatchInfo.
            </summary>
            <param name="lastInfo">
            The BatchInfo that has been used to set up the current OpenGL state. This parameter is
            optional but supplying it will improve rendering performance by reducing redundant
            state changes.
            </param>
        </member>
        <member name="M:Duality.Resources.BatchInfo.FinishRendering">
            <summary>
            Resets the OpenGL rendering state. This should only be called if there are no more
            BatchInfos to be set up directy after this one, i.e. if this is the last BatchInfo
            that has been rendered so far.
            </summary>
        </member>
        <member name="M:Duality.Resources.BatchInfo.GetTexture(System.String)">
            <summary>
            Gets a texture by name. Returns a null reference if the name doesn't exist.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Resources.BatchInfo.SetTexture(System.String,Duality.ContentRef{Duality.Resources.Texture})">
            <summary>
            Sets a texture.
            </summary>
            <param name="name"></param>
            <param name="tex"></param>
        </member>
        <member name="M:Duality.Resources.BatchInfo.GetUniform(System.String)">
            <summary>
            Gets a uniform by name. Returns a null reference if the name doesn't exist.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Resources.BatchInfo.SetUniform(System.String,System.Single[])">
            <summary>
            Sets a uniform value
            </summary>
            <param name="name"></param>
            <param name="uniform"></param>
        </member>
        <member name="M:Duality.Resources.BatchInfo.SetUniform(System.String,System.Int32,System.Single)">
            <summary>
            Sets a uniform value
            </summary>
            <param name="name"></param>
            <param name="index"></param>
            <param name="uniformVal"></param>
        </member>
        <member name="M:Duality.Resources.BatchInfo.op_Equality(Duality.Resources.BatchInfo,Duality.Resources.BatchInfo)">
            <summary>
            Compares two BatchInfos for equality. If a <see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)"/> test
            fails, their actual data is compared.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns>True, if both BatchInfos can be considered equal, false if not.</returns>
        </member>
        <member name="M:Duality.Resources.BatchInfo.op_Inequality(Duality.Resources.BatchInfo,Duality.Resources.BatchInfo)">
            <summary>
            Compares two BatchInfos for inequality. If a <see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)"/> test
            fails, their actual data is compared.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns>True, if both BatchInfos can be considered unequal, false if not.</returns>
        </member>
        <member name="P:Duality.Resources.BatchInfo.Technique">
            <summary>
            [GET / SET] The <see cref="T:Duality.Resources.DrawTechnique"/> that is used.
            </summary>
        </member>
        <member name="P:Duality.Resources.BatchInfo.MainColor">
            <summary>
            [GET / SET] The main color, typically used for coloring displayed vertices.
            </summary>
        </member>
        <member name="P:Duality.Resources.BatchInfo.Textures">
            <summary>
            [GET / SET] The set of <see cref="T:Duality.Resources.Texture">Textures</see> to use.
            </summary>
        </member>
        <member name="P:Duality.Resources.BatchInfo.MainTexture">
            <summary>
            [GET / SET] The main texture.
            </summary>
        </member>
        <member name="P:Duality.Resources.BatchInfo.Uniforms">
            <summary>
            [GET / SET] The set of <see cref="T:Duality.Resources.ShaderVarInfo">uniform values</see> to use.
            </summary>
        </member>
        <member name="M:Duality.ColorFormat.ExtMethodsIColorData.ConvertTo``1(Duality.ColorFormat.IColorData)">
            <summary>
            Converts the color to a different color data format. If there is also a
            specific method doing the desired conversion, use that instead - it might be faster.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.ColorFormat.ExtMethodsIColorData.ConvertTo(Duality.ColorFormat.IColorData,System.Type)">
            <summary>
            Converts the color to a different color data format. If there is also a
            specific method doing the desired conversion, use that instead - it might be faster.
            </summary>
            <param name="source"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Duality.CorePluginEventArgs">
            <summary>
            Provides event arguments related to <see cref="T:Duality.CorePlugin"/> instances.
            </summary>
        </member>
        <member name="T:Duality.ObjectManagerEventArgs`1">
            <summary>
            Provides event arguments regarding the objects registered in an <see cref="T:Duality.ObjectManager`1"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Duality.ObjectManagerEventArgs`1.Object">
            <summary>
            [GET] The managed object affected by the event.
            </summary>
        </member>
        <member name="T:Duality.ComponentEventArgs">
            <summary>
            Provides event arguments for <see cref="T:Duality.Component"/>-related events.
            </summary>
        </member>
        <member name="P:Duality.ComponentEventArgs.Component">
            <summary>
            [GET] The affected Component.
            </summary>
        </member>
        <member name="T:Duality.GameObjectParentChangedEventArgs">
            <summary>
            Provides event arguments for a <see cref="T:Duality.GameObject">GameObjects</see> "<see cref="P:Duality.GameObject.Parent"/> changed" events.
            </summary>
        </member>
        <member name="P:Duality.GameObjectParentChangedEventArgs.OldParent">
            <summary>
            [GET] The GameObjects old parent.
            </summary>
        </member>
        <member name="P:Duality.GameObjectParentChangedEventArgs.NewParent">
            <summary>
            [GET] The GameObjects new parent.
            </summary>
        </member>
        <member name="P:Duality.TransformChangedEventArgs.Changes">
            <summary>
            [GET] The changes that have been made since the last update.
            </summary>
        </member>
        <member name="T:Duality.Performance">
            <summary>
            This class houses several performance counters and performance measurement utility
            </summary>
        </member>
        <member name="P:Duality.Performance.FrameTime">
            <summary>
            [GET] Time in milliseconds the last frame took.
            </summary>
        </member>
        <member name="P:Duality.Performance.UpdateTime">
            <summary>
            [GET] Time in milliseconds the last DualityApp.Update() call took
            </summary>
        </member>
        <member name="P:Duality.Performance.UpdatePhysicsTime">
            <summary>
            [GET] Time in milliseconds the last frame used for physics calculation
            </summary>
        </member>
        <member name="P:Duality.Performance.UpdateSceneTime">
            <summary>
            [GET] Time in milliseconds the last frame used for scene updates
            </summary>
        </member>
        <member name="P:Duality.Performance.UpdateAudioTime">
            <summary>
            [GET] Time in milliseconds the last frame used for audio updates (without streaming)
            </summary>
        </member>
        <member name="P:Duality.Performance.RenderTime">
            <summary>
            [GET] Time in milliseconds the last DualityApp.Render() call took
            </summary>
        </member>
        <member name="P:Duality.Performance.CollectDrawcallsTime">
            <summary>
            [GET] Time in milliseconds the last frame used for collecting drawcalls
            </summary>
        </member>
        <member name="P:Duality.Performance.OptimizeDrawcallsTime">
            <summary>
            [GET] Time in milliseconds the last frame used for optimizing drawcalls / batching
            </summary>
        </member>
        <member name="P:Duality.Performance.ProcessDrawcallsTime">
            <summary>
            [GET] Time in milliseconds the last frame used for processing drawcalls
            </summary>
        </member>
        <member name="P:Duality.Performance.PostProcessingTime">
            <summary>
            [GET] Time in milliseconds the last frame used for postprocessing.
            </summary>
        </member>
        <member name="P:Duality.Performance.PickingTime">
            <summary>
            [GET] Time in milliseconds the last frame used for visual picking operations.
            </summary>
        </member>
        <member name="P:Duality.Performance.StatNumDrawcalls">
            <summary>
            [GET] The number of drawcalls that have been emitted last frame.
            </summary>
        </member>
        <member name="P:Duality.Performance.StatNumRawBatches">
            <summary>
            [GET] The number of raw, submitted batches without merging.
            </summary>
        </member>
        <member name="P:Duality.Performance.StatNumMergedBatches">
            <summary>
            [GET] The number of batches before optimization.
            </summary>
        </member>
        <member name="P:Duality.Performance.StatNumOptimizedBatches">
            <summary>
            [GET] The number of batches after optimization.
            </summary>
        </member>
        <member name="P:Duality.Performance.StatNumPlaying2D">
            <summary>
            [GET] The number of currently playing 2d sounds.
            </summary>
        </member>
        <member name="P:Duality.Performance.StatNumPlaying3D">
            <summary>
            [GET] The number of currently playing 3d sounds.
            </summary>
        </member>
        <member name="T:Duality.Cloning.ISurrogate">
            <summary>
            Clones an object instead of letting it clone itsself or using a Reflection-driven approach.
            </summary>
            <seealso cref="T:Duality.Cloning.Surrogate`1"/>
        </member>
        <member name="M:Duality.Cloning.ISurrogate.MatchesType(System.Type)">
            <summary>
            Checks whether this surrogate is able to clone the specified object type.
            </summary>
            <param name="t">The <see cref="T:System.Type"/> of the object in question.</param>
            <returns>True, if this surrogate is able to clone such object, false if not.</returns>
        </member>
        <member name="P:Duality.Cloning.ISurrogate.RealObject">
            <summary>
            [GET / SET] The object that is cloned
            </summary>
        </member>
        <member name="P:Duality.Cloning.ISurrogate.SurrogateObject">
            <summary>
            [GET] Returns a clonable object that represents the <see cref="P:Duality.Cloning.ISurrogate.RealObject"/>.
            </summary>
        </member>
        <member name="P:Duality.Cloning.ISurrogate.Priority">
            <summary>
            [GET] If more than one registered ISurrogate is capable of cloning a given object type, the one
            with the highest priority is picked.
            </summary>
        </member>
        <member name="T:Duality.Cloning.Surrogate`1">
            <summary>
            Default base class for <see cref="T:Duality.Cloning.ISurrogate">Serialization Surrogates</see>. It implements both
            <see cref="T:Duality.Cloning.ISurrogate"/> and <see cref="T:Duality.Cloning.ICloneable"/>, thus being able to fully perform de/serialization
            of a designated object type.
            </summary>
            <typeparam name="T">
            The base <see cref="T:System.Type"/> of objects this surrogate can replace.
            </typeparam>
        </member>
        <member name="M:Duality.Cloning.Surrogate`1.MatchesType(System.Type)">
            <summary>
            Checks whether this surrogate is able to clone the specified object type.
            </summary>
            <param name="t">The <see cref="T:System.Type"/> of the object in question.</param>
            <returns>True, if this surrogate is able to clone such object, false if not.</returns>
        </member>
        <member name="P:Duality.Cloning.Surrogate`1.RealObject">
            <summary>
            [GET / SET] The object that is cloned
            </summary>
        </member>
        <member name="P:Duality.Cloning.Surrogate`1.Priority">
            <summary>
            [GET] If more than one registered ISurrogate is capable of cloning a given object type, the one
            with the highest priority is picked.
            </summary>
        </member>
        <member name="M:Duality.Cloning.CloneProvider.ClearSurrogates">
            <summary>
            Unregisters all <see cref="T:Duality.Cloning.ISurrogate">Surrogates</see>.
            </summary>
        </member>
        <member name="M:Duality.Cloning.CloneProvider.AddSurrogate(Duality.Cloning.ISurrogate)">
            <summary>
            Registers a new <see cref="T:Duality.Cloning.ISurrogate">Surrogate</see>.
            </summary>
            <param name="surrogate"></param>
        </member>
        <member name="M:Duality.Cloning.CloneProvider.RemoveSurrogate(Duality.Cloning.ISurrogate)">
            <summary>
            Unregisters an existing <see cref="T:Duality.Cloning.ISurrogate">Surrogate</see>.
            </summary>
            <param name="surrogate"></param>
        </member>
        <member name="M:Duality.Cloning.CloneProvider.GetSurrogateFor(System.Type)">
            <summary>
            Retrieves a matching <see cref="T:Duality.Cloning.ISurrogate"/> for the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="t">The <see cref="T:System.Type"/> to retrieve a <see cref="T:Duality.Cloning.ISurrogate"/> for.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.Cloning.CloneProvider.ClearObjectMap">
            <summary>
            Clears all existing object mappings.
            </summary>
        </member>
        <member name="M:Duality.Cloning.CloneProvider.RequestObjectClone``1(``0)">
            <summary>
            Requests the clone(d) object mapped to the specified base object.
            </summary>
            <param name="baseObj"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Cloning.CloneProvider.GetRegisteredObjectClone``1(``0)">
            <summary>
            Returns an already registered clone object, if existing.
            </summary>
            <param name="baseObj"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Cloning.CloneProvider.IsOriginalObject(System.Object)">
            <summary>
            Returns whether the specified object is a registered original / base object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Cloning.CloneProvider.IsCloneObject(System.Object)">
            <summary>
            Returns whether the specified object is a registered clone object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Cloning.CloneProvider.CopyObjectTo``1(``0,``0,System.Collections.Generic.IEnumerable{System.Reflection.FieldInfo})">
            <summary>
            Copies the base objects data to the specified target object.
            </summary>
            <param name="baseObj"></param>
            <param name="targetObj"></param>
            <param name="fields"></param>
        </member>
        <member name="M:Duality.Cloning.CloneProvider.RegisterObjectClone``1(``0,``0)">
            <summary>
            Registers a new base-clone mapping.
            </summary>
            <param name="baseObj"></param>
            <param name="clone"></param>
        </member>
        <member name="P:Duality.Cloning.CloneProvider.Surrogates">
            <summary>
            [GET] Enumerates registered <see cref="T:Duality.Cloning.ISurrogate">Cloning Surrogates</see>. If any of them
            matches the <see cref="T:System.Type"/> of an object that is to be cloned, instead of letting it
            clone itsself, the <see cref="T:Duality.Cloning.ISurrogate"/> with the highest <see cref="P:Duality.Cloning.ISurrogate.Priority"/>
            is used instead.
            </summary>
        </member>
        <member name="T:Duality.VertexFormat.VertexC1P3T4A1">
            <summary>
            Vertex data providing each vertex a position (3x4 byte), color (1x4 byte), two texture coordinates (4x4 byte)
            and a custom float vertex attribute (1x4 byte).
            </summary>
        </member>
        <member name="F:Duality.VertexFormat.VertexC1P3T4A1.OffsetColor">
            <summary>
            Byte offset for the color.
            </summary>
        </member>
        <member name="F:Duality.VertexFormat.VertexC1P3T4A1.OffsetPos">
            <summary>
            Byte offset for the position.
            </summary>
        </member>
        <member name="F:Duality.VertexFormat.VertexC1P3T4A1.OffsetTex0">
            <summary>
            Byte offset for the (double) texture coordinate.
            </summary>
        </member>
        <member name="F:Duality.VertexFormat.VertexC1P3T4A1.OffsetAttrib">
            <summary>
            Byte offset for the custom attribute.
            </summary>
        </member>
        <member name="F:Duality.VertexFormat.VertexC1P3T4A1.Size">
            <summary>
            Total size in bytes.
            </summary>
        </member>
        <member name="F:Duality.VertexFormat.VertexC1P3T4A1.Color">
            <summary>
            The vertices color.
            </summary>
        </member>
        <member name="F:Duality.VertexFormat.VertexC1P3T4A1.Pos">
            <summary>
            The vertices position.
            </summary>
        </member>
        <member name="F:Duality.VertexFormat.VertexC1P3T4A1.TexCoord">
            <summary>
            The vertices texture coordinates (two of them).
            </summary>
        </member>
        <member name="F:Duality.VertexFormat.VertexC1P3T4A1.Attrib">
            <summary>
            The vertices custom attribute.
            </summary>
        </member>
        <member name="T:Duality.Resources.VertexShader">
            <summary>
            Represents an OpenGL VertexShader.
            </summary>
        </member>
        <member name="T:Duality.Resources.AbstractShader">
            <summary>
            Represents an OpenGL Shader in an abstract form.
            </summary>
        </member>
        <member name="M:Duality.Resources.AbstractShader.SetSource(System.String)">
            <summary>
            Applies the specified source code to the shader.
            </summary>
            <param name="source">The new shader source code.</param>
        </member>
        <member name="M:Duality.Resources.AbstractShader.LoadSource(System.IO.Stream)">
            <summary>
            Loads new shader source code from the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read the source code from.</param>
        </member>
        <member name="M:Duality.Resources.AbstractShader.LoadSource(System.String)">
            <summary>
            Loads new shader source code from the specified file.
            </summary>
            <param name="filePath">The path of the file to read the source code from.</param>
        </member>
        <member name="M:Duality.Resources.AbstractShader.SaveSource(System.String)">
            <summary>
            Saves the current shader source code to the specified file.
            </summary>
            <param name="filePath">The path of the file to write the source code to.</param>
        </member>
        <member name="M:Duality.Resources.AbstractShader.Compile">
            <summary>
            Compiles the shader. This is done automatically when loading the shader
            or attaching it to a <see cref="T:Duality.Resources.ShaderProgram"/>.
            </summary>
        </member>
        <member name="P:Duality.Resources.AbstractShader.OglShaderType">
            <summary>
            The type of OpenGL shader that is represented.
            </summary>
        </member>
        <member name="P:Duality.Resources.AbstractShader.Compiled">
            <summary>
            [GET] Whether this shader has been compiled yet or not.
            </summary>
        </member>
        <member name="P:Duality.Resources.AbstractShader.VarInfo">
            <summary>
            [GET] Information about the <see cref="T:Duality.Resources.ShaderVarInfo">variables</see> declared in the shader.
            </summary>
        </member>
        <member name="P:Duality.Resources.AbstractShader.Source">
            <summary>
            [GET] The shaders source code.
            </summary>
        </member>
        <member name="F:Duality.Resources.VertexShader.FileExt">
            <summary>
            A VertexShader resources file extension.
            </summary>
        </member>
        <member name="F:Duality.Resources.VertexShader.VirtualContentPath">
            <summary>
            (Virtual) base path for Duality's embedded default VertexShaders.
            </summary>
        </member>
        <member name="F:Duality.Resources.VertexShader.ContentPath_Minimal">
            <summary>
            (Virtual) path of the <see cref="P:Duality.Resources.VertexShader.Minimal"/> VertexShader.
            </summary>
        </member>
        <member name="F:Duality.Resources.VertexShader.ContentPath_SmoothAnim">
            <summary>
            (Virtual) path of the <see cref="P:Duality.Resources.VertexShader.SmoothAnim"/> VertexShader.
            </summary>
        </member>
        <member name="P:Duality.Resources.VertexShader.Minimal">
            <summary>
            [GET] A minimal VertexShader. It performs OpenGLs default transformation
            and forwards a single texture coordinate and color to the fragment stage.
            </summary>
        </member>
        <member name="P:Duality.Resources.VertexShader.SmoothAnim">
            <summary>
            [GET] The SmoothAnim VertexShader. In addition to the <see cref="P:Duality.Resources.VertexShader.Minimal"/>
            setup, it forwards the custom animBlend vertex attribute to the fragment stage.
            </summary>
        </member>
        <member name="T:Duality.Rect">
            <summary>
            Describes a rectangular area.
            </summary>
        </member>
        <member name="F:Duality.Rect.Empty">
            <summary>
            An empty Rect.
            </summary>
        </member>
        <member name="F:Duality.Rect.X">
            <summary>
            The Rects x-Coordinate.
            </summary>
        </member>
        <member name="F:Duality.Rect.Y">
            <summary>
            The Rects y-Coordinate.
            </summary>
        </member>
        <member name="F:Duality.Rect.W">
            <summary>
            The Rects width.
            </summary>
        </member>
        <member name="F:Duality.Rect.H">
            <summary>
            The Rects height.
            </summary>
        </member>
        <member name="M:Duality.Rect.#ctor(OpenTK.Vector2)">
            <summary>
            Creates a Rect of the given size.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:Duality.Rect.#ctor(System.Single,System.Single)">
            <summary>
            Creates a Rect of the given size.
            </summary>
            <param name="w"></param>
            <param name="h"></param>
        </member>
        <member name="M:Duality.Rect.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a Rect of the given size and position.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="w"></param>
            <param name="h"></param>
        </member>
        <member name="M:Duality.Rect.Offset(System.Single,System.Single)">
            <summary>
            Returns a new version of this Rect that has been moved by the specified offset.
            </summary>
            <param name="x">Movement in x-Direction.</param>
            <param name="y">Movement in y-Direction.</param>
            <returns>A new Rect with the specified adjustments.</returns>
        </member>
        <member name="M:Duality.Rect.Offset(OpenTK.Vector2)">
            <summary>
            Returns a new version of this Rect that has been moved by the specified offset.
            </summary>
            <param name="offset">Movement vector.</param>
            <returns>A new Rect with the specified adjustments.</returns>
        </member>
        <member name="M:Duality.Rect.Scale(System.Single,System.Single)">
            <summary>
            Returns a new version of this Rect that has been scaled by the specified factor.
            Scaling only affects a Rects size, not its position.
            </summary>
            <param name="x">x-Scale factor.</param>
            <param name="y">y-Scale factor.</param>
            <returns>A new Rect with the specified adjustments.</returns>
        </member>
        <member name="M:Duality.Rect.Scale(OpenTK.Vector2)">
            <summary>
            Returns a new version of this Rect that has been scaled by the specified factor.
            Scaling only affects a Rects size, not its position.
            </summary>
            <param name="factor">Scale factor.</param>
            <returns>A new Rect with the specified adjustments.</returns>
        </member>
        <member name="M:Duality.Rect.Transform(System.Single,System.Single)">
            <summary>
            Returns a new version of this Rect that has been transformed by the specified scale factor.
            Transforming both affects a Rects size and position.
            </summary>
            <param name="x">x-Scale factor.</param>
            <param name="y">y-Scale factor.</param>
            <returns>A new Rect with the specified adjustments.</returns>
        </member>
        <member name="M:Duality.Rect.Transform(OpenTK.Vector2)">
            <summary>
            Returns a new version of this Rect that has been transformed by the specified scale factor.
            Transforming both affects a Rects size and position.
            </summary>
            <param name="scale">Scale factor.</param>
            <returns>A new Rect with the specified adjustments.</returns>
        </member>
        <member name="M:Duality.Rect.ExpandToContain(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns a new version of this Rect that has been expanded to contain
            the specified rectangular area.
            </summary>
            <param name="x">x-Coordinate of the Rect to contain.</param>
            <param name="y">y-Coordinate of the Rect to contain.</param>
            <param name="w">Width of the Rect to contain.</param>
            <param name="h">Height of the Rect to contain.</param>
            <returns>A new Rect with the specified adjustments.</returns>
        </member>
        <member name="M:Duality.Rect.ExpandToContain(Duality.Rect)">
            <summary>
            Returns a new version of this Rect that has been expanded to contain
            the specified Rect.
            </summary>
            <param name="other">The Rect to contain.</param>
            <returns>A new Rect with the specified adjustments.</returns>
        </member>
        <member name="M:Duality.Rect.ExpandToContain(System.Single,System.Single)">
            <summary>
            Returns a new version of this Rect that has been expanded to contain
            the specified point.
            </summary>
            <param name="x">x-Coordinate of the point to contain.</param>
            <param name="y">y-Coordinate of the point to contain.</param>
            <returns>A new Rect with the specified adjustments.</returns>
        </member>
        <member name="M:Duality.Rect.ExpandToContain(OpenTK.Vector2)">
            <summary>
            Returns a new version of this Rect that has been expanded to contain
            the specified point.
            </summary>
            <param name="p">The point to contain.</param>
            <returns>A new Rect with the specified adjustments.</returns>
        </member>
        <member name="M:Duality.Rect.Round">
            <summary>
            Returns a new version of this Rect with integer coordinates and size.
            They have been <see cref="M:Duality.MathF.Round(System.Single)">rounded</see>.
            </summary>
            <returns>A new Rect with the specified adjustments.</returns>
        </member>
        <member name="M:Duality.Rect.Ceiling">
            <summary>
            Returns a new version of this Rect with integer coordinates and size.
            They have been <see cref="M:Duality.MathF.Ceiling(System.Single)">ceiled</see>.
            </summary>
            <returns>A new Rect with the specified adjustments.</returns>
        </member>
        <member name="M:Duality.Rect.Floor">
            <summary>
            Returns a new version of this Rect with integer coordinates and size.
            They have been <see cref="M:Duality.MathF.Floor(System.Single)">floored</see>.
            </summary>
            <returns>A new Rect with the specified adjustments.</returns>
        </member>
        <member name="M:Duality.Rect.Contains(System.Single,System.Single)">
            <summary>
            Returns whether this Rect contains a given point.
            </summary>
            <param name="x">x-Coordinate of the point to test.</param>
            <param name="y">y-Coordinate of the point to test.</param>
            <returns>True, if the Rect contains the point, false if not.</returns>
        </member>
        <member name="M:Duality.Rect.Contains(OpenTK.Vector2)">
            <summary>
            Returns whether this Rect contains a given point.
            </summary>
            <param name="pos">The point to test.</param>
            <returns>True, if the Rect contains the point, false if not.</returns>
        </member>
        <member name="M:Duality.Rect.Contains(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns whether this Rect contains a given rectangular area.
            </summary>
            <param name="x">x-Coordinate of the Rect to test.</param>
            <param name="y">y-Coordinate of the Rect to test.</param>
            <param name="w">Width of the Rect to test.</param>
            <param name="h">Height of the Rect to test.</param>
            <returns>True, if the Rect contains the other Rect, false if not.</returns>
        </member>
        <member name="M:Duality.Rect.Contains(Duality.Rect)">
            <summary>
            Returns whether this Rect contains a given rectangular area.
            </summary>
            <param name="rect">The Rect to test.</param>
            <returns>True, if the Rect contains the other Rect, false if not.</returns>
        </member>
        <member name="M:Duality.Rect.Intersects(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns whether this Rect intersects a given rectangular area.
            </summary>
            <param name="x">x-Coordinate of the Rect to test.</param>
            <param name="y">y-Coordinate of the Rect to test.</param>
            <param name="w">Width of the Rect to test.</param>
            <param name="h">Height of the Rect to test.</param>
            <returns>True, if the Rect intersects the other Rect, false if not.</returns>
        </member>
        <member name="M:Duality.Rect.Intersects(Duality.Rect)">
            <summary>
            Returns whether this Rect intersects a given rectangular area.
            </summary>
            <param name="rect">The Rect to test.</param>
            <returns>True, if the Rect intersects the other Rect, false if not.</returns>
        </member>
        <member name="M:Duality.Rect.Intersection(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns a Rect that equals this Rects intersection with another Rect.
            </summary>
            <param name="x">x-Coordinate of the Rect to intersect with.</param>
            <param name="y">y-Coordinate of the Rect to intersect with.</param>
            <param name="w">Width of the Rect to intersect with.</param>
            <param name="h">Height of the Rect to intersect with.</param>
            <returns>A new Rect that describes both Rects intersection area.</returns>
        </member>
        <member name="M:Duality.Rect.Intersection(Duality.Rect)">
            <summary>
            Returns a Rect that equals this Rects intersection with another Rect.
            </summary>
            <param name="rect">The other Rect to intersect with.</param>
            <returns>A new Rect that describes both Rects intersection area.</returns>
        </member>
        <member name="M:Duality.Rect.Equals(Duality.Rect)">
            <summary>
            Tests if two Rects are equal.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Rect.Align(Duality.Alignment,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a Rect using x and y Coordinates that are assumed to be aligned as specified.
            </summary>
            <param name="align">The alignment of the Rects x and y Coordinates.</param>
            <param name="x">The Rects x-Coordinate.</param>
            <param name="y">The Rects y-Coordinate.</param>
            <param name="w">The Rects width.</param>
            <param name="h">The Rects height.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.Rect.AlignCenter(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a Rect using x and y Coordinates that are assumed to be aligned centered.
            </summary>
            <param name="x">The Rects x-Coordinate.</param>
            <param name="y">The Rects y-Coordinate.</param>
            <param name="w">The Rects width.</param>
            <param name="h">The Rects height.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.Rect.AlignTop(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a Rect using x and y Coordinates that are assumed to be aligned at the top.
            </summary>
            <param name="x">The Rects x-Coordinate.</param>
            <param name="y">The Rects y-Coordinate.</param>
            <param name="w">The Rects width.</param>
            <param name="h">The Rects height.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.Rect.AlignBottom(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a Rect using x and y Coordinates that are assumed to be aligned at the bottom.
            </summary>
            <param name="x">The Rects x-Coordinate.</param>
            <param name="y">The Rects y-Coordinate.</param>
            <param name="w">The Rects width.</param>
            <param name="h">The Rects height.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.Rect.AlignLeft(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a Rect using x and y Coordinates that are assumed to be aligned left
            </summary>
            <param name="x">The Rects x-Coordinate.</param>
            <param name="y">The Rects y-Coordinate.</param>
            <param name="w">The Rects width.</param>
            <param name="h">The Rects height.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.Rect.AlignRight(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a Rect using x and y Coordinates that are assumed to be aligned right
            </summary>
            <param name="x">The Rects x-Coordinate.</param>
            <param name="y">The Rects y-Coordinate.</param>
            <param name="w">The Rects width.</param>
            <param name="h">The Rects height.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.Rect.AlignTopLeft(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a Rect using x and y Coordinates that are assumed to be aligned top left.
            </summary>
            <param name="x">The Rects x-Coordinate.</param>
            <param name="y">The Rects y-Coordinate.</param>
            <param name="w">The Rects width.</param>
            <param name="h">The Rects height.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.Rect.AlignTopRight(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a Rect using x and y Coordinates that are assumed to be aligned top right.
            </summary>
            <param name="x">The Rects x-Coordinate.</param>
            <param name="y">The Rects y-Coordinate.</param>
            <param name="w">The Rects width.</param>
            <param name="h">The Rects height.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.Rect.AlignBottomLeft(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a Rect using x and y Coordinates that are assumed to be aligned bottom left.
            </summary>
            <param name="x">The Rects x-Coordinate.</param>
            <param name="y">The Rects y-Coordinate.</param>
            <param name="w">The Rects width.</param>
            <param name="h">The Rects height.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.Rect.AlignBottomRight(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a Rect using x and y Coordinates that are assumed to be aligned bottom right.
            </summary>
            <param name="x">The Rects x-Coordinate.</param>
            <param name="y">The Rects y-Coordinate.</param>
            <param name="w">The Rects width.</param>
            <param name="h">The Rects height.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.Rect.op_Equality(Duality.Rect,Duality.Rect)">
            <summary>
            Returns whether two Rects are equal.
            </summary>
            <param name="left">The first Rect.</param>
            <param name="right">The second Rect.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.Rect.op_Inequality(Duality.Rect,Duality.Rect)">
            <summary>
            Returns whether two Rects are unequal.
            </summary>
            <param name="left">The first Rect.</param>
            <param name="right">The second Rect.</param>
            <returns></returns>
        </member>
        <member name="P:Duality.Rect.Pos">
            <summary>
            [GET / SET] The Rects position
            </summary>
        </member>
        <member name="P:Duality.Rect.Size">
            <summary>
            [GET / SET] The Rects size.
            </summary>
        </member>
        <member name="P:Duality.Rect.MinX">
            <summary>
            [GET] The minimum x-Coordinate occupied by the Rect. Accounts for negative sizes.
            </summary>
        </member>
        <member name="P:Duality.Rect.MinY">
            <summary>
            [GET] The minimum y-Coordinate occupied by the Rect. Accounts for negative sizes.
            </summary>
        </member>
        <member name="P:Duality.Rect.MaxY">
            <summary>
            [GET] The maximum x-Coordinate occupied by the Rect. Accounts for negative sizes.
            </summary>
        </member>
        <member name="P:Duality.Rect.MaxX">
            <summary>
            [GET] The maximum y-Coordinate occupied by the Rect. Accounts for negative sizes.
            </summary>
        </member>
        <member name="P:Duality.Rect.CenterX">
            <summary>
            [GET] The center x-Coordinate occupied by the Rect.
            </summary>
        </member>
        <member name="P:Duality.Rect.CenterY">
            <summary>
            [GET] The center y-Coordinate occupied by the Rect.
            </summary>
        </member>
        <member name="P:Duality.Rect.TopLeft">
            <summary>
            [GET] The Rects top left coordinates
            </summary>
        </member>
        <member name="P:Duality.Rect.TopRight">
            <summary>
            [GET] The Rects top right coordinates
            </summary>
        </member>
        <member name="P:Duality.Rect.Top">
            <summary>
            [GET] The Rects top coordinates
            </summary>
        </member>
        <member name="P:Duality.Rect.BottomLeft">
            <summary>
            [GET] The Rects bottom left coordinates
            </summary>
        </member>
        <member name="P:Duality.Rect.BottomRight">
            <summary>
            [GET] The Rects bottom right coordinates
            </summary>
        </member>
        <member name="P:Duality.Rect.Bottom">
            <summary>
            [GET] The Rects bottom coordinates
            </summary>
        </member>
        <member name="P:Duality.Rect.Left">
            <summary>
            [GET] The Rects left coordinates
            </summary>
        </member>
        <member name="P:Duality.Rect.Right">
            <summary>
            [GET] The Rects right coordinates
            </summary>
        </member>
        <member name="P:Duality.Rect.Center">
            <summary>
            [GET] The Rects center coordinates
            </summary>
        </member>
        <member name="P:Duality.Rect.Area">
            <summary>
            [GET] The area that is occupied by the Rect.
            </summary>
        </member>
        <member name="P:Duality.Rect.Perimeter">
            <summary>
            [GET] The Rects perimeter i.e. sum of all edge lengths.
            </summary>
        </member>
        <member name="P:Duality.Rect.BoundingRadius">
            <summary>
            [GET] If this Rect was to fit inside a bounding circle originating from [0,0],
            this would be its radius.
            </summary>
        </member>
        <member name="T:Duality.ObjectManagers.GameObjectManager">
            <summary>
            Manages a set of <see cref="T:Duality.GameObject">GameObject</see> and exposes suitable object enumerations as well as un/registeration events.
            If a registered object has been disposed, it will be automatically unregistered.
            </summary>
        </member>
        <member name="T:Duality.ObjectManager`1">
            <summary>
            Manages a set of objects and exposes suitable object enumerations as well as un/registeration events.
            If a registered object has been disposed, it will be automatically unregistered.
            </summary>
            <typeparam name="T">The object type that is managed here.</typeparam>
        </member>
        <member name="M:Duality.ObjectManager`1.Clear">
            <summary>
            Unregisters all objects.
            </summary>
        </member>
        <member name="M:Duality.ObjectManager`1.RegisterObj(`0)">
            <summary>
            Registers a single object
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.ObjectManager`1.RegisterObj(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Registers a set of objects
            </summary>
            <param name="objEnum"></param>
        </member>
        <member name="M:Duality.ObjectManager`1.UnregisterObj(`0)">
            <summary>
            Unregisters a single object
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.ObjectManager`1.UnregisterObj(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Unregisters a set of objects
            </summary>
            <param name="objEnum"></param>
        </member>
        <member name="M:Duality.ObjectManager`1.OnRegistered(`0)">
            <summary>
            Called when the specified object has been registered
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.ObjectManager`1.OnUnregistered(`0)">
            <summary>
            Called when the specified object has been unregistered.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="E:Duality.ObjectManager`1.Registered">
            <summary>
            Fired when a new object has been registered.
            </summary>
        </member>
        <member name="E:Duality.ObjectManager`1.Unregistered">
            <summary>
            Fired when a registered object has been unregistered.
            </summary>
        </member>
        <member name="P:Duality.ObjectManager`1.AllObjects">
            <summary>
            [GET] Enumerates all registered objects.
            </summary>
        </member>
        <member name="P:Duality.ObjectManager`1.ActiveObjects">
            <summary>
            [GET] Enumerates all registered objects that are currently active.
            </summary>
        </member>
        <member name="M:Duality.ObjectManagers.GameObjectManager.RegisterObj(Duality.GameObject)">
            <summary>
            Registers a GameObject and all of its children.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.ObjectManagers.GameObjectManager.UnregisterObj(Duality.GameObject)">
            <summary>
            Unregisters a GameObject and all of its children
            </summary>
            <param name="obj"></param>
        </member>
        <member name="P:Duality.ObjectManagers.GameObjectManager.RootObjects">
            <summary>
            [GET] Enumerates all root GameObjects, i.e. all GameObjects without a parent object.
            </summary>
        </member>
        <member name="P:Duality.ObjectManagers.GameObjectManager.ActiveRootObjects">
            <summary>
            [GET] Enumerates all <see cref="P:Duality.ObjectManagers.GameObjectManager.RootObjects"/> that are currently active.
            </summary>
        </member>
        <member name="E:Duality.ObjectManagers.GameObjectManager.RegisteredObjectComponentAdded">
            <summary>
            Fired when a <see cref="T:Duality.Component"/> is added to an already registered GameObject.
            </summary>
        </member>
        <member name="E:Duality.ObjectManagers.GameObjectManager.RegisteredObjectComponentRemoved">
            <summary>
            Fired when a <see cref="T:Duality.Component"/> is removed from an already registered GameObject.
            </summary>
        </member>
        <member name="T:Duality.Serialization.SerializeType">
            <summary>
            The SerializeType class is essentially caching serialization-relevant information
            that has been generated basing on a <see cref="T:System.Type"/>. It is cached in the
            <see cref="T:Duality.ReflectionHelper"/> to avoid redundant information gathering.
            </summary>
        </member>
        <member name="M:Duality.Serialization.SerializeType.#ctor(System.Type)">
            <summary>
            Creates a new SerializeType based on a <see cref="T:System.Type"/>, gathering all the information that is necessary for serialization.
            </summary>
            <param name="t"></param>
        </member>
        <member name="P:Duality.Serialization.SerializeType.Type">
            <summary>
            [GET] The <see cref="T:System.Type"/> that is described.
            </summary>
        </member>
        <member name="P:Duality.Serialization.SerializeType.Fields">
            <summary>
            [GET] An array of <see cref="T:System.Reflection.FieldInfo">fields</see> which are serialized.
            </summary>
        </member>
        <member name="P:Duality.Serialization.SerializeType.TypeString">
            <summary>
            [GET] A string referring to the <see cref="T:System.Type"/> that is described.
            </summary>
            <seealso cref="M:Duality.ReflectionHelper.GetTypeId(System.Type)"/>
        </member>
        <member name="P:Duality.Serialization.SerializeType.DataType">
            <summary>
            [GET] The <see cref="T:Duality.Serialization.DataType"/> associated with the described <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="T:Duality.Serialization.ObjectIdManager">
            <summary>
            Manages object IDs during de/serialization.
            </summary>
        </member>
        <member name="M:Duality.Serialization.ObjectIdManager.Clear">
            <summary>
            Clears all object id mappings.
            </summary>
        </member>
        <member name="M:Duality.Serialization.ObjectIdManager.Request(System.Object,System.Boolean@)">
            <summary>
            Returns the id that is assigned to the specified object. Assigns one, if
            there is none yet.
            </summary>
            <param name="obj"></param>
            <param name="isNewId"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Serialization.ObjectIdManager.Inject(System.Object,System.UInt32)">
            <summary>
            Assigns an id to a specific object.
            </summary>
            <param name="obj"></param>
            <param name="id">The id to assign. Zero ids are rejected.</param>
        </member>
        <member name="M:Duality.Serialization.ObjectIdManager.Lookup(System.UInt32,System.Object@)">
            <summary>
            Tries to lookup an object based on its id.
            </summary>
            <param name="id"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.CorePlugin.InitPlugin">
            <summary>
            Called when initializing the plugin.
            </summary>
        </member>
        <member name="M:Duality.CorePlugin.OnDisposePlugin">
            <summary>
            Called when unloading / disposing the plugin.
            </summary>
        </member>
        <member name="M:Duality.CorePlugin.OnBeforeUpdate">
            <summary>
            Called before Duality updates the game scene
            </summary>
        </member>
        <member name="M:Duality.CorePlugin.OnAfterUpdate">
            <summary>
            Called after Duality updates the game scene
            </summary>
        </member>
        <member name="M:Duality.CorePlugin.OnExecContextChanged(Duality.DualityApp.ExecutionContext)">
            <summary>
            Called when Dualitys <see cref="T:Duality.DualityApp.ExecutionContext"/> changes.
            </summary>
        </member>
        <member name="T:Duality.Time">
            <summary>
            The Time class provides a global interface for time measurement and control. It affects all time-dependent computations. 
            Use the <see cref="P:Duality.Time.TimeMult"/> Property to make your own computations time-dependent instead of frame-dependent. Otherwise, your
            game logic will depend on how many FPS the player's machine achieves and mit behave differently on very slow or fast machines.
            </summary>
        </member>
        <member name="F:Duality.Time.MsPFMult">
            <summary>
            Milliseconds a frame takes at the desired refresh rate of 60 FPS
            </summary>
        </member>
        <member name="F:Duality.Time.SPFMult">
            <summary>
            Seconds a frame takes at the desired refresh rate of 60 FPS
            </summary>
        </member>
        <member name="M:Duality.Time.Freeze">
            <summary>
            Freezes game time. This will cause the GameTimer to stop and TimeMult to equal zero.
            </summary>
        </member>
        <member name="M:Duality.Time.Resume">
            <summary>
            Unfreezes game time. TimeMult resumes to its normal value and GameTimer starts running again.
            </summary>
        </member>
        <member name="P:Duality.Time.StartupTime">
            <summary>
            [GET] Returns the date and time of engine startup.
            </summary>
        </member>
        <member name="P:Duality.Time.MainTimer">
            <summary>
            [GET] Returns the real time that has passed since engine startup.
            </summary>
        </member>
        <member name="P:Duality.Time.LastDelta">
            <summary>
            [GET] Time in milliseconds the last frame took
            </summary>
        </member>
        <member name="P:Duality.Time.Fps">
            <summary>
            [GET] Frames per Second
            </summary>
        </member>
        <member name="P:Duality.Time.GameTimer">
            <summary>
            [GET] Returns the game time that has passed since engine startup. Since it's game time, this timer will stop
            when pausing or freezing and also run slower or faster according to <see cref="P:Duality.Time.TimeScale"/>.
            </summary>
        </member>
        <member name="P:Duality.Time.TimeMult">
            <summary>
            [GET] Multiply any frame-independend movement or change with this factor.
            It also applies the time scale you set.
            </summary>
        </member>
        <member name="P:Duality.Time.TimeScale">
            <summary>
            [GET / SET] Specifies how fast game time runs compared to real time i.e. how
            fast the game runs. May be used for slow motion effects.
            </summary>
        </member>
        <member name="P:Duality.Time.FrameCount">
            <summary>
            [GET] The number of frames passed since startup
            </summary>
        </member>
        <member name="T:Duality.Resources.RenderTarget">
            <summary>
            Instead of rendering to screen, RenderTargets can serve as an alternative drawing surface for a <see cref="T:Duality.Components.Camera"/>.
            The image is applied to one or several <see cref="T:Duality.Resources.Texture">Textures</see>. By default, only the first attached Texture
            is actually used, but you can use a custom <see cref="T:Duality.Resources.FragmentShader"/> to use all available Textures for storing
            information.
            </summary>
            <seealso cref="T:Duality.Resources.Texture"/>
        </member>
        <member name="F:Duality.Resources.RenderTarget.FileExt">
            <summary>
            A RenderTarget resources file extension.
            </summary>
        </member>
        <member name="F:Duality.Resources.RenderTarget.None">
            <summary>
            Refers to a null reference RenderTarget.
            </summary>
            <seealso cref="F:Duality.ContentRef`1.Null"/>
        </member>
        <member name="M:Duality.Resources.RenderTarget.Bind(Duality.ContentRef{Duality.Resources.RenderTarget})">
            <summary>
            Binds a RenderTarget in order to use it.
            </summary>
            <param name="target">The RenderTarget to be bound.</param>
        </member>
        <member name="M:Duality.Resources.RenderTarget.#ctor">
            <summary>
            Creates a new, empty RenderTarget
            </summary>
        </member>
        <member name="M:Duality.Resources.RenderTarget.#ctor(System.Boolean,Duality.ContentRef{Duality.Resources.Texture}[])">
            <summary>
            Creates a new RenderTarget based on a set of <see cref="T:Duality.Resources.Texture">Textures</see>
            </summary>
            <param name="multisample">Indicates whether <see cref="P:Duality.Resources.RenderTarget.Multisampled">Multisampling</see> in reqested.</param>
            <param name="targets">An array of <see cref="T:Duality.Resources.Texture">Textures</see> used as data destination.</param>
        </member>
        <member name="M:Duality.Resources.RenderTarget.FreeOpenGLRes">
            <summary>
            Frees up any OpenGL resources that this RenderTarget might have occupied.
            </summary>
        </member>
        <member name="M:Duality.Resources.RenderTarget.SetupOpenGLRes">
            <summary>
            Sets up all necessary OpenGL resources for this RenderTarget.
            </summary>
        </member>
        <member name="P:Duality.Resources.RenderTarget.BoundRT">
            <summary>
            [GET] The currently bound RenderTarget
            </summary>
        </member>
        <member name="P:Duality.Resources.RenderTarget.MaxRenderTargetSamples">
            <summary>
            [GET] The maximum number of available <see cref="P:Duality.Resources.RenderTarget.Multisampled">Antialiazing</see> samples.
            </summary>
        </member>
        <member name="P:Duality.Resources.RenderTarget.Multisampled">
            <summary>
            [GET / SET] Whether this RenderTarget is multisampled.
            </summary>
        </member>
        <member name="P:Duality.Resources.RenderTarget.Targets">
            <summary>
            [GET / SET] An array of <see cref="T:Duality.Resources.Texture">Textures</see> used as data
            destination by this RenderTarget.
            </summary>
        </member>
        <member name="P:Duality.Resources.RenderTarget.Width">
            <summary>
            [GET] Width of this RenderTarget. This values is derived by its <see cref="P:Duality.Resources.RenderTarget.Targets"/>.
            </summary>
        </member>
        <member name="P:Duality.Resources.RenderTarget.Height">
            <summary>
            [GET] Height of this RenderTarget. This values is derived by its <see cref="P:Duality.Resources.RenderTarget.Targets"/>.
            </summary>
        </member>
        <member name="P:Duality.Resources.RenderTarget.UVRatio">
            <summary>
            [GET] UVRatio of this RenderTarget. This values is derived by its <see cref="P:Duality.Resources.RenderTarget.Targets"/>.
            </summary>
        </member>
        <member name="P:Duality.Resources.RenderTarget.Samples">
            <summary>
            [GET] The number of <see cref="P:Duality.Resources.RenderTarget.Multisampled">Antialiazing</see> samples this RenderTarget uses.
            </summary>
        </member>
        <member name="T:Duality.ObjectManagers.RendererManager">
            <summary>
            Manages a set of <see cref="T:Duality.Components.Renderer">Renderers</see> and exposes suitable object enumerations as well as un/registeration events.
            If a registered object has been disposed, it will be automatically unregistered.
            </summary>
        </member>
        <member name="M:Duality.ObjectManagers.RendererManager.QueryVisible(Duality.IDrawDevice)">
            <summary>
            Enumerates all <see cref="T:Duality.Components.Renderer">Renderers</see> that are visible to the specified <see cref="T:Duality.IDrawDevice"/>.
            </summary>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="T:Duality.Log">
            <summary>
            Listens for log entries and writes them to registered <see cref="T:Duality.ILogOutput">ILogOutputs</see>.
            </summary>
        </member>
        <member name="M:Duality.Log.#ctor(System.String,Duality.Log.SharedState,Duality.ILogOutput[])">
            <summary>
            Creates a new Log.
            </summary>
            <param name="name">The Logs name.</param>
            <param name="stateHolder">The Logs state value holder that may be shared with other Logs.</param>
            <param name="output">It will be initially connected to the specified outputs.</param>
        </member>
        <member name="M:Duality.Log.#ctor(System.String,Duality.ILogOutput[])">
            <summary>
            Creates a new Log.
            </summary>
            <param name="name">The Logs name</param>
            <param name="output">It will be initially connected to the specified outputs.</param>
        </member>
        <member name="M:Duality.Log.RegisterOutput(Duality.ILogOutput)">
            <summary>
            Registers an output to write log entries to.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Duality.Log.UnregisterOutput(Duality.ILogOutput)">
            <summary>
            Unregisters a registered output.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Duality.Log.Reset">
            <summary>
            Resets the Logs timing and "written once" counters. Outputs will remain attached.
            </summary>
        </member>
        <member name="M:Duality.Log.PushIndent">
            <summary>
            Increases the current log entry indent.
            </summary>
        </member>
        <member name="M:Duality.Log.PopIndent">
            <summary>
            Decreases the current log entry indent.
            </summary>
        </member>
        <member name="M:Duality.Log.Write(System.String,System.Object[])">
            <summary>
            Writes a new log entry.
            </summary>
            <param name="format"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Log.WriteWarning(System.String,System.Object[])">
            <summary>
            Writes a new warning log entry.
            </summary>
            <param name="format"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Log.WriteError(System.String,System.Object[])">
            <summary>
            Writes a new error log entry.
            </summary>
            <param name="format"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Log.WriteOnce(System.String,System.Object[])">
            <summary>
            Writes a new log entry once. If the same message is attempted to be written again, it will be ignored.
            </summary>
            <param name="format"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Log.WriteWarningOnce(System.String,System.Object[])">
            <summary>
            Writes a warning new log entry once. If the same message is attempted to be written again, it will be ignored.
            </summary>
            <param name="format"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Log.WriteErrorOnce(System.String,System.Object[])">
            <summary>
            Writes a error new log entry once. If the same message is attempted to be written again, it will be ignored.
            </summary>
            <param name="format"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Log.WriteTimed(System.Int32,System.String,System.String,System.Object[])">
            <summary>
            Writes a new log entry, but a maximum of one entry per fixed amount of time.
            </summary>
            <param name="delayMs">The time span in which only one message is written.</param>
            <param name="timerId">The id of the timer that is used for measuring the time span. Simply use any string id that seems to fit.</param>
            <param name="format"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Log.WriteWarningTimed(System.Int32,System.String,System.String,System.Object[])">
            <summary>
            Writes a new warning log entry, but a maximum of one entry per fixed amount of time.
            </summary>
            <param name="delayMs">The time span in which only one message is written.</param>
            <param name="timerId">The id of the timer that is used for measuring the time span. Simply use any string id that seems to fit.</param>
            <param name="format"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Log.WriteErrorTimed(System.Int32,System.String,System.String,System.Object[])">
            <summary>
            Writes a new error log entry, but a maximum of one entry per fixed amount of time.
            </summary>
            <param name="delayMs">The time span in which only one message is written.</param>
            <param name="timerId">The id of the timer that is used for measuring the time span. Simply use any string id that seems to fit.</param>
            <param name="format"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Log.CurrentStackFrame(System.Int32)">
            <summary>
            Retrieves the current stack frame.
            </summary>
            <param name="skipFrames">The number of frames to skip. This function itsself is omitted by default.</param>
            <returns>The caller's stack frame.</returns>
        </member>
        <member name="M:Duality.Log.CurrentMethod(System.Int32,System.Boolean)">
            <summary>
            Returns the name of the caller method.
            </summary>
            <param name="skipFrames">The number of frames to skip. This function itsself is omitted by default.</param>
            <param name="includeDeclaringType">If true, the methods declaring type is included in the returned name.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.Log.CurrentType(System.Int32)">
            <summary>
            Returns the name of the caller methods declaring type.
            </summary>
            <param name="skipFrames">The number of frames to skip. This function itsself is omitted by default.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.Log.Type(System.Type)">
            <summary>
            Returns a string that can be used for representing a <see cref="T:System.Type"/> in log entries.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Log.MethodInfo(System.Reflection.MethodInfo,System.Boolean)">
            <summary>
            Returns a string that can be used for representing a method in log entries.
            </summary>
            <param name="info"></param>
            <param name="includeDeclaringType">If true, the methods declaring type is included in the returned name.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.Log.MethodInfo(System.Reflection.MethodBase,System.Boolean)">
            <summary>
            Returns a string that can be used for representing a method or constructor in log entries.
            </summary>
            <param name="info"></param>
            <param name="includeDeclaringType">If true, the methods or constructors declaring type is included in the returned name.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.Log.ConstructorInfo(System.Reflection.ConstructorInfo,System.Boolean)">
            <summary>
            Returns a string that can be used for representing a constructor in log entries.
            </summary>
            <param name="info"></param>
            <param name="includeDeclaringType">If true, the constructors declaring type is included in the returned name.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.Log.PropertyInfo(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Returns a string that can be used for representing a property in log entries.
            </summary>
            <param name="info"></param>
            <param name="includeDeclaringType">If true, the properties declaring type is included in the returned name.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.Log.FieldInfo(System.Reflection.FieldInfo,System.Boolean)">
            <summary>
            Returns a string that can be used for representing a field in log entries.
            </summary>
            <param name="info"></param>
            <param name="includeDeclaringType">If true, the fields declaring type is included in the returned name.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.Log.EventInfo(System.Reflection.EventInfo,System.Boolean)">
            <summary>
            Returns a string that can be used for representing an event in log entries.
            </summary>
            <param name="info"></param>
            <param name="includeDeclaringType">If true, the events declaring type is included in the returned name.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.Log.MemberInfo(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Returns a string that can be used for representing a(ny) member in log entries.
            </summary>
            <param name="info"></param>
            <param name="includeDeclaringType">If true, the members declaring type is included in the returned name.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.Log.Exception(System.Exception,System.Boolean)">
            <summary>
            Returns a string that can be used for representing an exception in log entries.
            It usually does not include the full call stack and is significantly shorter than
            an <see cref="T:System.Exception">Exceptions</see> ToString method.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="P:Duality.Log.Game">
            <summary>
            [GET] A log for game-related entries. Use this for logging data from game plugins.
            </summary>
        </member>
        <member name="P:Duality.Log.Core">
            <summary>
            [GET] A log for core-related entries. This is normally only used by Duality itsself.
            </summary>
        </member>
        <member name="P:Duality.Log.Editor">
            <summary>
            [GET] A log for editor-related entries. This is used by the Duality editor and its plugins.
            </summary>
        </member>
        <member name="P:Duality.Log.LogData">
            <summary>
            [GET] Returns an object storing all log entries that have been made since startup
            </summary>
        </member>
        <member name="P:Duality.Log.Name">
            <summary>
            [GET] The Log's name
            </summary>
        </member>
        <member name="P:Duality.Log.Prefix">
            <summary>
            [GET] The Log's prefix, which is automatically determined by its name.
            </summary>
        </member>
        <member name="P:Duality.Log.Indent">
            <summary>
            [GET] The Log's current indent level.
            </summary>
        </member>
        <member name="T:Duality.Log.SharedState">
            <summary>
            Holds a Logs state values.
            </summary>
        </member>
        <member name="P:Duality.Log.SharedState.Indent">
            <summary>
            [GET / SET] The Logs indent value.
            </summary>
        </member>
        <member name="T:Duality.LogMessageType">
            <summary>
            The type of a log message / entry.
            </summary>
        </member>
        <member name="F:Duality.LogMessageType.Message">
            <summary>
            Just a regular message. Nothing special. Neutrally informs about what's going on.
            </summary>
        </member>
        <member name="F:Duality.LogMessageType.Warning">
            <summary>
            A warning message. It informs about unexpected data or behaviour that might not have caused any errors yet, but can lead to them.
            It might also be used for expected errors from which Duality is likely to recover.
            </summary>
        </member>
        <member name="F:Duality.LogMessageType.Error">
            <summary>
            An error message. It informs about an unexpected and/or critical error that has occured.
            </summary>
        </member>
        <member name="M:Duality.OggVorbis.OV.StreamChunk(System.IntPtr,System.IO.MemoryStream@,System.Int32@,System.Int32@)">
            <summary>
            Streams a pcm chunk from an opened ogg vorbis file to the specified OpenAL buffer.
            </summary>
            <param name="alBufferId">OpenAL buffer id to stream to</param>
            <param name="vFPtr">Ogg Vorbis file handle</param>
            <returns>Returns false, if EOF is reached.</returns>
        </member>
        <member name="T:Duality.ReflectionInfo">
            <summary>
            Provides Reflection data on Properties and Fields.
            </summary>
        </member>
        <member name="T:Duality.Alignment">
            <summary>
            Represents a 2D spatial alignment.
            </summary>
        </member>
        <member name="F:Duality.Alignment.Center">
            <summary>
            Align to its center.
            </summary>
        </member>
        <member name="F:Duality.Alignment.Left">
            <summary>
            Align to its left.
            </summary>
        </member>
        <member name="F:Duality.Alignment.Right">
            <summary>
            Align to its right.
            </summary>
        </member>
        <member name="F:Duality.Alignment.Top">
            <summary>
            Align to its top.
            </summary>
        </member>
        <member name="F:Duality.Alignment.Bottom">
            <summary>
            Align to its bottom.
            </summary>
        </member>
        <member name="F:Duality.Alignment.TopLeft">
            <summary>
            Align to its top left.
            </summary>
        </member>
        <member name="F:Duality.Alignment.TopRight">
            <summary>
            Align to its top right.
            </summary>
        </member>
        <member name="F:Duality.Alignment.BottomLeft">
            <summary>
            Align to its bottom left.
            </summary>
        </member>
        <member name="F:Duality.Alignment.BottomRight">
            <summary>
            Align to its bottom right.
            </summary>
        </member>
        <member name="T:Duality.VertexFormat.VertexP3T2">
            <summary>
            Vertex data providing each vertex a position (3x4 byte) and texture coordinate (2x4 byte)
            </summary>
        </member>
        <member name="F:Duality.VertexFormat.VertexP3T2.OffsetPos">
            <summary>
            Byte offset for the position.
            </summary>
        </member>
        <member name="F:Duality.VertexFormat.VertexP3T2.OffsetTex0">
            <summary>
            Byte offset for the texture coordinate.
            </summary>
        </member>
        <member name="F:Duality.VertexFormat.VertexP3T2.Size">
            <summary>
            Total size in bytes.
            </summary>
        </member>
        <member name="F:Duality.VertexFormat.VertexP3T2.Pos">
            <summary>
            The vertices position.
            </summary>
        </member>
        <member name="F:Duality.VertexFormat.VertexP3T2.TexCoord">
            <summary>
            The vertices texture coordinate.
            </summary>
        </member>
        <member name="T:Duality.Serialization.DataType">
            <summary>
            This enum is used by Dualitys serializers to distinguish between certain kinds of data.
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.Unknown">
            <summary>
            Unknown data type
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.Bool">
            <summary>
            A <see cref="T:System.Boolean"/> value
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.Byte">
            <summary>
            A <see cref="T:System.Byte"/> value
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.SByte">
            <summary>
            A <see cref="T:System.SByte"/> value
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.Short">
            <summary>
            A <see cref="T:System.Int16"/> value
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.UShort">
            <summary>
            A <see cref="T:System.UInt16"/> value
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.Int">
            <summary>
            A <see cref="T:System.Int32"/> value
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.UInt">
            <summary>
            A <see cref="T:System.UInt32"/> value
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.Long">
            <summary>
            A <see cref="T:System.Int64"/> value
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.ULong">
            <summary>
            A <see cref="T:System.UInt64"/> value
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.Float">
            <summary>
            A <see cref="T:System.Single"/> value
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.Double">
            <summary>
            A <see cref="T:System.Double"/> value
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.Decimal">
            <summary>
            A <see cref="T:System.Decimal"/> value
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.Char">
            <summary>
            A <see cref="T:System.Char"/> value
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.Type">
            <summary>
            A <see cref="T:System.Type"/> value
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.FieldInfo">
            <summary>
            A <see cref="T:System.Reflection.FieldInfo"/> value
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.PropertyInfo">
            <summary>
            A <see cref="T:System.Reflection.PropertyInfo"/> value
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.MethodInfo">
            <summary>
            A <see cref="T:System.Reflection.MethodInfo"/> value
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.ConstructorInfo">
            <summary>
            A <see cref="T:System.Reflection.ConstructorInfo"/> value
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.EventInfo">
            <summary>
            A <see cref="T:System.Reflection.EventInfo"/> value
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.Delegate">
            <summary>
            A <see cref="T:System.Delegate"/> value
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.Enum">
            <summary>
            A <see cref="T:System.Enum"/> value
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.String">
            <summary>
            A <see cref="T:System.String"/> value
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.Array">
            <summary>
            A <see cref="T:System.Array"/> value
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.Class">
            <summary>
            A class object
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.Struct">
            <summary>
            A struct object
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.ObjectRef">
            <summary>
            The reference to an object
            </summary>
        </member>
        <member name="T:Duality.Serialization.ExtMethodsDataType">
            <summary>
            Extension methods for <see cref="T:Duality.Serialization.DataType"/>
            </summary>
        </member>
        <member name="M:Duality.Serialization.ExtMethodsDataType.IsPrimitiveType(Duality.Serialization.DataType)">
            <summary>
            Returns whether the <see cref="T:Duality.Serialization.DataType"/> represents a primitive data type.
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Serialization.ExtMethodsDataType.IsMemberInfoType(Duality.Serialization.DataType)">
            <summary>
            Returns whether the <see cref="T:Duality.Serialization.DataType"/> represents a <see cref="T:System.Reflection.MemberInfo"/> type.
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Serialization.ExtMethodsDataType.ToActualType(Duality.Serialization.DataType)">
            <summary>
            Returns the actual <see cref="T:System.Type"/> that is associated with the <see cref="T:Duality.Serialization.DataType"/>.
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="T:Duality.SoundType">
            <summary>
            Describes the type of a sound. This is used for determining which specific
            volume settings affect each sound.
            </summary>
        </member>
        <member name="F:Duality.SoundType.EffectWorld">
            <summary>
            A sound effect taking place in the game world.
            </summary>
        </member>
        <member name="F:Duality.SoundType.EffectUI">
            <summary>
            A User Interface sound effect.
            </summary>
        </member>
        <member name="F:Duality.SoundType.Music">
            <summary>
            A sound that is considered being game music.
            </summary>
        </member>
        <member name="F:Duality.SoundType.Speech">
            <summary>
            A sound that is considered being spoken language.
            </summary>
        </member>
        <member name="T:Duality.SoundInstance">
            <summary>
            An instance of a <see cref="T:Duality.Resources.Sound"/>.
            </summary>
        </member>
        <member name="M:Duality.SoundInstance.Stop">
            <summary>
            Stops the sound immediately.
            </summary>
        </member>
        <member name="M:Duality.SoundInstance.FadeTo(System.Single,System.Single)">
            <summary>
            Fades the sound to a specific target value.
            </summary>
            <param name="target">The target value to fade to.</param>
            <param name="timeSeconds">The time in seconds the fading will take.</param>
        </member>
        <member name="M:Duality.SoundInstance.BeginFadeIn(System.Single)">
            <summary>
            Resets the sounds current fade value to zero and starts to fade it in.
            </summary>
            <param name="timeSeconds">The time in seconds the fading will take.</param>
        </member>
        <member name="M:Duality.SoundInstance.FadeIn(System.Single)">
            <summary>
            Fades the sound in from its current fade value. Note that SoundInstances are
            initialized with a fade value of 1.0f because they aren't faded in generally. 
            To achieve a regular "fade in" effect, you should use <see cref="M:Duality.SoundInstance.BeginFadeIn(System.Single)"/>.
            </summary>
            <param name="timeSeconds">The time in seconds the fading will take.</param>
        </member>
        <member name="M:Duality.SoundInstance.FadeOut(System.Single)">
            <summary>
            Fades out the sound.
            </summary>
            <param name="timeSeconds">The time in seconds the fading will take.</param>
        </member>
        <member name="M:Duality.SoundInstance.StopFade">
            <summary>
            Halts the current fading, keepinf the current fade value as fade target.
            </summary>
        </member>
        <member name="M:Duality.SoundInstance.Update">
            <summary>
            Updates the SoundInstance
            </summary>
        </member>
        <member name="P:Duality.SoundInstance.Disposed">
            <summary>
            [GET] Whether the SoundInstance has been disposed. Disposed objects are not to be
            used anymore and should be treated as null or similar.
            </summary>
        </member>
        <member name="P:Duality.SoundInstance.SoundRef">
            <summary>
            [GET] A referene to the <see cref="T:Duality.Resources.Sound"/> that is being played by
            this SoundInstance.
            </summary>
        </member>
        <member name="P:Duality.SoundInstance.AlSource">
            <summary>
            [GET] Internal handle of the SoundInstances OpenAL source.
            </summary>
        </member>
        <member name="P:Duality.SoundInstance.AttachedTo">
            <summary>
            [GET] The <see cref="T:Duality.GameObject"/> that this SoundInstance is attached to.
            </summary>
        </member>
        <member name="P:Duality.SoundInstance.Is3D">
            <summary>
            [GET] Whether the sound is played 3d, "in space" or not.
            </summary>
        </member>
        <member name="P:Duality.SoundInstance.Priority">
            <summary>
            [GET] The SoundInstances priority.
            </summary>
        </member>
        <member name="P:Duality.SoundInstance.CurrentFade">
            <summary>
            [GET] When fading in or out, this value represents the current fading state.
            </summary>
        </member>
        <member name="P:Duality.SoundInstance.FadeTarget">
            <summary>
            [GET] The target value for the current fade. Usually 0.0f or 1.0f for fadint out / in.
            </summary>
        </member>
        <member name="P:Duality.SoundInstance.PlayTime">
            <summary>
            [GET] The time in seconds that this SoundInstance has been playing its sound.
            This value is affected by the sounds <see cref="P:Duality.SoundInstance.Pitch"/>.
            </summary>
        </member>
        <member name="P:Duality.SoundInstance.Volume">
            <summary>
            [GET / SET] The sounds local volume factor.
            </summary>
        </member>
        <member name="P:Duality.SoundInstance.Pitch">
            <summary>
            [GET / SET] The sounds local pitch factor.
            </summary>
        </member>
        <member name="P:Duality.SoundInstance.Looped">
            <summary>
            [GET / SET] Whether the sound is played in a loop.
            </summary>
        </member>
        <member name="P:Duality.SoundInstance.Paused">
            <summary>
            [GET / SET] Whether the sound is currently paused.
            </summary>
        </member>
        <member name="P:Duality.SoundInstance.Pos">
            <summary>
            [GET / SET] The sounds position in space. If it is <see cref="P:Duality.SoundInstance.AttachedTo">attached</see> to a GameObject,
            this value is considered relative to it.
            </summary>
        </member>
        <member name="P:Duality.SoundInstance.Vel">
            <summary>
            [GET / SET] The sounds velocity. If it is <see cref="P:Duality.SoundInstance.AttachedTo">attached</see> to a GameObject,
            this value is considered relative to it.
            </summary>
        </member>
        <member name="T:Duality.Resources.DrawTechnique">
            <summary>
            DrawTechniques represent the method by which a set of colors, <see cref="T:Duality.Resources.Texture">Textures</see> and
            vertex data is applied to screen. 
            </summary>
            <seealso cref="T:Duality.Resources.Material"/>
            <seealso cref="T:Duality.Resources.ShaderProgram"/>
            <seealso cref="T:Duality.BlendMode"/>
        </member>
        <member name="F:Duality.Resources.DrawTechnique.FileExt">
            <summary>
            A DrawTechnique resources file extension.
            </summary>
        </member>
        <member name="F:Duality.Resources.DrawTechnique.VirtualContentPath">
            <summary>
            (Virtual) base path for Duality's embedded default DrawTechniques.
            </summary>
        </member>
        <member name="F:Duality.Resources.DrawTechnique.ContentDir_SmoothAnim">
            <summary>
            (Virtual) base path for Duality's embedded SmoothAnim DrawTechniques.
            </summary>
        </member>
        <member name="F:Duality.Resources.DrawTechnique.ContentPath_Solid">
            <summary>
            (Virtual) path of the <see cref="P:Duality.Resources.DrawTechnique.Solid"/> DrawTechnique.
            </summary>
        </member>
        <member name="F:Duality.Resources.DrawTechnique.ContentPath_Mask">
            <summary>
            (Virtual) path of the <see cref="P:Duality.Resources.DrawTechnique.Mask"/> DrawTechnique.
            </summary>
        </member>
        <member name="F:Duality.Resources.DrawTechnique.ContentPath_Add">
            <summary>
            (Virtual) path of the <see cref="P:Duality.Resources.DrawTechnique.Add"/> DrawTechnique.
            </summary>
        </member>
        <member name="F:Duality.Resources.DrawTechnique.ContentPath_Alpha">
            <summary>
            (Virtual) path of the <see cref="P:Duality.Resources.DrawTechnique.Alpha"/> DrawTechnique.
            </summary>
        </member>
        <member name="F:Duality.Resources.DrawTechnique.ContentPath_Multiply">
            <summary>
            (Virtual) path of the <see cref="P:Duality.Resources.DrawTechnique.Multiply"/> DrawTechnique.
            </summary>
        </member>
        <member name="F:Duality.Resources.DrawTechnique.ContentPath_Light">
            <summary>
            (Virtual) path of the <see cref="P:Duality.Resources.DrawTechnique.Light"/> DrawTechnique.
            </summary>
        </member>
        <member name="F:Duality.Resources.DrawTechnique.ContentPath_Invert">
            <summary>
            (Virtual) path of the <see cref="P:Duality.Resources.DrawTechnique.Invert"/> DrawTechnique.
            </summary>
        </member>
        <member name="F:Duality.Resources.DrawTechnique.ContentPath_Picking">
            <summary>
            (Virtual) path of the <see cref="P:Duality.Resources.DrawTechnique.Picking"/> DrawTechnique.
            </summary>
        </member>
        <member name="F:Duality.Resources.DrawTechnique.ContentPath_SmoothAnim_Solid">
            <summary>
            (Virtual) path of the <see cref="P:Duality.Resources.DrawTechnique.SmoothAnim_Solid"/> DrawTechnique.
            </summary>
        </member>
        <member name="F:Duality.Resources.DrawTechnique.ContentPath_SmoothAnim_Mask">
            <summary>
            (Virtual) path of the <see cref="P:Duality.Resources.DrawTechnique.SmoothAnim_Mask"/> DrawTechnique.
            </summary>
        </member>
        <member name="F:Duality.Resources.DrawTechnique.ContentPath_SmoothAnim_Add">
            <summary>
            (Virtual) path of the <see cref="P:Duality.Resources.DrawTechnique.SmoothAnim_Add"/> DrawTechnique.
            </summary>
        </member>
        <member name="F:Duality.Resources.DrawTechnique.ContentPath_SmoothAnim_Alpha">
            <summary>
            (Virtual) path of the <see cref="P:Duality.Resources.DrawTechnique.SmoothAnim_Alpha"/> DrawTechnique.
            </summary>
        </member>
        <member name="F:Duality.Resources.DrawTechnique.ContentPath_SmoothAnim_Multiply">
            <summary>
            (Virtual) path of the <see cref="P:Duality.Resources.DrawTechnique.SmoothAnim_Multiply"/> DrawTechnique.
            </summary>
        </member>
        <member name="F:Duality.Resources.DrawTechnique.ContentPath_SmoothAnim_Light">
            <summary>
            (Virtual) path of the <see cref="P:Duality.Resources.DrawTechnique.SmoothAnim_Light"/> DrawTechnique.
            </summary>
        </member>
        <member name="F:Duality.Resources.DrawTechnique.ContentPath_SmoothAnim_Invert">
            <summary>
            (Virtual) path of the <see cref="P:Duality.Resources.DrawTechnique.SmoothAnim_Invert"/> DrawTechnique.
            </summary>
        </member>
        <member name="F:Duality.Resources.DrawTechnique.MaxVertexTypes">
            <summary>
            The maximum number of vertex types.
            </summary>
        </member>
        <member name="F:Duality.Resources.DrawTechnique.VertexType_Unknown">
            <summary>
            Unknown format.
            </summary>
        </member>
        <member name="F:Duality.Resources.DrawTechnique.VertexType_P3">
            <summary>
            <see cref="T:Duality.VertexFormat.VertexP3"/> format.
            </summary>
        </member>
        <member name="F:Duality.Resources.DrawTechnique.VertexType_C1P3">
            <summary>
            <see cref="T:Duality.VertexFormat.VertexC1P3"/> format.
            </summary>
        </member>
        <member name="F:Duality.Resources.DrawTechnique.VertexType_C1P3T2">
            <summary>
            <see cref="T:Duality.VertexFormat.VertexC1P3T2"/> format.
            </summary>
        </member>
        <member name="F:Duality.Resources.DrawTechnique.VertexType_C1P3T4A1">
            <summary>
            <see cref="T:Duality.VertexFormat.VertexC1P3T4A1"/> format.
            </summary>
        </member>
        <member name="F:Duality.Resources.DrawTechnique.VertexType_P3T2">
            <summary>
            <see cref="T:Duality.VertexFormat.VertexP3T2"/> format.
            </summary>
        </member>
        <member name="M:Duality.Resources.DrawTechnique.#ctor">
            <summary>
            Creates a new, default DrawTechnique
            </summary>
        </member>
        <member name="M:Duality.Resources.DrawTechnique.#ctor(Duality.BlendMode)">
            <summary>
            Creates a new DrawTechnique that uses the specified <see cref="T:Duality.BlendMode"/>.
            </summary>
            <param name="blendType"></param>
        </member>
        <member name="M:Duality.Resources.DrawTechnique.#ctor(Duality.BlendMode,Duality.ContentRef{Duality.Resources.ShaderProgram},System.Int32)">
            <summary>
            Creates a new DrawTechnique using the specified <see cref="T:Duality.BlendMode"/> and <see cref="T:Duality.Resources.ShaderProgram"/>.
            </summary>
            <param name="blendType"></param>
            <param name="shader"></param>
            <param name="formatPref"></param>
        </member>
        <member name="M:Duality.Resources.DrawTechnique.PreprocessBatch``1(Duality.IDrawDevice,Duality.Resources.BatchInfo,Duality.VertexMode@,``0[]@)">
            <summary>
            Performs a preprocessing operation for incoming vertices. Does nothing by default but may be overloaded, if needed.
            </summary>
            <typeparam name="T">The incoming vertex type</typeparam>
            <param name="material"><see cref="T:Duality.Resources.Material"/> information for the current batch.</param>
            <param name="vertexMode">The mode of incoming vertex data.</param>
            <param name="vertices">Incoming vertex data.</param>
        </member>
        <member name="M:Duality.Resources.DrawTechnique.SetupForRendering(Duality.IDrawDevice,Duality.Resources.BatchInfo,Duality.Resources.DrawTechnique)">
            <summary>
            Sets up the appropriate OpenGL rendering state for this DrawTechnique.
            </summary>
            <param name="lastTechnique">The last DrawTechnique that has been set up. This parameter is optional, but
            specifying it will increase performance by reducing redundant state changes.</param>
            <param name="textures">A set of <see cref="T:Duality.Resources.Texture">Textures</see> to use.</param>
            <param name="uniforms">A set of <see cref="T:Duality.Resources.ShaderVarInfo">uniform values</see> to apply.</param>
        </member>
        <member name="M:Duality.Resources.DrawTechnique.FinishRendering">
            <summary>
            Resets the OpenGL rendering state after finishing DrawTechnique-Setups. Only call this when there are no more
            DrawTechniques to follow directly.
            </summary>
        </member>
        <member name="M:Duality.Resources.DrawTechnique.SetupBlendType(Duality.BlendMode,System.Boolean)">
            <summary>
            Sets up OpenGL rendering state according to a certain <see cref="T:Duality.BlendMode"/>.
            </summary>
            <param name="mode">The BlendMode to set up.</param>
            <param name="depthWrite">Whether or not to allow writing depth values.</param>
        </member>
        <member name="M:Duality.Resources.DrawTechnique.SelectShader">
            <summary>
            Dynamically selects the <see cref="T:Duality.Resources.ShaderProgram"/> to use. Just returns <see cref="P:Duality.Resources.DrawTechnique.Shader"/> by default.
            </summary>
            <returns>The selected <see cref="T:Duality.Resources.ShaderProgram"/>.</returns>
        </member>
        <member name="M:Duality.Resources.DrawTechnique.PrepareRendering(Duality.IDrawDevice,Duality.Resources.BatchInfo)">
            <summary>
            Prepares rendering using this DrawTechnique.
            </summary>
            <param name="device"></param>
            <param name="material"></param>
        </member>
        <member name="P:Duality.Resources.DrawTechnique.Solid">
            <summary>
            Renders solid geometry without utilizing the alpha channel. This is the fastest default DrawTechnique.
            </summary>
        </member>
        <member name="P:Duality.Resources.DrawTechnique.Mask">
            <summary>
            Renders alpha-masked solid geometry. This is the recommended DrawTechnique for regular sprite rendering.
            If multisampling is available, it is utilized to smooth masked edges.
            </summary>
        </member>
        <member name="P:Duality.Resources.DrawTechnique.Add">
            <summary>
            Renders additive geometry. Ideal for glow effects.
            </summary>
        </member>
        <member name="P:Duality.Resources.DrawTechnique.Alpha">
            <summary>
            Renders geometry and using the alpha channel. However, for stencil-sharp alpha edges, <see cref="P:Duality.Resources.DrawTechnique.Mask"/> might
            be sufficient and is a lot faster. Consider using it.
            </summary>
        </member>
        <member name="P:Duality.Resources.DrawTechnique.Multiply">
            <summary>
            Renders geometry multiplying the existing background with incoming color values. Can be used for shadowing effects.
            </summary>
        </member>
        <member name="P:Duality.Resources.DrawTechnique.Light">
            <summary>
            Renders geometry adding incoming color values weighted based on the existing background. Can be used for lighting effects.
            </summary>
        </member>
        <member name="P:Duality.Resources.DrawTechnique.Invert">
            <summary>
            Renders geometry inverting the background color.
            </summary>
        </member>
        <member name="P:Duality.Resources.DrawTechnique.Picking">
            <summary>
            Renders geometry for a picking operation. This isn't used for regular rendering.
            </summary>
        </member>
        <member name="P:Duality.Resources.DrawTechnique.SmoothAnim_Solid">
            <summary>
            Renders SmoothAnim solid geometry without utilizing the alpha channel. This is the fastest default DrawTechnique.
            </summary>
        </member>
        <member name="P:Duality.Resources.DrawTechnique.SmoothAnim_Mask">
            <summary>
            Renders SmoothAnim alpha-masked solid geometry. This is the recommended DrawTechnique for regular sprite rendering.
            If multisampling is available, it is utilized to smooth masked edges.
            </summary>
        </member>
        <member name="P:Duality.Resources.DrawTechnique.SmoothAnim_Add">
            <summary>
            Renders SmoothAnim additive geometry. Ideal for glow effects.
            </summary>
        </member>
        <member name="P:Duality.Resources.DrawTechnique.SmoothAnim_Alpha">
            <summary>
            Renders SmoothAnim geometry and using the alpha channel. However, for stencil-sharp alpha edges, <see cref="P:Duality.Resources.DrawTechnique.Mask"/> might
            be sufficient and is a lot faster. Consider using it.
            </summary>
        </member>
        <member name="P:Duality.Resources.DrawTechnique.SmoothAnim_Multiply">
            <summary>
            Renders SmoothAnim geometry multiplying the existing background with incoming color values. Can be used for shadowing effects.
            </summary>
        </member>
        <member name="P:Duality.Resources.DrawTechnique.SmoothAnim_Light">
            <summary>
            Renders SmoothAnim geometry adding incoming color values weighted based on the existing background. Can be used for lighting effects.
            </summary>
        </member>
        <member name="P:Duality.Resources.DrawTechnique.SmoothAnim_Invert">
            <summary>
            Renders SmoothAnim geometry inverting the background color.
            </summary>
        </member>
        <member name="P:Duality.Resources.DrawTechnique.MaskUseAlphaToCoverage">
            <summary>
            [GET] Returns whether the <see cref="F:Duality.BlendMode.Mask">masked</see> DrawTechniques utilize OpenGL Alpha-to-Coverage to
            smooth alpha-edges in masked rendering.
            </summary>
        </member>
        <member name="P:Duality.Resources.DrawTechnique.Blending">
            <summary>
            [GET / SET] Specifies how incoming color values interact with the existing background color.
            </summary>
        </member>
        <member name="P:Duality.Resources.DrawTechnique.Shader">
            <summary>
            [GET / SET] The <see cref="T:Duality.Resources.ShaderProgram"/> that is used for rendering.
            </summary>
        </member>
        <member name="P:Duality.Resources.DrawTechnique.PreferredVertexFormat">
            <summary>
            [GET / SET] The vertex format that is preferred by this DrawTechnique. If there is no specific preference,
            <see cref="F:Duality.Resources.DrawTechnique.VertexType_Unknown"/> is returned.
            </summary>
        </member>
        <member name="P:Duality.Resources.DrawTechnique.NeedsZSort">
            <summary>
            [GET] Returns whether this DrawTechnique requires z sorting. It is derived from its <see cref="P:Duality.Resources.DrawTechnique.Blending"/>.
            </summary>
        </member>
        <member name="P:Duality.Resources.DrawTechnique.NeedsPreprocess">
            <summary>
            [GET] Returns whether this DrawTechnique requires <see cref="M:Duality.Resources.DrawTechnique.PreprocessBatch``1(Duality.IDrawDevice,Duality.Resources.BatchInfo,Duality.VertexMode@,``0[]@)">vertex preprocessing</see>.
            This is false for all standard DrawTechniques, but may return true when deriving custom DrawTechniques.
            </summary>
        </member>
        <member name="P:Duality.Resources.DrawTechnique.NeedsPreparation">
            <summary>
            [GET] Returns whether this DrawTechnique requires any <see cref="M:Duality.Resources.DrawTechnique.PrepareRendering(Duality.IDrawDevice,Duality.Resources.BatchInfo)">rendering preparation</see>.
            This is false for all standard DrawTechniques, but may return true when deriving custom DrawTechniques.
            </summary>
        </member>
        <member name="T:Duality.Resources.ShaderVarType">
            <summary>
            The type of a <see cref="T:Duality.Resources.AbstractShader">shader</see> variable.
            </summary>
        </member>
        <member name="F:Duality.Resources.ShaderVarType.Unknown">
            <summary>
            Unknown type.
            </summary>
        </member>
        <member name="F:Duality.Resources.ShaderVarType.Int">
            <summary>
            A <see cref="T:System.Int32"/> variable.
            </summary>
        </member>
        <member name="F:Duality.Resources.ShaderVarType.Float">
            <summary>
            A <see cref="T:System.Single"/> variable.
            </summary>
        </member>
        <member name="F:Duality.Resources.ShaderVarType.Vec2">
            <summary>
            A two-dimensional vector with <see cref="T:System.Single"/> precision.
            </summary>
        </member>
        <member name="F:Duality.Resources.ShaderVarType.Vec3">
            <summary>
            A three-dimensional vector with <see cref="T:System.Single"/> precision.
            </summary>
        </member>
        <member name="F:Duality.Resources.ShaderVarType.Vec4">
            <summary>
            A four-dimensional vector with <see cref="T:System.Single"/> precision.
            </summary>
        </member>
        <member name="F:Duality.Resources.ShaderVarType.Mat2">
            <summary>
            A 2x2 matrix with <see cref="T:System.Single"/> precision.
            </summary>
        </member>
        <member name="F:Duality.Resources.ShaderVarType.Mat3">
            <summary>
            A 3x3 matrix with <see cref="T:System.Single"/> precision.
            </summary>
        </member>
        <member name="F:Duality.Resources.ShaderVarType.Mat4">
            <summary>
            A 4x4 matrix with <see cref="T:System.Single"/> precision.
            </summary>
        </member>
        <member name="F:Duality.Resources.ShaderVarType.Sampler2D">
            <summary>
            Represents a texture binding and provides lookups.
            </summary>
        </member>
        <member name="T:Duality.Resources.ShaderVarScope">
            <summary>
            The scope of a <see cref="T:Duality.Resources.AbstractShader">shader</see> variable
            </summary>
        </member>
        <member name="F:Duality.Resources.ShaderVarScope.Unknown">
            <summary>
            Unknown scope
            </summary>
        </member>
        <member name="F:Duality.Resources.ShaderVarScope.Uniform">
            <summary>
            It is a uniform variable, i.e. constant during all rendering stages
            and set once per <see cref="T:Duality.Resources.BatchInfo">draw batch</see>.
            </summary>
        </member>
        <member name="F:Duality.Resources.ShaderVarScope.Attribute">
            <summary>
            It is a vertex attribute, i.e. defined for each vertex separately.
            </summary>
        </member>
        <member name="T:Duality.Resources.ShaderVarInfo">
            <summary>
            Provides information about a <see cref="T:Duality.Resources.AbstractShader">shader</see> variable.
            </summary>
        </member>
        <member name="F:Duality.Resources.ShaderVarInfo.VarName_MainTex">
            <summary>
            The default variable name for a materials main texture.
            </summary>
        </member>
        <member name="F:Duality.Resources.ShaderVarInfo.scope">
            <summary>
            The <see cref="T:Duality.Resources.ShaderVarScope">scope</see> of the variable
            </summary>
        </member>
        <member name="F:Duality.Resources.ShaderVarInfo.type">
            <summary>
            The <see cref="T:Duality.Resources.ShaderVarType">type</see> of the variable
            </summary>
        </member>
        <member name="F:Duality.Resources.ShaderVarInfo.arraySize">
            <summary>
            If the variable is an array, this is its length. Arrays
            are only supported for <see cref="F:Duality.Resources.ShaderVarType.Int"/> and
            <see cref="F:Duality.Resources.ShaderVarType.Float"/>.
            </summary>
        </member>
        <member name="F:Duality.Resources.ShaderVarInfo.name">
            <summary>
            The name of the variable, as declared in the shader.
            </summary>
        </member>
        <member name="F:Duality.Resources.ShaderVarInfo.glVarLoc">
            <summary>
            OpenGL handle of the variables memory location.
            </summary>
        </member>
        <member name="M:Duality.Resources.ShaderVarInfo.SetupUniform(System.Single[])">
            <summary>
            Assigns the specified data to the OpenGL uniform represented by this <see cref="T:Duality.Resources.ShaderVarInfo"/>.
            </summary>
            <param name="data">Incoming uniform data.</param>
        </member>
        <member name="M:Duality.Resources.ShaderVarInfo.InitUniformData">
            <summary>
            Initializes a uniform dataset based on the type of the represented variable.
            </summary>
            <returns>A new uniform dataset</returns>
        </member>
        <member name="P:Duality.Resources.ShaderVarInfo.IsEditorVisible">
            <summary>
            [GET] Returns whether the shader variable will be visible in the editor.
            </summary>
        </member>
        <member name="T:Duality.ReflectionHelper">
            <summary>
            Provides reflection-related helper methods.
            </summary>
        </member>
        <member name="F:Duality.ReflectionHelper.BindInstanceAll">
            <summary>
            Equals <c>BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic</c>.
            </summary>
        </member>
        <member name="F:Duality.ReflectionHelper.BindStaticAll">
            <summary>
            Equals <c>BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic</c>.
            </summary>
        </member>
        <member name="F:Duality.ReflectionHelper.BindAll">
            <summary>
            Equals <c>BindingFlags.Static | BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic</c>.
            </summary>
        </member>
        <member name="M:Duality.ReflectionHelper.GetEmbeddedResourceStream(System.Reflection.Assembly,System.String)">
            <summary>
            Returns a Stream to an Assemblies embedded resource.
            </summary>
            <param name="asm">The Assembly that embeds the desired resource.</param>
            <param name="fileName">The name of the desired file.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.ReflectionHelper.CreateInstanceOf(System.Type,System.Boolean)">
            <summary>
            Creates an instance of a Type.
            </summary>
            <param name="instanceType">The Type to create an instance of.</param>
            <param name="noConstructor">If true, the instance will be generated without invoking any constructor.</param>
            <returns>An instance of the Type. Null, if instanciation wasn't possible.</returns>
        </member>
        <member name="M:Duality.ReflectionHelper.GetDefaultInstanceOf(System.Type)">
            <summary>
            Returns the default instance of a Type. Equals <c>default(T)</c>, but works for Reflection.
            </summary>
            <param name="instanceType">The Type to create a default instance of.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.ReflectionHelper.MemberInfoEquals(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
            <summary>
            Returns whether two MemberInfo objects are equal.
            </summary>
            <param name="lhs">The first MemberInfo.</param>
            <param name="rhs">The second MemberInfo.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.ReflectionHelper.GetTypeHierarchyLevel(System.Type)">
            <summary>
            Returns a Types inheritance level. The <c>object</c>-Type has an inheritance level of
            zero, each subsequent inheritance increases it by one.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.ReflectionHelper.GetAllFields(System.Type,System.Reflection.BindingFlags)">
            <summary>
            Returns all fields matching the specified bindingflags, even if private and inherited.
            </summary>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.ReflectionHelper.VisitObjectsDeep``1(System.Object,System.Func{``0,``0})">
            <summary>
            Visits all fields of an object and all its sub-objects. This is likely to be a very expensive operation.
            </summary>
            <param name="type"></param>
            <param name="visitor">An object field visitor. Returns a new value for the visited object.</param>
        </member>
        <member name="M:Duality.ReflectionHelper.IsDeepByValueType(System.Type)">
            <summary>
            Returns whether the specified type doesn't contain any non-byvalue contents and thus can be cloned by assignment. 
            This is typically the case for any primitive types or types being constructed only of primitive and shallow types.
            </summary>
            <param name="baseObj"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.ReflectionHelper.IsPrimitiveExt(System.Type)">
            <summary>
            Returns whether the specified type is primitive or similar (like enums, srtings, decimals, etc.).
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.ReflectionHelper.ClearTypeCache">
            <summary>
            Clears the ReflectionHelpers Type cache.
            </summary>
        </member>
        <member name="M:Duality.ReflectionHelper.ResolveType(System.String,System.Boolean,System.Reflection.MethodInfo)">
            <summary>
            Resolves a Type based on its <see cref="M:Duality.ReflectionHelper.GetTypeId(System.Type)">type id</see>.
            </summary>
            <param name="typeString">The type string to resolve.</param>
            <param name="throwOnError">If true, an Exception is thrown on failure.</param>
            <param name="declaringMethod">The generic method that is declaring the Type. Only necessary when resolving a generic methods parameter Type.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.ReflectionHelper.ResolveMember(System.String,System.Boolean)">
            <summary>
            Resolves a Member based on its <see cref="M:Duality.ReflectionHelper.GetMemberId(System.Reflection.MemberInfo)">member id</see>.
            </summary>
            <param name="memberString">The <see cref="M:Duality.ReflectionHelper.GetMemberId(System.Reflection.MemberInfo)">member id</see> of the member.</param>
            <param name="throwOnError">If true, an Exception is thrown on failure.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.ReflectionHelper.GetSerializeType(System.Type)">
            <summary>
            Returns the <see cref="T:Duality.Serialization.SerializeType"/> of a Type.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.ReflectionHelper.GetDataType(System.Type)">
            <summary>
            Returns the <see cref="T:Duality.Serialization.DataType"/> of a Type.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.ReflectionHelper.GetTypeKeyword(System.Type)">
            <summary>
            Returns a Types keyword, its "short" name. Just the types "base", no generic
            type parameters or array specifications.
            </summary>
            <param name="T">The Type to describe</param>
            <returns></returns>
        </member>
        <member name="M:Duality.ReflectionHelper.GetTypeCSCodeName(System.Type,System.Boolean)">
            <summary>
            Returns a string describing a certain Type.
            </summary>
            <param name="T">The Type to describe</param>
            <returns></returns>
        </member>
        <member name="M:Duality.ReflectionHelper.GetTypeId(System.Type)">
            <summary>
            Returns a string describing a certain Type.
            </summary>
            <param name="T">The Type to describe</param>
            <returns></returns>
        </member>
        <member name="M:Duality.ReflectionHelper.GetMemberId(System.Reflection.MemberInfo)">
            <summary>
            Returns a string describing a certain Member of a Type.
            </summary>
            <param name="member">The Member to describe.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.ReflectionHelper.FindTypeByCSCode(System.String,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Type)">
            <summary>
            Retrieves a Type based on a C# code type string.
            </summary>
            <param name="csCodeType">The type string to use for the search.</param>
            <param name="asmSearch">An enumeration of all Assemblies the searched Type could be located in.</param>
            <param name="declaringType">The searched Type's declaring Type.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.ReflectionHelper.FindType(System.String,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Reflection.MethodInfo)">
            <summary>
            Retrieves a Type based on a <see cref="M:Duality.ReflectionHelper.GetTypeId(System.Type)">type id</see> string.
            </summary>
            <param name="typeName">The type id to use for the search.</param>
            <param name="asmSearch">An enumeration of all Assemblies the searched Type could be located in.</param>
            <param name="declaringMethod">The generic method that is declaring the Type. Only necessary when resolving a generic methods parameter Type.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.ReflectionHelper.FindMember(System.String,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Retrieves a MemberInfo based on a <see cref="M:Duality.ReflectionHelper.GetMemberId(System.Reflection.MemberInfo)">member id</see>.
            </summary>
            <param name="typeName">The member string to use for the search.</param>
            <param name="asmSearch">An enumeration of all Assemblies the searched Type could be located in.</param>
            <returns></returns>
            <seealso cref="M:Duality.ReflectionHelper.GetMemberId(System.Reflection.MemberInfo)"/>
        </member>
        <member name="M:Duality.ReflectionHelper.SplitArgs(System.String,System.Char,System.Char,System.Char,System.Int32)">
            <summary>
            Performs a selective split operation on the specified string. Intended to be used on hierarchial argument lists.
            </summary>
            <param name="argList">The argument list to split.</param>
            <param name="pushLevel">The char that increases the current hierarchy level.</param>
            <param name="popLevel">The char that decreases the current hierarchy level.</param>
            <param name="separator">The char that separates two arguments.</param>
            <param name="splitLevel">The hierarchy level at which to perform the split operation.</param>
            <returns></returns>
        </member>
        <member name="T:Duality.Resources.Prefab">
            <summary>
            Prefab is short for "prefabricated object" and encapsulates a single <see cref="T:Duality.GameObject"/> that can serve as a template.
            When creating a GameObject out of a Prefab, it maintains a connection to it using a <see cref="T:Duality.Resources.PrefabLink"/> object. This
            ensures that changes made to the Prefab propagate to all of its instances as well. It also keeps track of Properties that
            have been deliberately modified in the editor and restores them after re-applying the original Prefabs data.
            </summary>
        </member>
        <member name="F:Duality.Resources.Prefab.FileExt">
            <summary>
            A Prefab resources file extension.
            </summary>
        </member>
        <member name="M:Duality.Resources.Prefab.#ctor">
            <summary>
            Creates a new, empty Prefab.
            </summary>
        </member>
        <member name="M:Duality.Resources.Prefab.#ctor(Duality.GameObject)">
            <summary>
            Creates a new Prefab out of a GameObject.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Resources.Prefab.Inject(Duality.GameObject)">
            <summary>
            Discards previous data and injects the specified <see cref="T:Duality.GameObject"/> into the Prefab.
            The GameObject itsself will not be affected, instead a <see cref="M:Duality.GameObject.Clone"/> of it
            will be used for the Prefab.
            </summary>
            <param name="obj">The object to inject as Prefab root object.</param>
        </member>
        <member name="M:Duality.Resources.Prefab.Instantiate">
            <summary>
            Instantiates the Prefab.
            </summary>
            <returns>A new GameObject instance of this Prefab.</returns>
        </member>
        <member name="M:Duality.Resources.Prefab.CopyTo(Duality.GameObject)">
            <summary>
            Copies this Prefabs data to a GameObject without linking itsself to it.
            </summary>
            <param name="obj">The GameObject to which the Prefabs data is copied.</param>
        </member>
        <member name="M:Duality.Resources.Prefab.HasGameObject(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Returns whether this Prefab contains a <see cref="T:Duality.GameObject"/> with the specified <see cref="M:Duality.GameObject.IndexPathOfChild(Duality.GameObject)">index path</see>.
            It is based on this Prefabs root GameObject.
            </summary>
            <param name="indexPath">The <see cref="M:Duality.GameObject.IndexPathOfChild(Duality.GameObject)">index path</see> at which to search for a GameObject.</param>
            <returns>True, if such child GameObjects exists, false if not.</returns>
        </member>
        <member name="M:Duality.Resources.Prefab.HasComponent(System.Collections.Generic.IEnumerable{System.Int32},System.Type)">
            <summary>
            Returns whether this Prefab contains a <see cref="T:Duality.Component"/> inside a GameObject with the specified <see cref="M:Duality.GameObject.IndexPathOfChild(Duality.GameObject)">index path</see>.
            It is based on this Prefabs root GameObject.
            </summary>
            <param name="gameObjIndexPath">The <see cref="M:Duality.GameObject.IndexPathOfChild(Duality.GameObject)">index path</see> at which to search for a GameObject.</param>
            <param name="cmpType">The Component type to search for inside the found GameObject.</param>
            <returns></returns>
        </member>
        <member name="P:Duality.Resources.Prefab.ContainsData">
            <summary>
            [GET] Returns whether this Prefab contains any data.
            </summary>
        </member>
        <member name="T:Duality.Resources.PrefabLink">
            <summary>
            Represents a <see cref="T:Duality.GameObject">GameObjects</see> connection to the <see cref="P:Duality.Resources.PrefabLink.Prefab"/> it has been instanciated from.
            </summary>
            <seealso cref="P:Duality.Resources.PrefabLink.Prefab"/>
            <seealso cref="T:Duality.GameObject"/>
        </member>
        <member name="M:Duality.Resources.PrefabLink.#ctor(Duality.GameObject,Duality.ContentRef{Duality.Resources.Prefab})">
            <summary>
            Creates a new PrefabLink, connecting a GameObject to a Prefab.
            </summary>
            <param name="obj">The GameObject to link.</param>
            <param name="prefab">The Prefab to connect the GameObject with.</param>
        </member>
        <member name="M:Duality.Resources.PrefabLink.RelocateChanges(Duality.Resources.PrefabLink)">
            <summary>
            Relocates the internal change list from this PrefabLink to a different, hierarchially lower PrefabLink.
            </summary>
            <param name="other">
            The PrefabLink to which to relocate changes. It needs to be hierarchially lower than
            this one for the relocation to succeed.
            </param>
            <remarks>
            <para>
            In general, each PrefabLink is responsible for all hierarchially lower GameObjects. If one of them has
            a PrefabLink on its own, then the higher PrefabLinks responsibility ends there.
            </para>
            <para>
            Change relocation is done when linking an existing GameObject to a Prefab although it is already affected by a
            hierarchially higher PrefabLink. In order to prevent both PrefabLinks to interfere with each other, 
            all higher PrefabLink change list entries referring to that GameObject are relocated to the new, lower 
            PrefabLink that is specifically targetting it.
            </para>
            <para>
            This way, the above responsibility guideline remains applicable.
            </para>
            </remarks>
        </member>
        <member name="M:Duality.Resources.PrefabLink.Clone(Duality.GameObject,Duality.ContentRef{Duality.Resources.Prefab})">
            <summary>
            Clones the PrefabLink, but targets a different GameObject and Prefab.
            </summary>
            <param name="newObj">The GameObject which the clone is connected to.</param>
            <param name="newPrefab">The Prefab which the clone will connect its GameObject to.</param>
            <returns>A cloned version of this PrefabLink</returns>
        </member>
        <member name="M:Duality.Resources.PrefabLink.Clone(Duality.GameObject)">
            <summary>
            Clones the PrefabLink, but targets a different GameObject.
            </summary>
            <param name="newObj">The GameObject which the clone is connected to.</param>
            <returns>A cloned version of this PrefabLink</returns>
        </member>
        <member name="M:Duality.Resources.PrefabLink.Clone">
            <summary>
            Clones the PrefabLink.
            </summary>
            <returns>A cloned version of this PrefabLink</returns>
        </member>
        <member name="M:Duality.Resources.PrefabLink.Apply">
            <summary>
            Applies both Prefab and change list to this PrefabLinks GameObject.
            </summary>
        </member>
        <member name="M:Duality.Resources.PrefabLink.ApplyPrefab">
            <summary>
            Applies the Prefab to this PrefabLinks GameObject. This will overwrite
            all of its existing data and establish the state as defined in the Prefab.
            </summary>
        </member>
        <member name="M:Duality.Resources.PrefabLink.ApplyChanges">
            <summary>
            Applies this PrefabLinks change list to its GameObject. This will restore
            all deliberate modifications (made in the editor) of the GameObjects Properties 
            after linking it to the Prefab.
            </summary>
        </member>
        <member name="M:Duality.Resources.PrefabLink.UpdateChanges">
            <summary>
            Updates all existing change list entries by the GameObjects current Property values.
            </summary>
        </member>
        <member name="M:Duality.Resources.PrefabLink.PushChange(System.Object,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Creates a new change list entry.
            </summary>
            <param name="target">The target object in which the change has been made. Must be a GameObject or Component.</param>
            <param name="prop">The target objects <see cref="T:System.Reflection.PropertyInfo">Property</see> that has been changed.</param>
            <param name="value">The value to which the specified Property has been changed to.</param>
        </member>
        <member name="M:Duality.Resources.PrefabLink.PushChange(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Creates a new change list entry.
            </summary>
            <param name="target">The target object in which the change has been made. Must be a GameObject or Component.</param>
            <param name="prop">The target objects <see cref="T:System.Reflection.PropertyInfo">Property</see> that has been changed.</param>
        </member>
        <member name="M:Duality.Resources.PrefabLink.PopChange(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Removes an existing change list entry.
            </summary>
            <param name="target">The target object in which the change has been made. Must be a GameObject or Component.</param>
            <param name="prop">The target objects <see cref="T:System.Reflection.PropertyInfo">Property</see> that has been changed.</param>
        </member>
        <member name="M:Duality.Resources.PrefabLink.HasChange(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Returns whether there is a specific change list entry.
            </summary>
            <param name="target">The target object in which the change has been made. Must be a GameObject or Component.</param>
            <param name="prop">The target objects <see cref="T:System.Reflection.PropertyInfo">Property</see> that has been changed.</param>
            <returns>True, if such change list entry exists, false if not.</returns>
        </member>
        <member name="M:Duality.Resources.PrefabLink.ClearChanges">
            <summary>
            Clears the change list.
            </summary>
        </member>
        <member name="M:Duality.Resources.PrefabLink.AffectsObject(Duality.Component)">
            <summary>
            Returns whether a specific object is affected by this PrefabLink.
            </summary>
            <param name="cmp"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Resources.PrefabLink.AffectsObject(Duality.GameObject)">
            <summary>
            Returns whether a specific object is affected by this PrefabLink.
            </summary>
            <param name="cmp"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Resources.PrefabLink.ApplyAllLinks(System.Collections.Generic.IEnumerable{Duality.GameObject},System.Predicate{Duality.Resources.PrefabLink})">
            <summary>
            Applies all PrefabLinks in a set of GameObjects. 
            </summary>
            <param name="objEnum">An enumeration of all GameObjects containing PrefabLinks that are to <see cref="M:Duality.Resources.PrefabLink.Apply">apply</see>.</param>
            <param name="predicate">An optional predicate. If set, only PrefabLinks meeting its requirements are applied.</param>
            <returns>A List of all PrefabLinks that have been applied.</returns>
        </member>
        <member name="P:Duality.Resources.PrefabLink.Obj">
            <summary>
            [GET] The GameObject this PrefabLink belongs to.
            </summary>
        </member>
        <member name="P:Duality.Resources.PrefabLink.Prefab">
            <summary>
            [GET] The Prefab to which the GameObject is connected to.
            </summary>
        </member>
        <member name="P:Duality.Resources.PrefabLink.ParentLink">
            <summary>
            [GET] If the connected GameObject is itsself contained within a hierarchy
            of GameObjects which is affected by a higher PrefabLink, this link will be
            returned.
            </summary>
            <seealso cref="P:Duality.GameObject.AffectedByPrefabLink"/>
        </member>
        <member name="T:Duality.Resources.Texture">
            <summary>
            A Texture refers to pixel data stored in video memory
            </summary>
            <seealso cref="T:Duality.Resources.Pixmap"/>
            <seealso cref="T:Duality.Resources.RenderTarget"/>
        </member>
        <member name="F:Duality.Resources.Texture.FileExt">
            <summary>
            A Texture resources file extension.
            </summary>
        </member>
        <member name="F:Duality.Resources.Texture.VirtualContentPath">
            <summary>
            (Virtual) base path for Duality's embedded default Textures.
            </summary>
        </member>
        <member name="F:Duality.Resources.Texture.ContentPath_DualityLogo256">
            <summary>
            (Virtual) path of the <see cref="P:Duality.Resources.Texture.DualityLogo256"/> Texture.
            </summary>
        </member>
        <member name="F:Duality.Resources.Texture.ContentPath_DualityLogoB256">
            <summary>
            (Virtual) path of the <see cref="P:Duality.Resources.Texture.DualityLogoB256"/> Texture.
            </summary>
        </member>
        <member name="F:Duality.Resources.Texture.ContentPath_White">
            <summary>
            (Virtual) path of the <see cref="P:Duality.Resources.Texture.White"/> Texture.
            </summary>
        </member>
        <member name="F:Duality.Resources.Texture.None">
            <summary>
            Refers to a null reference Texture.
            </summary>
            <seealso cref="F:Duality.ContentRef`1.Null"/>
        </member>
        <member name="M:Duality.Resources.Texture.Bind(Duality.ContentRef{Duality.Resources.Texture},System.Int32)">
            <summary>
            Binds the given Texture to a texture unit in order to use it for rendering.
            </summary>
            <param name="tex">The Texture to bind.</param>
            <param name="texUnit">The texture unit where the Texture will be bound to.</param>
        </member>
        <member name="M:Duality.Resources.Texture.ResetBinding(System.Int32)">
            <summary>
            Resets all Texture bindings to texture units beginning at a certain index.
            </summary>
            <param name="beginAtIndex">The first texture unit index from which on all bindings will be cleared.</param>
        </member>
        <member name="M:Duality.Resources.Texture.CreateFromPixmap(Duality.ContentRef{Duality.Resources.Pixmap})">
            <summary>
            Creates a new Texture Resource based on the specified Pixmap, saves it and returns a reference to it.
            </summary>
            <param name="pixmap"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Resources.Texture.#ctor(Duality.ContentRef{Duality.Resources.Pixmap},Duality.Resources.Texture.SizeMode,OpenTK.Graphics.OpenGL.TextureMagFilter,OpenTK.Graphics.OpenGL.TextureMinFilter,OpenTK.Graphics.OpenGL.TextureWrapMode,OpenTK.Graphics.OpenGL.TextureWrapMode,OpenTK.Graphics.OpenGL.PixelInternalFormat)">
            <summary>
            Creates a new Texture based on a <see cref="T:Duality.Resources.Pixmap"/>.
            </summary>
            <param name="basePixmap">The <see cref="T:Duality.Resources.Pixmap"/> to use as source for pixel data.</param>
            <param name="sizeMode">Specifies behaviour in case the source data has non-power-of-two dimensions.</param>
            <param name="filterMag">The OpenGL filter mode for drawing the Texture bigger than it is.</param>
            <param name="filterMin">The OpenGL fitler mode for drawing the Texture smaller than it is.</param>
            <param name="wrapX">The OpenGL wrap mode on the texel x axis.</param>
            <param name="wrapY">The OpenGL wrap mode on the texel y axis.</param>
            <param name="format">The format in which OpenGL stores the pixel data.</param>
        </member>
        <member name="M:Duality.Resources.Texture.#ctor(System.Int32,System.Int32,Duality.Resources.Texture.SizeMode,OpenTK.Graphics.OpenGL.TextureMagFilter,OpenTK.Graphics.OpenGL.TextureMinFilter,OpenTK.Graphics.OpenGL.TextureWrapMode,OpenTK.Graphics.OpenGL.TextureWrapMode,OpenTK.Graphics.OpenGL.PixelInternalFormat)">
            <summary>
            Creates a new empty Texture with the specified size.
            </summary>
            <param name="width">The Textures width.</param>
            <param name="height">The Textures height</param>
            <param name="sizeMode">Specifies behaviour in case the specified size has non-power-of-two dimensions.</param>
            <param name="filterMag">The OpenGL filter mode for drawing the Texture bigger than it is.</param>
            <param name="filterMin">The OpenGL fitler mode for drawing the Texture smaller than it is.</param>
            <param name="wrapX">The OpenGL wrap mode on the texel x axis.</param>
            <param name="wrapY">The OpenGL wrap mode on the texel y axis.</param>
            <param name="format">The format in which OpenGL stores the pixel data.</param>
        </member>
        <member name="M:Duality.Resources.Texture.GenerateAnimAtlas(System.Int32,System.Int32)">
            <summary>
            Generates a <see cref="P:Duality.Resources.Texture.Atlas">texture atlas</see> for sprite animations but leaves
            previously existing atlas entries as they are, if possible. An automatically generated
            texture atlas will always occupy the first indices, followed by custom atlas entries.
            </summary>
            <param name="cols">The number of columns in an animated sprite Texture</param>
            <param name="rows">The number of rows in an animated sprite Texture</param>
        </member>
        <member name="M:Duality.Resources.Texture.ReloadData">
            <summary>
            Reloads this Textures pixel data. If the referred <see cref="T:Duality.Resources.Pixmap"/> has been modified,
            changes will now be visible.
            </summary>
        </member>
        <member name="M:Duality.Resources.Texture.LoadData(Duality.ContentRef{Duality.Resources.Pixmap})">
            <summary>
            Loads the specified <see cref="T:Duality.Resources.Pixmap">Pixmaps</see> pixel data.
            </summary>
            <param name="basePixmap">The <see cref="T:Duality.Resources.Pixmap"/> that is used as pixel data source.</param>
        </member>
        <member name="M:Duality.Resources.Texture.LoadData(Duality.ContentRef{Duality.Resources.Pixmap},Duality.Resources.Texture.SizeMode)">
            <summary>
            Loads the specified <see cref="T:Duality.Resources.Pixmap">Pixmaps</see> pixel data.
            </summary>
            <param name="basePixmap">The <see cref="T:Duality.Resources.Pixmap"/> that is used as pixel data source.</param>
            <param name="sizeMode">Specifies behaviour in case the source data has non-power-of-two dimensions.</param>
        </member>
        <member name="M:Duality.Resources.Texture.RetrievePixelData">
            <summary>
            Retrieves the pixel data that is currently stored in video memory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duality.Resources.Texture.LookupAtlas(System.Int32,Duality.Rect@)">
            <summary>
            Does a safe (null-checked, clamped) texture <see cref="P:Duality.Resources.Texture.Atlas"/> lookup.
            </summary>
            <param name="index"></param>
            <param name="uv"></param>
        </member>
        <member name="M:Duality.Resources.Texture.LookupAtlas(System.Int32)">
            <summary>
            Does a safe (null-checked, clamped) texture <see cref="P:Duality.Resources.Texture.Atlas"/> lookup.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Duality.Resources.Texture.AdjustSize(System.Single,System.Single)">
            <summary>
            Processes the specified size based on the Textures <see cref="T:Duality.Resources.Texture.SizeMode"/>.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Duality.Resources.Texture.SetupOpenGLRes">
            <summary>
            Sets up the Textures OpenGL resources, clearing previously uploaded pixel data.
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.DualityLogo256">
            <summary>
            [GET] A Texture showing the Duality logo.
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.DualityLogoB256">
            <summary>
            [GET] A Texture showing the Duality logo without the text on it.
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.White">
            <summary>
            [GET] A plain white 1x1 Texture. Can be used as a dummy.
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.BoundTexPrimary">
            <summary>
            [GET] The currently bound primary Texture.
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.BoundTexSecondary">
            <summary>
            [GET] The currently bound secondary Texture
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.BoundTexTertiary">
            <summary>
            [GET] The currently bound tertiary Texture
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.BoundTexQuartary">
            <summary>
            [GET] The currently bound quartary Texture
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.BoundTex">
            <summary>
            [GET] All Textures that are currently bound
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.PxDiameter">
            <summary>
            [GET] The Textures diameter
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.OglWidth">
            <summary>
            [GET] The Textures internal width as uploaded to video memory
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.OglHeight">
            <summary>
            [GET] The Textures internal height as uploaded to video memory
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.PxWidth">
            <summary>
            [GET] The Textures width after taking relative sizes into account
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.PxHeight">
            <summary>
            [GET] The Textures height after taking relative sizes into account
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.OglTexId">
            <summary>
            [GET] The Textures internal id value. You shouldn't need to use this value normally.
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.UVRatio">
            <summary>
            [GET] UV (Texture) coordinates for the Textures lower right
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.Mipmaps">
            <summary>
            Returns whether or not the texture uses mipmaps.
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.NeedsReload">
            <summary>
            Indicates that the textures parameters have been changed in a way that might make it
            necessary to reload its data before using it next time.
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.Size">
            <summary>
            [GET / SET] The Textures (original, unadjusted) size
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.SizeRelative">
            <summary>
            [GET / SET] Whether the specified size is interpreted as factor for the <see cref="P:Duality.DualityApp.TargetResolution"/>.
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.FilterMag">
            <summary>
            [GET / SET] The Textures magnifying filter
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.FilterMin">
            <summary>
            [GET / SET] The Textures minifying filter
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.WrapX">
            <summary>
            [GET / SET] The Textures horizontal wrap mode
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.WrapY">
            <summary>
            [GET / SET] The Textures vertical wrap mode
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.PixelFormat">
            <summary>
            [GET / SET] The Textures pixel format
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.OglSizeMode">
            <summary>
            [GET / SET] Handles how the Textures base Pixmap is adjusted in order to fit GPU texture size requirements (Power of Two dimensions)
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.BasePixmap">
            <summary>
            [GET / SET] Reference to a Pixmap that contains the pixel data that is or has been uploaded to the Texture
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.Atlas">
            <summary>
            [GET / SET] The Textures atlas array, distinguishing different areas in texture coordinates
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.AnimCols">
            <summary>
            [GET / SET] Information about different animation frames contained in this Texture.
            Setting this will lead to an auto-generated atlas map according to the animation.
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.AnimRows">
            <summary>
            [GET / SET] Information about different animation frames contained in this Texture.
            Setting this will lead to an auto-generated atlas map according to the animation.
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.AnimFrames">
            <summary>
            [GET] Total number of animation frames in this Texture
            </summary>
        </member>
        <member name="T:Duality.Resources.Texture.SizeMode">
            <summary>
            Defines how to handle pixel data without power-of-two dimensions.
            </summary>
        </member>
        <member name="F:Duality.Resources.Texture.SizeMode.Enlarge">
            <summary>
            Enlarges the images dimensions without scaling the image, leaving
            the new space empty. Texture coordinates are automatically adjusted in
            order to display the image correctly. This preserves the images full
            quality but prevents tiling, if not power-of-two anyway.
            </summary>
        </member>
        <member name="F:Duality.Resources.Texture.SizeMode.Stretch">
            <summary>
            Stretches the image to fit power-of-two dimensions and downscales it
            again when displaying. This might blur the image slightly but allows
            tiling it.
            </summary>
        </member>
        <member name="F:Duality.Resources.Texture.SizeMode.NonPowerOfTwo">
            <summary>
            The images dimensions are not affected, as OpenGL uses an actual 
            non-power-of-two texture. However, this might be unsupported on older hardware.
            </summary>
        </member>
        <member name="F:Duality.Resources.Texture.SizeMode.Default">
            <summary>
            The default behaviour. Equals <see cref="F:Duality.Resources.Texture.SizeMode.Enlarge"/>.
            </summary>
        </member>
        <member name="T:Duality.Resources.ShaderProgram">
            <summary>
            Represents an OpenGL ShaderProgram which consists of a Vertex- and a FragmentShader
            </summary>
            <seealso cref="T:Duality.Resources.AbstractShader"/>
            <seealso cref="T:Duality.Resources.VertexShader"/>
            <seealso cref="T:Duality.Resources.FragmentShader"/>
        </member>
        <member name="F:Duality.Resources.ShaderProgram.FileExt">
            <summary>
            A ShaderProgram resources file extension.
            </summary>
        </member>
        <member name="F:Duality.Resources.ShaderProgram.VirtualContentPath">
            <summary>
            (Virtual) base path for Duality's embedded default ShaderPrograms.
            </summary>
        </member>
        <member name="F:Duality.Resources.ShaderProgram.ContentPath_Minimal">
            <summary>
            (Virtual) path of the <see cref="P:Duality.Resources.ShaderProgram.Minimal"/> ShaderProgram.
            </summary>
        </member>
        <member name="F:Duality.Resources.ShaderProgram.ContentPath_Picking">
            <summary>
            (Virtual) path of the <see cref="P:Duality.Resources.ShaderProgram.Picking"/> ShaderProgram.
            </summary>
        </member>
        <member name="F:Duality.Resources.ShaderProgram.ContentPath_SmoothAnim">
            <summary>
            (Virtual) path of the <see cref="P:Duality.Resources.ShaderProgram.SmoothAnim"/> ShaderProgram.
            </summary>
        </member>
        <member name="F:Duality.Resources.ShaderProgram.None">
            <summary>
            Refers to a null reference ShaderProgram.
            </summary>
            <seealso cref="F:Duality.ContentRef`1.Null"/>
        </member>
        <member name="M:Duality.Resources.ShaderProgram.Bind(Duality.ContentRef{Duality.Resources.ShaderProgram})">
            <summary>
            Binds a ShaderProgram in order to use it.
            </summary>
            <param name="prog">The ShaderProgram to be bound.</param>
        </member>
        <member name="M:Duality.Resources.ShaderProgram.#ctor">
            <summary>
            Creates a new, empty ShaderProgram.
            </summary>
        </member>
        <member name="M:Duality.Resources.ShaderProgram.#ctor(Duality.ContentRef{Duality.Resources.VertexShader},Duality.ContentRef{Duality.Resources.FragmentShader})">
            <summary>
            Creates a new ShaderProgram based on a <see cref="T:Duality.Resources.VertexShader">Vertex-</see> and a <see cref="T:Duality.Resources.FragmentShader"/>.
            </summary>
            <param name="v"></param>
            <param name="f"></param>
        </member>
        <member name="M:Duality.Resources.ShaderProgram.AttachShaders">
            <summary>
            Re-Attaches the currently used <see cref="T:Duality.Resources.VertexShader">Vertex-</see> and <see cref="T:Duality.Resources.FragmentShader"/>.
            </summary>
        </member>
        <member name="M:Duality.Resources.ShaderProgram.AttachShaders(Duality.ContentRef{Duality.Resources.VertexShader},Duality.ContentRef{Duality.Resources.FragmentShader})">
            <summary>
            Attaches the specified <see cref="T:Duality.Resources.VertexShader">Vertex-</see> and <see cref="T:Duality.Resources.FragmentShader"/> to this ShaderProgram.
            </summary>
            <param name="v"></param>
            <param name="f"></param>
        </member>
        <member name="M:Duality.Resources.ShaderProgram.DetachShaders">
            <summary>
            Detaches <see cref="T:Duality.Resources.VertexShader">Vertex-</see> and <see cref="T:Duality.Resources.FragmentShader"/> from the ShaderProgram.
            </summary>
        </member>
        <member name="M:Duality.Resources.ShaderProgram.Compile">
            <summary>
            Compiles the ShaderProgram. This is done automatically when loading the ShaderProgram
            or when binding it.
            </summary>
        </member>
        <member name="P:Duality.Resources.ShaderProgram.Minimal">
            <summary>
            A minimal ShaderProgram, using a <see cref="P:Duality.Resources.VertexShader.Minimal"/> VertexShader and
            a <see cref="P:Duality.Resources.FragmentShader.Minimal"/> FragmentShader.
            </summary>
        </member>
        <member name="P:Duality.Resources.ShaderProgram.Picking">
            <summary>
            A ShaderProgram designed for picking operations. It uses a 
            <see cref="P:Duality.Resources.VertexShader.Minimal"/> VertexShader and a 
            <see cref="P:Duality.Resources.FragmentShader.Picking"/> FragmentShader.
            </summary>
        </member>
        <member name="P:Duality.Resources.ShaderProgram.SmoothAnim">
            <summary>
            The SmoothAnim ShaderProgram, using a <see cref="P:Duality.Resources.VertexShader.SmoothAnim"/> VertexShader and
            a <see cref="P:Duality.Resources.FragmentShader.SmoothAnim"/> FragmentShader. Some <see cref="T:Duality.Components.Renderer">Renderers</see>
            might react automatically to <see cref="T:Duality.Resources.Material">Materials</see> using this ShaderProgram and provide a suitable
            vertex format.
            </summary>
        </member>
        <member name="P:Duality.Resources.ShaderProgram.BoundProgram">
            <summary>
            [GET] Returns the currently bound ShaderProgram.
            </summary>
        </member>
        <member name="P:Duality.Resources.ShaderProgram.Compiled">
            <summary>
            [GET] Returns whether this ShaderProgram has been compiled.
            </summary>
        </member>
        <member name="P:Duality.Resources.ShaderProgram.VarInfo">
            <summary>
            [GET] Returns an array containing information about the variables that have been declared in shader source code.
            </summary>
        </member>
        <member name="P:Duality.Resources.ShaderProgram.AttribCount">
            <summary>
            [GET] Returns the number of vertex attributes that have been declared.
            </summary>
        </member>
        <member name="P:Duality.Resources.ShaderProgram.UniformCount">
            <summary>
            [GET] Returns the number of uniform variables that have been declared.
            </summary>
        </member>
        <member name="P:Duality.Resources.ShaderProgram.Vertex">
            <summary>
            [GET / SET] The <see cref="T:Duality.Resources.VertexShader"/> that is used by this ShaderProgram.
            </summary>
        </member>
        <member name="P:Duality.Resources.ShaderProgram.Fragment">
            <summary>
            [GET / SET] The <see cref="T:Duality.Resources.FragmentShader"/> that is used by this ShaderProgram.
            </summary>
        </member>
        <member name="T:Duality.Resources.AudioData">
            <summary>
            Stores compressed audio data (Ogg Vorbis) in system memory as well as a reference to the
            OpenAL buffer containing actual PCM data, once set up. The OpenAL buffer is set up lazy
            i.e. as soon as demanded by accessing the AlBuffer property or calling SetupAlBuffer.
            </summary>
            <seealso cref="T:Duality.Resources.Sound"/>
        </member>
        <member name="F:Duality.Resources.AudioData.FileExt">
            <summary>
            An AudioData resources file extension.
            </summary>
        </member>
        <member name="F:Duality.Resources.AudioData.VirtualContentPath">
            <summary>
            (Virtual) base path for Duality's embedded default AudioData.
            </summary>
        </member>
        <member name="F:Duality.Resources.AudioData.ContentPath_Beep">
            <summary>
            (Virtual) path of the <see cref="P:Duality.Resources.AudioData.Beep"/> AudioData.
            </summary>
        </member>
        <member name="F:Duality.Resources.AudioData.ContentPath_DroneLoop">
            <summary>
            (Virtual) path of the <see cref="P:Duality.Resources.AudioData.DroneLoop"/> AudioData.
            </summary>
        </member>
        <member name="F:Duality.Resources.AudioData.ContentPath_LogoJingle">
            <summary>
            (Virtual) path of the <see cref="P:Duality.Resources.AudioData.LogoJingle"/> AudioData.
            </summary>
        </member>
        <member name="F:Duality.Resources.AudioData.AlBuffer_NotAvailable">
            <summary>
            A dummy OpenAL buffer handle, indicating that the buffer in question is not available.
            </summary>
        </member>
        <member name="F:Duality.Resources.AudioData.AlBuffer_StreamMe">
            <summary>
            A dummy OpenAL buffer handle, indicating that the buffer in question is inactive due to streaming.
            </summary>
        </member>
        <member name="M:Duality.Resources.AudioData.#ctor">
            <summary>
            Creates a new, empty AudioData without any data.
            </summary>
        </member>
        <member name="M:Duality.Resources.AudioData.#ctor(System.Byte[])">
            <summary>
            Creates a new AudioData based on an <see cref="T:Duality.OggVorbis.OV">Ogg Vorbis</see> memory chunk.
            </summary>
            <param name="oggVorbisData">An <see cref="T:Duality.OggVorbis.OV">Ogg Vorbis</see> memory chunk</param>
        </member>
        <member name="M:Duality.Resources.AudioData.#ctor(System.IO.Stream)">
            <summary>
            Creates a new AudioData based on a <see cref="T:System.IO.Stream"/> containing <see cref="T:Duality.OggVorbis.OV">Ogg Vorbis</see> data.
            </summary>
            <param name="oggVorbisDataStream">A <see cref="T:System.IO.Stream"/> containing <see cref="T:Duality.OggVorbis.OV">Ogg Vorbis</see> data</param>
        </member>
        <member name="M:Duality.Resources.AudioData.#ctor(System.String)">
            <summary>
            Creates a new AudioData base on an <see cref="T:Duality.OggVorbis.OV">Ogg Vorbis</see> file.
            </summary>
            <param name="filepath">Path to the <see cref="T:Duality.OggVorbis.OV">Ogg Vorbis</see> file.</param>
        </member>
        <member name="M:Duality.Resources.AudioData.SaveOggVorbisData(System.String)">
            <summary>
            Saves the audio data as <see cref="T:Duality.OggVorbis.OV">Ogg Vorbis</see> file.
            </summary>
            <param name="oggVorbisPath">The path of the file to which the audio data is written.</param>
        </member>
        <member name="M:Duality.Resources.AudioData.LoadOggVorbisData(System.String)">
            <summary>
            Loads new audio data from an <see cref="T:Duality.OggVorbis.OV">Ogg Vorbis</see> file.
            </summary>
            <param name="oggVorbisPath">The path of the file from which the audio data is read.</param>
        </member>
        <member name="M:Duality.Resources.AudioData.DisposeAlBuffer">
            <summary>
            Disposes the AudioDatas OpenAL buffer.
            </summary>
            <seealso cref="M:Duality.Resources.AudioData.SetupAlBuffer"/>
        </member>
        <member name="M:Duality.Resources.AudioData.SetupAlBuffer">
            <summary>
            Sets up a new OpenAL buffer for this AudioData. This will result in decompressing
            the <see cref="T:Duality.OggVorbis.OV">Ogg Vorbis</see> data and uploading it to OpenAL,
            unless the AudioData is streamed.
            </summary>
        </member>
        <member name="P:Duality.Resources.AudioData.Beep">
            <summary>
            [GET] A simple beep AudioData.
            </summary>
        </member>
        <member name="P:Duality.Resources.AudioData.DroneLoop">
            <summary>
            [GET] A drone loop AudioData. This is stereo data.
            </summary>
        </member>
        <member name="P:Duality.Resources.AudioData.LogoJingle">
            <summary>
            [GET] A logo jingle AudioData. This is stereo data.
            </summary>
        </member>
        <member name="P:Duality.Resources.AudioData.OggVorbisData">
            <summary>
            [GET / SET] A data chunk representing <see cref="T:Duality.OggVorbis.OV">Ogg Vorbis</see> compressed
            audio data.
            </summary>
        </member>
        <member name="P:Duality.Resources.AudioData.ForceStream">
            <summary>
            [GET / SET] If set to true, when playing a <see cref="T:Duality.Resources.Sound"/> that refers to this
            AudioData, it is forced to be played streamed. Normally, streaming kicks in automatically when playing
            very large sound files, such as music or large environmental ambience.
            </summary>
        </member>
        <member name="P:Duality.Resources.AudioData.IsStreamed">
            <summary>
            [GET] Returns whether this AudioData will be played streamed.
            </summary>
        </member>
        <member name="P:Duality.Resources.AudioData.AlBuffer">
            <summary>
            [GET] The OpenAL buffer handle of this AudioData.
            </summary>
        </member>
        <member name="T:Duality.ExtMethodsString">
            <summary>
            Provides extension methods for strings.
            </summary>
        </member>
        <member name="M:Duality.ExtMethodsString.Multiply(System.String,System.Int32)">
            <summary>
            Returns a string containing n times the source string.
            </summary>
            <param name="source"></param>
            <param name="times"></param>
            <returns></returns>
        </member>
        <member name="T:Duality.Serialization.TypeDataLayout">
            <summary>
            This class provides information about the data layout when de/serializing an object.
            </summary>
            <seealso cref="T:Duality.Serialization.BinaryFormatterBase"/>
            <seealso cref="T:Duality.Serialization.BinaryFormatter"/>
            <seealso cref="T:Duality.Serialization.BinaryMetaFormatter"/>
        </member>
        <member name="M:Duality.Serialization.TypeDataLayout.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a TypeDataLayout from the specified <see cref="T:System.IO.BinaryReader"/>.
            </summary>
            <param name="r">The BinaryReader from which the type information is read.</param>
        </member>
        <member name="M:Duality.Serialization.TypeDataLayout.#ctor(Duality.Serialization.TypeDataLayout)">
            <summary>
            Initializes a TypeDataLayout by cloning an existing TypeDataLayout.
            </summary>
            <param name="t">The source layout</param>
        </member>
        <member name="M:Duality.Serialization.TypeDataLayout.#ctor(Duality.Serialization.SerializeType)">
            <summary>
            Initializes a TypeDataLayout by extracting necessary information from the specified <see cref="T:Duality.Serialization.SerializeType"/>.
            </summary>
            <param name="t">The source SerializeType.</param>
        </member>
        <member name="M:Duality.Serialization.TypeDataLayout.Write(System.IO.BinaryWriter)">
            <summary>
            Writes the TypeDataLayout to the specified <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="w">The BinaryWriter to store the type information.</param>
        </member>
        <member name="P:Duality.Serialization.TypeDataLayout.Fields">
            <summary>
            [GET / SET] An array of all the necessary field information, typically one <see cref="T:Duality.Serialization.TypeDataLayout.FieldDataInfo"/> 
            entry per <see cref="T:System.Reflection.FieldInfo">field</see>.
            </summary>
        </member>
        <member name="T:Duality.Serialization.TypeDataLayout.FieldDataInfo">
            <summary>
            Holds information about a single field.
            </summary>
            <see cref="T:System.Reflection.FieldInfo"/>
        </member>
        <member name="F:Duality.Serialization.TypeDataLayout.FieldDataInfo.name">
            <summary>
            The fields name
            </summary>
        </member>
        <member name="F:Duality.Serialization.TypeDataLayout.FieldDataInfo.typeString">
            <summary>
            A string referring to the fields type.
            </summary>
        </member>
        <member name="T:Duality.Resources.Scene">
            <summary>
            A Scene encapsulates an organized set of <see cref="T:Duality.GameObject">GameObjects</see> and provides
            update-, rendering- and maintenance functionality. In Duality, there is always exactly one Scene
            <see cref="P:Duality.Resources.Scene.Current"/> which represents a level, gamestate or a combination of both, depending
            on you own design.
            </summary>
        </member>
        <member name="F:Duality.Resources.Scene.FileExt">
            <summary>
            A Scene resources file extension.
            </summary>
        </member>
        <member name="M:Duality.Resources.Scene.#ctor">
            <summary>
            Creates a new, empty scene which does not contain any <see cref="T:Duality.GameObject">GameObjects</see>.
            </summary>
        </member>
        <member name="M:Duality.Resources.Scene.Render">
            <summary>
            Renders the Scene
            </summary>
        </member>
        <member name="M:Duality.Resources.Scene.Update">
            <summary>
            Updates the Scene
            </summary>
        </member>
        <member name="M:Duality.Resources.Scene.EditorUpdate">
            <summary>
            Updates the Scene in the editor.
            </summary>
        </member>
        <member name="M:Duality.Resources.Scene.ApplyPrefabLinks">
            <summary>
            Applies all <see cref="T:Duality.Resources.PrefabLink">PrefabLinks</see> contained withing this
            Scenes <see cref="T:Duality.GameObject">GameObjects</see>.
            </summary>
        </member>
        <member name="M:Duality.Resources.Scene.BreakPrefabLinks">
            <summary>
            Breaks all <see cref="T:Duality.Resources.PrefabLink">PrefabLinks</see> contained withing this
            Scenes <see cref="T:Duality.GameObject">GameObjects</see>.
            </summary>
        </member>
        <member name="M:Duality.Resources.Scene.Clear">
            <summary>
            Clears the Scene, unregistering all GameObjects. This does not <see cref="M:Duality.GameObject.Dispose">dispose</see> them.
            </summary>
        </member>
        <member name="M:Duality.Resources.Scene.Append(Duality.ContentRef{Duality.Resources.Scene})">
            <summary>
            Appends a cloned version of the specified Scenes contents to this Scene.
            </summary>
            <param name="scene">The source Scene.</param>
        </member>
        <member name="M:Duality.Resources.Scene.Consume(Duality.ContentRef{Duality.Resources.Scene})">
            <summary>
            Appends the specified Scene's contents to this Scene and consumes the specified Scene.
            </summary>
            <param name="scene">The source Scene.</param>
        </member>
        <member name="M:Duality.Resources.Scene.RegisterObj(Duality.GameObject)">
            <summary>
            Registers a GameObject and all of its children.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Resources.Scene.RegisterObj(System.Collections.Generic.IEnumerable{Duality.GameObject})">
            <summary>
            Registers a set of GameObjects and all of their children.
            </summary>
            <param name="objEnum"></param>
        </member>
        <member name="M:Duality.Resources.Scene.UnregisterObj(Duality.GameObject)">
            <summary>
            Unregisters a GameObject and all of its children
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Resources.Scene.UnregisterObj(System.Collections.Generic.IEnumerable{Duality.GameObject})">
            <summary>
            Unregisters a set of GameObjects and all of their children.
            </summary>
            <param name="objEnum"></param>
        </member>
        <member name="M:Duality.Resources.Scene.QueryVisibleRenderers(Duality.IDrawDevice)">
            <summary>
            Enumerates all <see cref="T:Duality.Components.Renderer">Renderers</see> that are visible to
            the specified <see cref="T:Duality.IDrawDevice"/>.
            </summary>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Resources.Scene.AwakePhysics">
            <summary>
            Awakes all currently existing physical objects.
            </summary>
        </member>
        <member name="P:Duality.Resources.Scene.PhysicsAlpha">
            <summary>
            [GET] When using fixed-timestep physics, the alpha value [0.0 - 1.0] indicates how
            complete the next step is. This is used for linear interpolation inbetween fixed physics steps.
            </summary>
        </member>
        <member name="P:Duality.Resources.Scene.PhysicsFixedTime">
            <summary>
            [GET] Is fixed-timestep physics calculation currently active?
            </summary>
        </member>
        <member name="P:Duality.Resources.Scene.PhysicsWorld">
            <summary>
            [GET] Returns the current physics world.
            </summary>
        </member>
        <member name="P:Duality.Resources.Scene.Current">
            <summary>
            [GET / SET] The Scene that is currently active i.e. updated and rendered. This is never null.
            You may assign null in order to leave the current Scene and enter en empty dummy Scene.
            </summary>
        </member>
        <member name="P:Duality.Resources.Scene.CurrentPath">
            <summary>
            [GET] The Resource file path of the current Scene.
            </summary>
        </member>
        <member name="E:Duality.Resources.Scene.Leaving">
            <summary>
            Fired just before leaving the current Scene.
            </summary>
        </member>
        <member name="E:Duality.Resources.Scene.Entered">
            <summary>
            Fired right after entering the (now) current Scene.
            </summary>
        </member>
        <member name="E:Duality.Resources.Scene.GameObjectRegistered">
            <summary>
            Fired when a <see cref="T:Duality.GameObject"/> has been registered in the current Scene.
            </summary>
        </member>
        <member name="E:Duality.Resources.Scene.GameObjectUnregistered">
            <summary>
            Fired when a <see cref="T:Duality.GameObject"/> has been unregistered from the current Scene.
            </summary>
        </member>
        <member name="E:Duality.Resources.Scene.RegisteredObjectComponentAdded">
            <summary>
            Fired when a <see cref="T:Duality.Component"/> has been added to a <see cref="T:Duality.GameObject"/> that is registered in the current Scene.
            </summary>
        </member>
        <member name="E:Duality.Resources.Scene.RegisteredObjectComponentRemoved">
            <summary>
            Fired when a <see cref="T:Duality.Component"/> has been removed from a <see cref="T:Duality.GameObject"/> that is registered in the current Scene.
            </summary>
        </member>
        <member name="P:Duality.Resources.Scene.AllObjects">
            <summary>
            [GET] Enumerates all registered objects.
            </summary>
        </member>
        <member name="P:Duality.Resources.Scene.ActiveObjects">
            <summary>
            [GET] Enumerates all registered objects that are currently active.
            </summary>
        </member>
        <member name="P:Duality.Resources.Scene.RootObjects">
            <summary>
            [GET] Enumerates all root GameObjects, i.e. all GameObjects without a parent object.
            </summary>
        </member>
        <member name="P:Duality.Resources.Scene.ActiveRootObjects">
            <summary>
            [GET] Enumerates all <see cref="P:Duality.Resources.Scene.RootObjects"/> that are currently active.
            </summary>
        </member>
        <member name="P:Duality.Resources.Scene.Cameras">
            <summary>
            [GET] Enumerates the Scenes <see cref="T:Duality.Components.Camera"/> objects.
            </summary>
        </member>
        <member name="P:Duality.Resources.Scene.Renderers">
            <summary>
            [GET] Enumerates the Scenes <see cref="T:Duality.Components.Renderer"/> objects.
            </summary>
        </member>
        <member name="P:Duality.Resources.Scene.GlobalGravity">
            <summary>
            [GET / SET] Global gravity force that is applied to all objects that obey the laws of physics.
            </summary>
        </member>
        <member name="P:Duality.Resources.Scene.IsCurrent">
            <summary>
            [GET] Returns whether this Scene is <see cref="P:Duality.Resources.Scene.Current"/>.
            </summary>
        </member>
        <member name="P:Duality.Resources.Scene.IsEmpty">
            <summary>
            [GET] Returns whether this Scene is completely empty.
            </summary>
        </member>
        <member name="T:Duality.IKeyboardInput">
            <summary>
            Provides access to user keyboard input
            </summary>
        </member>
        <member name="P:Duality.IKeyboardInput.KeyRepeat">
            <summary>
            [GET / SET] Whether a key that is pressed and hold down should fire the <see cref="E:Duality.IKeyboardInput.KeyDown"/> event repeatedly.
            </summary>
        </member>
        <member name="P:Duality.IKeyboardInput.Item(OpenTK.Input.Key)">
            <summary>
            [GET] Returns whether a specific key is currently pressed.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="E:Duality.IKeyboardInput.KeyUp">
            <summary>
            Fired when a key is no longer pressed.
            </summary>
        </member>
        <member name="E:Duality.IKeyboardInput.KeyDown">
            <summary>
            Fired once when a key is pressed. May be fired repeatedly, if <see cref="P:Duality.IKeyboardInput.KeyRepeat"/> is true.
            </summary>
        </member>
        <member name="T:Duality.ExtMethodsBitmap">
            <summary>
            Provides extension methods for <see cref="T:System.Drawing.Bitmap">Bitmaps</see>.
            </summary>
        </member>
        <member name="M:Duality.ExtMethodsBitmap.SubImage(System.Drawing.Bitmap,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Extracts a rectangular portion of the original image.
            </summary>
            <param name="bm">The original Bitmap.</param>
            <param name="x">The rectangular portion to extract.</param>
            <param name="y">The rectangular portion to extract.</param>
            <param name="w">The rectangular portion to extract.</param>
            <param name="h">The rectangular portion to extract.</param>
            <returns>A new Bitmap containing the selected area.</returns>
        </member>
        <member name="M:Duality.ExtMethodsBitmap.SubImage(System.Drawing.Bitmap,Duality.Rect)">
            <summary>
            Extracts a rectangular portion of the original image.
            </summary>
            <param name="bm">The original Bitmap.</param>
            <param name="rect">The rectangular portion to extract.</param>
            <returns>A new Bitmap containing the selected area.</returns>
        </member>
        <member name="M:Duality.ExtMethodsBitmap.SubImage(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
            Extracts a rectangular portion of the original image.
            </summary>
            <param name="bm">The original Bitmap.</param>
            <param name="rect">The rectangular portion to extract.</param>
            <returns>A new Bitmap containing the selected area.</returns>
        </member>
        <member name="M:Duality.ExtMethodsBitmap.Resize(System.Drawing.Bitmap,System.Int32,System.Int32,Duality.Alignment)">
            <summary>
            Creates a resized version of a Bitmap. Gained space will be empty, lost space will crop the image.
            </summary>
            <param name="bm">The original Bitmap.</param>
            <param name="w">The desired width.</param>
            <param name="h">The desired height.</param>
            <param name="origin">The desired resize origin in the original image.</param>
            <returns>A new Bitmap that has the specified size.</returns>
        </member>
        <member name="M:Duality.ExtMethodsBitmap.Rescale(System.Drawing.Bitmap,System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode)">
            <summary>
            Creates a rescaled version of a Bitmap.
            </summary>
            <param name="bm">The original Bitmap.</param>
            <param name="w">The desired width.</param>
            <param name="h">The desired height.</param>
            <param name="mode">Specified how to interpolate the original image in order to calculate the result image.</param>
            <returns>A new Bitmap that has been scaled to the specified size.</returns>
        </member>
        <member name="M:Duality.ExtMethodsBitmap.Crop(System.Drawing.Bitmap,System.Boolean,System.Boolean)">
            <summary>
            Creates a cropped version of the specified Bitmap, removing transparent / empty border areas.
            </summary>
            <param name="bm">The original Bitmap.</param>
            <param name="cropX">Whether the image should be cropped in X-direction</param>
            <param name="cropY">Whether the image should be cropped in Y-direction</param>
            <returns>A cropped version of the original Bitmap.</returns>
        </member>
        <member name="M:Duality.ExtMethodsBitmap.OpaqueBounds(System.Drawing.Bitmap)">
            <summary>
            Measures the bounding rectangle of the opaque pixels in a Bitmap.
            </summary>
            <param name="bm"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.ExtMethodsBitmap.GetAverageColor(System.Drawing.Bitmap,System.Boolean)">
            <summary>
            Determines the average color of a Bitmap.
            </summary>
            <param name="bm"></param>
            <param name="weightTransparent">If true, the alpha value weights a pixels color value. </param>
            <returns></returns>
        </member>
        <member name="M:Duality.ExtMethodsBitmap.GetPixelDataRgba(System.Drawing.Bitmap)">
            <summary>
            Extracts a Bitmaps pixel data.
            </summary>
            <param name="bm"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.ExtMethodsBitmap.GetPixelDataIntArgb(System.Drawing.Bitmap)">
            <summary>
            Extracts a Bitmaps pixel data as (signed) IntArgb values.
            </summary>
            <param name="bm"></param>
        </member>
        <member name="M:Duality.ExtMethodsBitmap.SetPixelDataRgba(System.Drawing.Bitmap,Duality.ColorFormat.ColorRgba[])">
            <summary>
            Replaces a Bitmaps pixel data.
            </summary>
            <param name="bm"></param>
            <param name="pixelData"></param>
        </member>
        <member name="M:Duality.ExtMethodsBitmap.SetPixelDataRgba(System.Drawing.Bitmap,System.Byte[])">
            <summary>
            Replaces a Bitmaps pixel data.
            </summary>
            <param name="bm"></param>
            <param name="pixelData"></param>
        </member>
        <member name="M:Duality.ExtMethodsBitmap.SetPixelDataIntArgb(System.Drawing.Bitmap,System.Int32[])">
            <summary>
            Replaces a Bitmaps pixel data.
            </summary>
            <param name="bm"></param>
            <param name="pixelData"></param>
        </member>
        <member name="T:Duality.VertexFormat.VertexC1P3">
            <summary>
            Vertex data providing each vertex a position (3x4 byte) and color (1x4 byte).
            </summary>
        </member>
        <member name="F:Duality.VertexFormat.VertexC1P3.OffsetColor">
            <summary>
            Byte offset for the color.
            </summary>
        </member>
        <member name="F:Duality.VertexFormat.VertexC1P3.OffsetPos">
            <summary>
            Byte offset for the position.
            </summary>
        </member>
        <member name="F:Duality.VertexFormat.VertexC1P3.Size">
            <summary>
            Total size in bytes.
            </summary>
        </member>
        <member name="F:Duality.VertexFormat.VertexC1P3.Color">
            <summary>
            The vertices color.
            </summary>
        </member>
        <member name="F:Duality.VertexFormat.VertexC1P3.Pos">
            <summary>
            The vertices position.
            </summary>
        </member>
        <member name="T:Duality.Serialization.BinaryMetaFormatter">
            <summary>
            De/Serializes abstract object data using <see cref="T:Duality.Serialization.MetaFormat.DataNode">DataNodes</see> instead of the object itsself.
            </summary>
            <seealso cref="T:Duality.Serialization.BinaryFormatter"/>
        </member>
        <member name="M:Duality.Serialization.BinaryMetaFormatter.WriteMemberInfo(Duality.Serialization.MetaFormat.MemberInfoNode)">
            <summary>
            Writes the specified <see cref="T:Duality.Serialization.MetaFormat.MemberInfoNode"/>, including possible child nodes.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryMetaFormatter.WriteArray(Duality.Serialization.MetaFormat.ArrayNode)">
            <summary>
            Writes the specified <see cref="T:Duality.Serialization.MetaFormat.ArrayNode"/>, including possible child nodes.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryMetaFormatter.WriteStruct(Duality.Serialization.MetaFormat.StructNode)">
            <summary>
            Writes the specified <see cref="T:Duality.Serialization.MetaFormat.StructNode"/>, including possible child nodes.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryMetaFormatter.WriteDelegate(Duality.Serialization.MetaFormat.DelegateNode)">
            <summary>
            Writes the specified <see cref="T:Duality.Serialization.MetaFormat.DelegateNode"/>, including possible child nodes.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryMetaFormatter.WriteEnum(Duality.Serialization.MetaFormat.EnumNode)">
            <summary>
            Writes the specified <see cref="T:Duality.Serialization.MetaFormat.EnumNode"/>.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryMetaFormatter.ReadMemberInfo(Duality.Serialization.DataType)">
            <summary>
            Reads a <see cref="T:Duality.Serialization.MetaFormat.MemberInfoNode"/>, including possible child nodes.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryMetaFormatter.ReadArray">
            <summary>
            Reads an <see cref="T:Duality.Serialization.MetaFormat.ArrayNode"/>, including possible child nodes.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryMetaFormatter.ReadStruct(System.Boolean)">
            <summary>
            Reads a <see cref="T:Duality.Serialization.MetaFormat.StructNode"/>, including possible child nodes.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryMetaFormatter.ReadDelegate">
            <summary>
            Reads a <see cref="T:Duality.Serialization.MetaFormat.DelegateNode"/>, including possible child nodes.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryMetaFormatter.ReadEnum">
            <summary>
            Reads an <see cref="T:Duality.Serialization.MetaFormat.EnumNode"/>.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryMetaFormatter.ReadObjectRef">
            <summary>
            Reads an <see cref="T:Duality.Serialization.MetaFormat.ObjectRefNode"/>.
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:Duality.PathHelper">
            <summary>
            Provides helper methods for handling <see cref="T:System.IO.Path">Paths</see>.
            </summary>
        </member>
        <member name="M:Duality.PathHelper.Combine(System.String[])">
            <summary>
            Combines several path tokens sequencially.
            </summary>
            <param name="paths"></param>
            <returns>
            A combined version of all path tokens.
            If only one token is specified, it is returned unchanged.
            If no tokens are specified, null is returned.
            </returns>
        </member>
        <member name="M:Duality.PathHelper.GetFreePath(System.String,System.String)">
            <summary>
            Returns a path that isn't taken yet.
            </summary>
            <param name="pathBase">The path to use as base for finding a available path.</param>
            <param name="pathExt">The (file) extension to add to the new path.</param>
            <returns>A path that doesn't relate to any existing file or directory.</returns>
            <example>
            Assuming the directory <c>C:\SomeDir\</c> contains the file <c>File.txt</c>,
            the code <c>PathHelper.GetFreePath(@"C:\SomeDir\File", ".txt");</c>
            will return <c>C:\SomeDir\File (2).txt</c>.
            </example>
        </member>
        <member name="M:Duality.PathHelper.IsPathLocatedIn(System.String,System.String)">
            <summary>
            Returns whether one path is a sub-path of another.
            </summary>
            <param name="path">The supposed sub-path.</param>
            <param name="baseDir">The (directory) path in which the supposed sub-path might be located in.</param>
            <returns>True, if <c>path</c> is a sub-path of <c>baseDir</c>.</returns>
            <example>
            <c>PathHelper.IsPathLocatedIn(@"C:\SomeDir\SubDir", @"C:\SomeDir")</c> will return true.
            </example>
        </member>
        <member name="M:Duality.PathHelper.MakeFilePathRelative(System.String,System.String)">
            <summary>
            Returns the relative path from one path to another.
            </summary>
            <param name="filePath">The path to make relative.</param>
            <param name="relativeToDir">The path to make it relative to.</param>
            <returns>A path that, if <see cref="M:System.IO.Path.Combine(System.String,System.String)">combined</see> with <c>relativeTo</c>, equals the original path.</returns>
            <example>
            <c>PathHelper.MakePathRelative(@"C:\SomeDir\SubDir\File.txt", @"C:\SomeDir")</c> will return <c>SubDir\File.txt</c>.
            </example>
        </member>
        <member name="M:Duality.PathHelper.GetMutualDirectory(System.String,System.String)">
            <summary>
            Returns a mutual base path of two different paths.
            </summary>
            <param name="path">The first path.</param>
            <param name="path2">The second path.</param>
            <returns>The mutual base path of both.</returns>
            <example>
            <c>PathHelper.GetMutualDirectory(@"C:\SomeDir\SubDir\File.txt", @"C:\SomeDir\SubDir2\File.txt")</c> will return <c>C:\SomeDir</c>.
            </example>
        </member>
        <member name="M:Duality.PathHelper.GetValidFileName(System.String)">
            <summary>
            Takes a string that is supposed to be a file name and converts it into an
            actually valid file name, replacing special characters and so on.
            </summary>
            <param name="fileNameWithoutExt">A string that is supposed to be a file name.</param>
            <returns>A valid file name.</returns>
        </member>
        <member name="M:Duality.PathHelper.IsPathVisible(System.String)">
            <summary>
            Returns whether the specified file or directory is visible, i.e. not hidden.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.PathHelper.IsPathValid(System.String)">
            <summary>
            Returns whether the specified path is considered a valid file or folder path.
            Does not check whether the file or folder actually exists, only if the path can
            be validly used to address one.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:Duality.ExtMethodsRandom">
            <summary>
            Provides extension methods for <see cref="T:System.Random">random number generators</see>.
            </summary>
        </member>
        <member name="M:Duality.ExtMethodsRandom.NextByte(System.Random)">
            <summary>
            Returns a random byte.
            </summary>
            <param name="r">A random number generator.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.ExtMethodsRandom.NextByte(System.Random,System.Byte)">
            <summary>
            Returns a random byte.
            </summary>
            <param name="r">A random number generator.</param>
            <param name="max">Exclusive maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.ExtMethodsRandom.NextByte(System.Random,System.Byte,System.Byte)">
            <summary>
            Returns a random byte.
            </summary>
            <param name="r">A random number generator.</param>
            <param name="min">Inclusive minimum value.</param>
            <param name="max">Exclusive maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.ExtMethodsRandom.NextFloat(System.Random)">
            <summary>
            Returns a random float.
            </summary>
            <param name="r">A random number generator.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.ExtMethodsRandom.NextFloat(System.Random,System.Single)">
            <summary>
            Returns a random float.
            </summary>
            <param name="r">A random number generator.</param>
            <param name="max">Exclusive maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.ExtMethodsRandom.NextFloat(System.Random,System.Single,System.Single)">
            <summary>
            Returns a random float.
            </summary>
            <param name="r">A random number generator.</param>
            <param name="min">Inclusive minimum value.</param>
            <param name="max">Exclusive maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.ExtMethodsRandom.NextBool(System.Random)">
            <summary>
            Returns a random bool.
            </summary>
            <param name="r">A random number generator.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.ExtMethodsRandom.NextVector2(System.Random)">
            <summary>
            Returns a random <see cref="T:OpenTK.Vector2"/> with length one.
            </summary>
            <param name="r">A random number generator.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.ExtMethodsRandom.NextVector2(System.Random,System.Single)">
            <summary>
            Returns a random <see cref="T:OpenTK.Vector2"/>.
            </summary>
            <param name="r">A random number generator.</param>
            <param name="radius">Length of the vector.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.ExtMethodsRandom.NextVector2(System.Random,System.Single,System.Single)">
            <summary>
            Returns a random <see cref="T:OpenTK.Vector2"/>.
            </summary>
            <param name="r">A random number generator.</param>
            <param name="minRadius">Minimum length of the vector</param>
            <param name="maxRadius">Maximum length of the vector</param>
            <returns></returns>
        </member>
        <member name="M:Duality.ExtMethodsRandom.NextVector2(System.Random,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns a random <see cref="T:OpenTK.Vector2"/> pointing to a position inside the specified rect.
            </summary>
            <param name="r">A random number generator.</param>
            <param name="x">Rectangle that contains the random vector.</param>
            <param name="y">Rectangle that contains the random vector.</param>
            <param name="w">Rectangle that contains the random vector.</param>
            <param name="h">Rectangle that contains the random vector.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.ExtMethodsRandom.NextVector2(System.Random,Duality.Rect)">
            <summary>
            Returns a random <see cref="T:OpenTK.Vector2"/> pointing to a position inside the specified rect.
            </summary>
            <param name="r">A random number generator.</param>
            <param name="rect">Rectangle that contains the random vector.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.ExtMethodsRandom.NextVector3(System.Random)">
            <summary>
            Returns a random <see cref="T:OpenTK.Vector3"/> with length one.
            </summary>
            <param name="r">A random number generator.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.ExtMethodsRandom.NextVector3(System.Random,System.Single)">
            <summary>
            Returns a random <see cref="T:OpenTK.Vector3"/>.
            </summary>
            <param name="r">A random number generator.</param>
            <param name="radius">Maximum length of the vector.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.ExtMethodsRandom.NextVector3(System.Random,System.Single,System.Single)">
            <summary>
            Returns a random <see cref="T:OpenTK.Vector3"/>.
            </summary>
            <param name="r">A random number generator.</param>
            <param name="minRadius">Minimum length of the vector</param>
            <param name="maxRadius">Maximum length of the vector</param>
            <returns></returns>
        </member>
        <member name="M:Duality.ExtMethodsRandom.NextVector3(System.Random,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns a random <see cref="T:OpenTK.Vector3"/> pointing to a position inside the specified cube.
            </summary>
            <param name="r">A random number generator.</param>
            <param name="x">Cube that contains the random vector.</param>
            <param name="y">Cube that contains the random vector.</param>
            <param name="w">Cube that contains the random vector.</param>
            <param name="h">Cube that contains the random vector.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.ExtMethodsRandom.NextColorRGBA(System.Random)">
            <summary>
            Returns a random <see cref="T:Duality.ColorFormat.ColorRgba"/>.
            </summary>
            <param name="r">A random number generator.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.ExtMethodsRandom.NextColorHSVA(System.Random)">
            <summary>
            Returns a random <see cref="T:Duality.ColorFormat.ColorHsva"/>.
            </summary>
            <param name="r">A random number generator.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.ExtMethodsRandom.WeightedNext``1(System.Random,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Returns a random value from a weighted value pool.
            </summary>
            <typeparam name="T">Type of the random values.</typeparam>
            <param name="r">A random number generator.</param>
            <param name="values">A pool of values.</param>
            <param name="weights">One weight for each value in the pool.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.ExtMethodsRandom.WeightedNext``1(System.Random,System.Collections.Generic.IEnumerable{``0},System.Single[])">
            <summary>
            Returns a random value from a weighted value pool.
            </summary>
            <typeparam name="T">Type of the random values.</typeparam>
            <param name="r">A random number generator.</param>
            <param name="values">A pool of values.</param>
            <param name="weights">One weight for each value in the pool.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.ExtMethodsRandom.WeightedNext``1(System.Random,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,System.Single}})">
            <summary>
            Returns a random value from a weighted value pool.
            </summary>
            <typeparam name="T">Type of the random values.</typeparam>
            <param name="r">A random number generator.</param>
            <param name="weightedValues">A weighted value pool.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.ExtMethodsRandom.WeightedNext``1(System.Random,System.Collections.Generic.KeyValuePair{``0,System.Single}[])">
            <summary>
            Returns a random value from a weighted value pool.
            </summary>
            <typeparam name="T">Type of the random values.</typeparam>
            <param name="r">A random number generator.</param>
            <param name="weightedValues">A weighted value pool.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.ExtMethodsRandom.OneOf``1(System.Random,``0[])">
            <summary>
            Returns one randomly selected element.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="r"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.ExtMethodsRandom.OneOf``1(System.Random,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns one randomly selected element.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="r"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="T:Duality.Canvas">
            <summary>
            Provides high level drawing operations on top of an existing <see cref="T:Duality.IDrawDevice"/>. However, this class is not designed
            for drawing large batches of primitives / vertices at once. For large amounts of primitives you should consider directly 
            using the underlying IDrawDevice instead to achieve best performance.
            </summary>
        </member>
        <member name="M:Duality.Canvas.PushState">
            <summary>
            Adds a clone of the <see cref="P:Duality.Canvas.CurrentState">current state</see> on top of the internal
            <see cref="T:Duality.Canvas.State"/> stack.
            </summary>
        </member>
        <member name="M:Duality.Canvas.PopState">
            <summary>
            Removes the topmost <see cref="T:Duality.Canvas.State"/> from the internal State stack.
            </summary>
        </member>
        <member name="M:Duality.Canvas.DrawVertices``1(``0[],Duality.VertexMode)">
            <summary>
            Draws a predefined set of vertices using the Canvas transformation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="vertices"></param>
            <param name="mode"></param>
        </member>
        <member name="M:Duality.Canvas.DrawPolygon(OpenTK.Vector2[],System.Single)">
            <summary>
            Draws a convex polygon. All vertices share the same Z value.
            </summary>
            <param name="points"></param>
            <param name="z"></param>
        </member>
        <member name="M:Duality.Canvas.DrawSphere(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a three-dimensional sphere.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="r"></param>
        </member>
        <member name="M:Duality.Canvas.DrawLine(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a three-dimensional line.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="z2"></param>
        </member>
        <member name="M:Duality.Canvas.DrawLine(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a flat line.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="x2"></param>
            <param name="y2"></param>
        </member>
        <member name="M:Duality.Canvas.DrawDashLine(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,Duality.Canvas.DashPattern,System.Single)">
            <summary>
            Draws a three-dimensional line.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="z2"></param>
        </member>
        <member name="M:Duality.Canvas.DrawDashLine(System.Single,System.Single,System.Single,System.Single,Duality.Canvas.DashPattern,System.Single)">
            <summary>
            Draws a flat line.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="x2"></param>
            <param name="y2"></param>
        </member>
        <member name="M:Duality.Canvas.DrawThickLine(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a thick, three-dimensional line.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="z2"></param>
        </member>
        <member name="M:Duality.Canvas.DrawThickLine(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a thick, flat line.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="x2"></param>
            <param name="y2"></param>
        </member>
        <member name="M:Duality.Canvas.DrawCross(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a cross at the specified position.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="r"></param>
        </member>
        <member name="M:Duality.Canvas.DrawCross(System.Single,System.Single,System.Single)">
            <summary>
            Draws a cross at the specified position.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="r"></param>
        </member>
        <member name="M:Duality.Canvas.DrawRect(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a rectangle.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
            <param name="h"></param>
        </member>
        <member name="M:Duality.Canvas.DrawRect(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a rectangle.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="w"></param>
            <param name="h"></param>
        </member>
        <member name="M:Duality.Canvas.DrawOvalSegment(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Draws the section of an oval.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
            <param name="h"></param>
            <param name="minAngle"></param>
            <param name="maxAngle"></param>
        </member>
        <member name="M:Duality.Canvas.DrawOvalSegment(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Draws the section of an oval.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="w"></param>
            <param name="h"></param>
            <param name="minAngle"></param>
            <param name="maxAngle"></param>
        </member>
        <member name="M:Duality.Canvas.DrawCircleSegment(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Draws the section of a circle.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="r"></param>
            <param name="minAngle"></param>
            <param name="maxAngle"></param>
        </member>
        <member name="M:Duality.Canvas.DrawCircleSegment(System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Draws the section of a circle
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="r"></param>
            <param name="minAngle"></param>
            <param name="maxAngle"></param>
        </member>
        <member name="M:Duality.Canvas.DrawOval(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws the section of an oval.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
            <param name="h"></param>
            <param name="minAngle"></param>
            <param name="maxAngle"></param>
        </member>
        <member name="M:Duality.Canvas.DrawOval(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws the section of an oval.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="w"></param>
            <param name="h"></param>
            <param name="minAngle"></param>
            <param name="maxAngle"></param>
        </member>
        <member name="M:Duality.Canvas.DrawCircle(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws the section of a circle.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="r"></param>
            <param name="minAngle"></param>
            <param name="maxAngle"></param>
        </member>
        <member name="M:Duality.Canvas.DrawCircle(System.Single,System.Single,System.Single)">
            <summary>
            Draws the section of a circle
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="r"></param>
            <param name="minAngle"></param>
            <param name="maxAngle"></param>
        </member>
        <member name="M:Duality.Canvas.FillConvexPolygon(OpenTK.Vector2[],System.Single)">
            <summary>
            Fills a convex polygon. All vertices share the same Z value.
            </summary>
            <param name="points"></param>
            <param name="z"></param>
        </member>
        <member name="M:Duality.Canvas.FillThickLine(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Fills a three-dimensional line.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="z2"></param>
        </member>
        <member name="M:Duality.Canvas.FillThickLine(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Fills a thick, flat line.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="x2"></param>
            <param name="y2"></param>
        </member>
        <member name="M:Duality.Canvas.FillOvalSegment(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Fills the section of an oval.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
            <param name="h"></param>
            <param name="minAngle"></param>
            <param name="maxAngle"></param>
        </member>
        <member name="M:Duality.Canvas.FillOvalSegment(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Fills the section of an oval.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="w"></param>
            <param name="h"></param>
            <param name="minAngle"></param>
            <param name="maxAngle"></param>
        </member>
        <member name="M:Duality.Canvas.FillCircleSegment(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Fills the section of a circle.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="r"></param>
            <param name="minAngle"></param>
            <param name="maxAngle"></param>
        </member>
        <member name="M:Duality.Canvas.FillCircleSegment(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Fills the section of a circle
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="r"></param>
            <param name="minAngle"></param>
            <param name="maxAngle"></param>
        </member>
        <member name="M:Duality.Canvas.FillOval(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Fills an oval.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
            <param name="h"></param>
        </member>
        <member name="M:Duality.Canvas.FillOval(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Fills an oval
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="w"></param>
            <param name="h"></param>
        </member>
        <member name="M:Duality.Canvas.FillCircle(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Fills a circle.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="r"></param>
        </member>
        <member name="M:Duality.Canvas.FillCircle(System.Single,System.Single,System.Single)">
            <summary>
            Fills a circle.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="r"></param>
        </member>
        <member name="M:Duality.Canvas.FillRect(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Fills a rectangle.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
            <param name="h"></param>
        </member>
        <member name="M:Duality.Canvas.FillRect(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Fills a rectangle.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="w"></param>
            <param name="h"></param>
        </member>
        <member name="M:Duality.Canvas.DrawTexturedRect(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a textured rectangle.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
            <param name="h"></param>
            <param name="uvX">UV x coordinate</param>
            <param name="uvY">UV y coordinate</param>
            <param name="uvW">UV coordinate width</param>
            <param name="uvH">UV coordinate height</param>
        </member>
        <member name="M:Duality.Canvas.DrawTexturedRect(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a textured rectangle.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="uvX">UV x coordinate</param>
            <param name="uvY">UV y coordinate</param>
            <param name="uvW">UV coordinate width</param>
            <param name="uvH">UV coordinate height</param>
        </member>
        <member name="M:Duality.Canvas.DrawTexturedRect(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a textured rectangle.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
            <param name="h"></param>
        </member>
        <member name="M:Duality.Canvas.DrawTexturedRect(System.Single,System.Single,System.Single)">
            <summary>
            Draws a textured rectangle.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Duality.Canvas.DrawTexturedRect(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a textured rectangle.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="w"></param>
            <param name="h"></param>
            <param name="uvX">UV x coordinate</param>
            <param name="uvY">UV y coordinate</param>
            <param name="uvW">UV coordinate width</param>
            <param name="uvH">UV coordinate height</param>
        </member>
        <member name="M:Duality.Canvas.DrawTexturedRect(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a textured rectangle.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="uvX">UV x coordinate</param>
            <param name="uvY">UV y coordinate</param>
            <param name="uvW">UV coordinate width</param>
            <param name="uvH">UV coordinate height</param>
        </member>
        <member name="M:Duality.Canvas.DrawTexturedRect(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a textured rectangle.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="w"></param>
            <param name="h"></param>
        </member>
        <member name="M:Duality.Canvas.DrawTexturedRect(System.Single,System.Single)">
            <summary>
            Draws a textured rectangle.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Duality.Canvas.DrawText(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Draws the specified text.
            </summary>
            <param name="text"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Duality.Canvas.DrawText(System.String[],System.Single,System.Single,System.Single)">
            <summary>
            Draws the specified text.
            </summary>
            <param name="text"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Duality.Canvas.DrawText(Duality.FormattedText,System.Single,System.Single,System.Single,Duality.Resources.BatchInfo)">
            <summary>
            Draws the specified formatted text.
            </summary>
            <param name="text"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="iconMat"></param>
        </member>
        <member name="M:Duality.Canvas.DrawTextBackground(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a simple background rectangle for the specified text. Its color is automatically determined
            based on the current state in order to generate an optimal contrast to the text.
            </summary>
            <param name="text"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Duality.Canvas.DrawTextBackground(System.String[],System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a simple background rectangle for the specified text. Its color is automatically determined
            based on the current state in order to generate an optimal contrast to the text.
            </summary>
            <param name="text"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Duality.Canvas.DrawTextBackground(Duality.FormattedText,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a simple background rectangle for the specified text. Its color is automatically determined
            based on the current state in order to generate an optimal contrast to the text.
            </summary>
            <param name="text"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Duality.Canvas.MeasureText(System.String)">
            <summary>
            Measures the specified text using the currently used <see cref="T:Duality.Resources.Font"/>.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Canvas.MeasureText(System.String[])">
            <summary>
            Measures the specified text using the currently used <see cref="T:Duality.Resources.Font"/>.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="P:Duality.Canvas.DrawDevice">
            <summary>
            [GET] The underlying <see cref="T:Duality.IDrawDevice"/> that is used for drawing.
            </summary>
        </member>
        <member name="P:Duality.Canvas.CurrentState">
            <summary>
            [GET / SET] The Canvas' current <see cref="T:Duality.Canvas.State"/>.
            </summary>
        </member>
        <member name="T:Duality.Canvas.State">
            <summary>
            Describes the state of a <see cref="T:Duality.Canvas"/>.
            </summary>
        </member>
        <member name="M:Duality.Canvas.State.Clone">
            <summary>
            Creates a clone of this State.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duality.Canvas.State.Reset">
            <summary>
            Resets this State to its initial settings.
            </summary>
        </member>
        <member name="M:Duality.Canvas.State.SetMaterial(Duality.Resources.BatchInfo)">
            <summary>
            Sets the States drawing material.
            </summary>
            <param name="material"></param>
        </member>
        <member name="M:Duality.Canvas.State.SetMaterial(Duality.ContentRef{Duality.Resources.Material})">
            <summary>
            Sets the States drawing material.
            </summary>
            <param name="material"></param>
        </member>
        <member name="P:Duality.Canvas.State.Material">
            <summary>
            [GET] The material that is used for drawing.
            </summary>
        </member>
        <member name="P:Duality.Canvas.State.TextFont">
            <summary>
            [GET / SET] The <see cref="T:Duality.Resources.Font"/> to use for text rendering.
            </summary>
        </member>
        <member name="P:Duality.Canvas.State.TextInvariantScale">
            <summary>
            [GET / SET] If true, text does not scale due to its position in space
            </summary>
        </member>
        <member name="P:Duality.Canvas.State.ColorTint">
            <summary>
            [GET / SET] The color tint to use for drawing.
            </summary>
        </member>
        <member name="P:Duality.Canvas.State.ZOffset">
            <summary>
            [GET / SET] A Z-Offset value that is added to each emitted vertices Z coordinate after all projection calculations have been done.
            </summary>
        </member>
        <member name="P:Duality.Canvas.State.TransformAngle">
            <summary>
            [GET / SET] The angle by which all shapes are transformed.
            </summary>
        </member>
        <member name="P:Duality.Canvas.State.TransformScale">
            <summary>
            [GET / SET] The scale by which all shapes are transformed.
            </summary>
        </member>
        <member name="P:Duality.Canvas.State.TransformHandle">
            <summary>
            [GET / SET] The handle used for transforming all shapes.
            </summary>
        </member>
        <member name="T:Duality.FormattedText">
            <summary>
            Provides functionality for analyzing, handling and displaying formatted text.
            </summary>
        </member>
        <member name="F:Duality.FormattedText.FormatSlash">
            <summary>
            Format string for displaying a slash (/) character.
            </summary>
        </member>
        <member name="F:Duality.FormattedText.FormatElement">
            <summary>
            Format string for beginning a new text element.
            </summary>
        </member>
        <member name="F:Duality.FormattedText.FormatColor">
            <summary>
            Format string for changing the curren text color.
            </summary>
        </member>
        <member name="F:Duality.FormattedText.FormatFont">
            <summary>
            Format string for changing the current <see cref="T:Duality.Resources.Font"/>.
            </summary>
        </member>
        <member name="F:Duality.FormattedText.FormatIcon">
            <summary>
            Format string for inserting an icon.
            </summary>
        </member>
        <member name="F:Duality.FormattedText.FormatAlignLeft">
            <summary>
            Format string for changing the current text alignment to "Left".
            </summary>
        </member>
        <member name="F:Duality.FormattedText.FormatAlignRight">
            <summary>
            Format string for changing the current text alignment to "Right".
            </summary>
        </member>
        <member name="F:Duality.FormattedText.FormatAlignCenter">
            <summary>
            Format string for changing the current text alignment to "Center".
            </summary>
        </member>
        <member name="F:Duality.FormattedText.FormatNewline">
            <summary>
            Format string for inserting a line break.
            </summary>
        </member>
        <member name="M:Duality.FormattedText.Clone">
            <summary>
            Creates a deep copy of the FormattedText and returns it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duality.FormattedText.ApplySource(System.String)">
            <summary>
            Applies a new source text.
            </summary>
            <param name="text">The new source text to apply. If null, the current source text is re-applied.</param>
        </member>
        <member name="M:Duality.FormattedText.EmitVertices(Duality.VertexFormat.VertexC1P3T2[][]@,Duality.VertexFormat.VertexC1P3T2[]@,System.Single,System.Single,System.Single)">
            <summary>
            Emits sets of vertices for glyphs and icons based on this formatted text. To render it, use each set of vertices combined with
            the corresponding Fonts <see cref="T:Duality.Resources.Material"/>.
            </summary>
            <param name="vertText">One set of vertices for each Font that is available to this ForattedText.</param>
            <param name="vertIcons">A set of icon vertices.</param>
            <param name="x">An X-Offset applied to the position of each emitted vertex.</param>
            <param name="y">An Y-Offset applied to the position of each emitted vertex.</param>
            <param name="z">An Z-Offset applied to the position of each emitted vertex.</param>
        </member>
        <member name="M:Duality.FormattedText.EmitVertices(Duality.VertexFormat.VertexC1P3T2[][]@,Duality.VertexFormat.VertexC1P3T2[]@,System.Single,System.Single,Duality.ColorFormat.ColorRgba)">
            <summary>
            Emits sets of vertices for glyphs and icons based on this formatted text. To render it, use each set of vertices combined with
            the corresponding Fonts <see cref="T:Duality.Resources.Material"/>.
            </summary>
            <param name="vertText">One set of vertices for each Font that is available to this ForattedText.</param>
            <param name="vertIcons">A set of icon vertices.</param>
            <param name="x">An X-Offset applied to the position of each emitted vertex.</param>
            <param name="y">An Y-Offset applied to the position of each emitted vertex.</param>
            <param name="clr">The color value that is applied to each emitted vertex.</param>
        </member>
        <member name="M:Duality.FormattedText.EmitVertices(Duality.VertexFormat.VertexC1P3T2[][]@,Duality.VertexFormat.VertexC1P3T2[]@,System.Single,System.Single,System.Single,Duality.ColorFormat.ColorRgba,System.Single,System.Single)">
            <summary>
            Emits sets of vertices for glyphs and icons based on this formatted text. To render it, use each set of vertices combined with
            the corresponding Fonts <see cref="T:Duality.Resources.Material"/>.
            </summary>
            <param name="vertText">One set of vertices for each Font that is available to this ForattedText.</param>
            <param name="vertIcons">A set of icon vertices.</param>
            <param name="x">An X-Offset applied to the position of each emitted vertex.</param>
            <param name="y">An Y-Offset applied to the position of each emitted vertex.</param>
            <param name="z">An Z-Offset applied to the position of each emitted vertex.</param>
            <param name="clr">The color value that is applied to each emitted vertex.</param>
            <param name="angle">An angle by which the text is rotated (before applying the offset).</param>
            <param name="scale">A factor by which the text is scaled (before applying the offset).</param>
        </member>
        <member name="M:Duality.FormattedText.EmitVertices(Duality.VertexFormat.VertexC1P3T2[][]@,Duality.VertexFormat.VertexC1P3T2[]@,System.Single,System.Single,System.Single,Duality.ColorFormat.ColorRgba,OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Emits sets of vertices for glyphs and icons based on this formatted text. To render it, use each set of vertices combined with
            the corresponding Fonts <see cref="T:Duality.Resources.Material"/>.
            </summary>
            <param name="vertText">One set of vertices for each Font that is available to this ForattedText.</param>
            <param name="vertIcons">A set of icon vertices.</param>
            <param name="x">An X-Offset applied to the position of each emitted vertex.</param>
            <param name="y">An Y-Offset applied to the position of each emitted vertex.</param>
            <param name="z">An Z-Offset applied to the position of each emitted vertex.</param>
            <param name="clr">The color value that is applied to each emitted vertex.</param>
            <param name="xDot">Dot product base for the transformed vertices.</param>
            <param name="yDot">Dot product base for the transformed vertices.</param>
        </member>
        <member name="M:Duality.FormattedText.EmitVertices(Duality.VertexFormat.VertexC1P3T2[][]@,Duality.VertexFormat.VertexC1P3T2[]@)">
            <summary>
            Emits sets of vertices for glyphs and icons based on this formatted text. To render it, use each set of vertices combined with
            the corresponding Fonts <see cref="T:Duality.Resources.Material"/>.
            </summary>
            <param name="vertText">One set of vertices for each Font that is available to this ForattedText.</param>
            <param name="vertIcons">A set of icon vertices.</param>
        </member>
        <member name="M:Duality.FormattedText.UpdateVertexCache">
            <summary>
            Updates the vertex cache that is used to optimize calls to <see cref="M:Duality.FormattedText.EmitVertices(Duality.VertexFormat.VertexC1P3T2[][]@,Duality.VertexFormat.VertexC1P3T2[]@,System.Single,System.Single,System.Single)"/>. However, this is normally done automatically.
            </summary>
        </member>
        <member name="M:Duality.FormattedText.RenderToBitmap(System.String,System.Drawing.Image,System.Single,System.Single,System.Drawing.Image)">
            <summary>
            Renders a text to the specified target Image.
            </summary>
            <param name="text"></param>
            <param name="target"></param>
        </member>
        <member name="M:Duality.FormattedText.RenderToBitmap(System.String,Duality.Resources.Pixmap.Layer,System.Single,System.Single,Duality.Resources.Pixmap.Layer)">
            <summary>
            Renders a text to the specified target Image.
            </summary>
            <param name="text"></param>
            <param name="target"></param>
        </member>
        <member name="M:Duality.FormattedText.Measure">
            <summary>
            Measures the formatted text block.
            </summary>
            <returns>A <see cref="T:Duality.FormattedText.Metrics"/> object that describes this FormattedText.</returns>
        </member>
        <member name="P:Duality.FormattedText.SourceText">
            <summary>
            [GET / SET] The source text that is used, containing all format strings as well as the displayed text.
            </summary>
        </member>
        <member name="P:Duality.FormattedText.Icons">
            <summary>
            [GET / SET] A set of icons that is available in the text.
            If you modify this value without re-assigning it, be sure to call <see cref="M:Duality.FormattedText.UpdateVertexCache"/>.
            </summary>
        </member>
        <member name="P:Duality.FormattedText.FlowAreas">
            <summary>
            [GET / SET] A set of flow areas to be considered in word wrap.
            If you modify this value without re-assigning it, be sure to call <see cref="M:Duality.FormattedText.UpdateVertexCache"/>.
            </summary>
        </member>
        <member name="P:Duality.FormattedText.Fonts">
            <summary>
            [GET / SET] A set of <see cref="T:Duality.Resources.Font">Fonts</see> that is available in the text.
            If you modify this value without re-assigning it, be sure to call <see cref="M:Duality.FormattedText.UpdateVertexCache"/>.
            </summary>
        </member>
        <member name="P:Duality.FormattedText.MaxWidth">
            <summary>
            [GET / SET] The maximum width of the displayed text block. Zero deactivates maximum width.
            </summary>
        </member>
        <member name="P:Duality.FormattedText.MaxHeight">
            <summary>
            [GET / SET] The maximum height of the displayed text block. Zero deactivates maximum height.
            </summary>
        </member>
        <member name="P:Duality.FormattedText.WordWrap">
            <summary>
            [GET / SET] The word wrapping behaviour to use.
            </summary>
        </member>
        <member name="P:Duality.FormattedText.DisplayedText">
            <summary>
            [GET] The text that is actually displayed.
            </summary>
        </member>
        <member name="P:Duality.FormattedText.Elements">
            <summary>
            [GET] The formatted text elements that have been generated analyzing the incoming source text.
            </summary>
        </member>
        <member name="T:Duality.FormattedText.Element">
            <summary>
            Represents an element of a formatted text.
            </summary>
        </member>
        <member name="T:Duality.FormattedText.TextElement">
            <summary>
            Contains a text string.
            </summary>
        </member>
        <member name="P:Duality.FormattedText.TextElement.Text">
            <summary>
            [GET] text string this element contains.
            </summary>
        </member>
        <member name="T:Duality.FormattedText.IconElement">
            <summary>
            Contains an icon.
            </summary>
        </member>
        <member name="P:Duality.FormattedText.IconElement.IconIndex">
            <summary>
            [GET] The index of the icon to display at this elements position.
            </summary>
        </member>
        <member name="T:Duality.FormattedText.NewLineElement">
            <summary>
            Forces a line break at this position.
            </summary>
        </member>
        <member name="T:Duality.FormattedText.FontChangeElement">
            <summary>
            Changes the currently used <see cref="T:Duality.Resources.Font"/>.
            </summary>
        </member>
        <member name="P:Duality.FormattedText.FontChangeElement.FontIndex">
            <summary>
            [GET] The index of the Font to switch to.
            </summary>
        </member>
        <member name="T:Duality.FormattedText.ColorChangeElement">
            <summary>
            Changes the currently used <see cref="T:Duality.ColorFormat.ColorRgba"/>.
            </summary>
        </member>
        <member name="P:Duality.FormattedText.ColorChangeElement.Color">
            <summary>
            [GET] The new color to use.
            </summary>
        </member>
        <member name="T:Duality.FormattedText.AlignChangeElement">
            <summary>
            Changes the current lines' alignment. May be <see cref="F:Duality.Alignment.Left"/>, <see cref="F:Duality.Alignment.Right"/> or <see cref="F:Duality.Alignment.Center"/>.
            </summary>
        </member>
        <member name="P:Duality.FormattedText.AlignChangeElement.Align">
            <summary>
            [GET] The alignment to use for the current line.
            </summary>
        </member>
        <member name="T:Duality.FormattedText.Icon">
            <summary>
            An icon that can be displayed inside the formatted text.
            </summary>
        </member>
        <member name="F:Duality.FormattedText.Icon.uvRect">
            <summary>
            The icons UV-Coordinates on the icon texture that will be used for rendering icons.
            </summary>
        </member>
        <member name="F:Duality.FormattedText.Icon.size">
            <summary>
            The icons display size.
            </summary>
        </member>
        <member name="T:Duality.FormattedText.FlowArea">
            <summary>
            An rectangular area that will be avoided by the text flow.
            </summary>
        </member>
        <member name="F:Duality.FormattedText.FlowArea.width">
            <summary>
            The areas width.
            </summary>
        </member>
        <member name="F:Duality.FormattedText.FlowArea.height">
            <summary>
            The areas height.
            </summary>
        </member>
        <member name="F:Duality.FormattedText.FlowArea.y">
            <summary>
            The areas y-Coordinate.
            </summary>
        </member>
        <member name="F:Duality.FormattedText.FlowArea.alignRight">
            <summary>
            Whether the area is located at the right edge of the text area, instead of the left edge.
            </summary>
        </member>
        <member name="T:Duality.FormattedText.Metrics">
            <summary>
            Provides information about a formatted texts metrics.
            </summary>
        </member>
        <member name="P:Duality.FormattedText.Metrics.Size">
            <summary>
            [GET] The size of the formatted text block as whole.
            </summary>
        </member>
        <member name="P:Duality.FormattedText.Metrics.LineCount">
            <summary>
            [GET] The number of lines.
            </summary>
        </member>
        <member name="P:Duality.FormattedText.Metrics.LineBounds">
            <summary>
            [GET] Each lines boundary.
            </summary>
        </member>
        <member name="P:Duality.FormattedText.Metrics.ElementBounds">
            <summary>
            [GET] Each formatted text elements individual boundary.
            </summary>
        </member>
        <member name="T:Duality.FormattedText.WrapMode">
            <summary>
            Describes word wrap behaviour.
            </summary>
        </member>
        <member name="F:Duality.FormattedText.WrapMode.Glyph">
            <summary>
            Word wrap is allowed at each glyph.
            </summary>
        </member>
        <member name="F:Duality.FormattedText.WrapMode.Word">
            <summary>
            Word wrap is allowed after / before each word, but not in the middle of one.
            </summary>
        </member>
        <member name="F:Duality.FormattedText.WrapMode.Element">
            <summary>
            Word wrap is only allowed between two separate formatted text elements.
            </summary>
        </member>
        <member name="T:Duality.MathF">
            <summary>
            Provides math utility methods and float versions of <see cref="T:System.Math"/> to fit
            Duality <see cref="T:System.Single"/> arithmetics. 
            </summary>
        </member>
        <member name="F:Duality.MathF.E">
            <summary>
            Euler's number, base of the natural logarithm. Approximately 2.7182818284.
            </summary>
        </member>
        <member name="F:Duality.MathF.Pi">
            <summary>
            Mmmhh... pie!
            </summary>
        </member>
        <member name="F:Duality.MathF.PiOver2">
            <summary>
            Equals <see cref="F:Duality.MathF.Pi"/> / 2.
            </summary>
        </member>
        <member name="F:Duality.MathF.PiOver3">
            <summary>
            Equals <see cref="F:Duality.MathF.Pi"/> / 3.
            </summary>
        </member>
        <member name="F:Duality.MathF.PiOver4">
            <summary>
            Equals <see cref="F:Duality.MathF.Pi"/> / 4.
            </summary>
        </member>
        <member name="F:Duality.MathF.PiOver6">
            <summary>
            Equals <see cref="F:Duality.MathF.Pi"/> / 6.
            </summary>
        </member>
        <member name="F:Duality.MathF.TwoPi">
            <summary>
            Equals 2 * <see cref="F:Duality.MathF.Pi"/>.
            </summary>
        </member>
        <member name="F:Duality.MathF.RadAngle1">
            <summary>
            A one degree angle in radians.
            </summary>
        </member>
        <member name="F:Duality.MathF.RadAngle30">
            <summary>
            A 30 degree angle in radians. Equals <see cref="F:Duality.MathF.PiOver6"/>.
            </summary>
        </member>
        <member name="F:Duality.MathF.RadAngle45">
            <summary>
            A 45 degree angle in radians. Equals <see cref="F:Duality.MathF.PiOver4"/>.
            </summary>
        </member>
        <member name="F:Duality.MathF.RadAngle90">
            <summary>
            A 90 degree angle in radians. Equals <see cref="F:Duality.MathF.PiOver2"/>.
            </summary>
        </member>
        <member name="F:Duality.MathF.RadAngle180">
            <summary>
            A 180 degree angle in radians. Equals <see cref="F:Duality.MathF.Pi"/>.
            </summary>
        </member>
        <member name="F:Duality.MathF.RadAngle270">
            <summary>
            A 270 degree angle in radians. Equals <see cref="F:Duality.MathF.Pi"/>.
            </summary>
        </member>
        <member name="F:Duality.MathF.RadAngle360">
            <summary>
            A 360 degree angle in radians. Equals <see cref="F:Duality.MathF.TwoPi"/>.
            </summary>
        </member>
        <member name="M:Duality.MathF.SafeToDecimal(System.Single)">
            <summary>
            Converts the specified float value to decimal and clamps it if necessary.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.MathF.Abs(System.Single)">
            <summary>
            Returns the absolute value of a <see cref="T:System.Single"/>.
            </summary>
            <param name="v">A number.</param>
            <returns>The absolute value of the number.</returns>
        </member>
        <member name="M:Duality.MathF.Abs(System.Int32)">
            <summary>
            Returns the absolute value of a <see cref="T:System.Int32"/>.
            </summary>
            <param name="v">A number.</param>
            <returns>The absolute value of the number.</returns>
        </member>
        <member name="M:Duality.MathF.Ceiling(System.Single)">
            <summary>
            Returns the lowest whole-number bigger than the specified one. (Rounds up)
            </summary>
            <param name="v">A number.</param>
            <returns>The rounded number.</returns>
            <seealso cref="M:Duality.MathF.Floor(System.Single)"/>
        </member>
        <member name="M:Duality.MathF.Floor(System.Single)">
            <summary>
            Returns the highest whole-number smaller than the specified one. (Rounds down)
            </summary>
            <param name="v">A number.</param>
            <returns>The rounded number.</returns>
            <seealso cref="M:Duality.MathF.Ceiling(System.Single)"/>
        </member>
        <member name="M:Duality.MathF.Round(System.Single)">
            <summary>
            Rounds the specified value.
            </summary>
            <param name="v">A number.</param>
            <returns>The rounded number.</returns>
        </member>
        <member name="M:Duality.MathF.Round(System.Single,System.Int32)">
            <summary>
            Rounds the specified value to a certain number of fraction digits.
            </summary>
            <param name="v">A number.</param>
            <param name="digits">The number of fraction digits to round to.</param>
            <returns>The rounded number.</returns>
        </member>
        <member name="M:Duality.MathF.Round(System.Single,System.MidpointRounding)">
            <summary>
            Rounds the specified value.
            </summary>
            <param name="v">A number.</param>
            <param name="mode">Specifies what happens if the value is exactly inbetween two numbers.</param>
            <returns>The rounded number.</returns>
        </member>
        <member name="M:Duality.MathF.Round(System.Single,System.Int32,System.MidpointRounding)">
            <summary>
            Rounds the specified value to a certain number of fraction digits.
            </summary>
            <param name="v">A number.</param>
            <param name="digits">The number of fraction digits to round to.</param>
            <param name="mode">Specifies what happens if the value is exactly inbetween two numbers.</param>
            <returns>The rounded number.</returns>
        </member>
        <member name="M:Duality.MathF.RoundToInt(System.Single)">
            <summary>
            Rounds the specified value to an integer value.
            </summary>
            <param name="v">A number.</param>
            <returns>The rounded number as <see cref="T:System.Int32"/>.</returns>
            <seealso cref="M:Duality.MathF.Round(System.Single)"/>
        </member>
        <member name="M:Duality.MathF.RoundToInt(System.Single,System.MidpointRounding)">
            <summary>
            Rounds the specified value to an integer value.
            </summary>
            <param name="v">A number.</param>
            <param name="mode">Specifies what happens if the value is exactly inbetween two numbers.</param>
            <returns>The rounded number as <see cref="T:System.Int32"/>.</returns>
            <seealso cref="M:Duality.MathF.Round(System.Single,System.MidpointRounding)"/>
        </member>
        <member name="M:Duality.MathF.Sign(System.Single)">
            <summary>
            Returns the sign of a value.
            </summary>
            <param name="v">A number.</param>
            <returns>-1 if negative, 1 if positive and 0 if zero.</returns>
        </member>
        <member name="M:Duality.MathF.Sign(System.Int32)">
            <summary>
            Returns the sign of a value.
            </summary>
            <param name="v">A number.</param>
            <returns>-1 if negative, 1 if positive and 0 if zero.</returns>
        </member>
        <member name="M:Duality.MathF.Sqrt(System.Single)">
            <summary>
            Returns a numbers square root.
            </summary>
            <param name="v">A number.</param>
            <returns>The numbers square root.</returns>
        </member>
        <member name="M:Duality.MathF.Factorial(System.Int32)">
            <summary>
            Returns the factorial of an integer value.
            </summary>
            <param name="n">A number.</param>
            <returns>The factorial of the number.</returns>
        </member>
        <member name="M:Duality.MathF.Min(System.Single,System.Single)">
            <summary>
            Returns the lower of two values.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns>The lowest value.</returns>
        </member>
        <member name="M:Duality.MathF.Min(System.Single,System.Single,System.Single)">
            <summary>
            Returns the lowest of three values.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <param name="v3"></param>
            <returns>The lowest value.</returns>
        </member>
        <member name="M:Duality.MathF.Min(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns the lowest of four values.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <param name="v3"></param>
            <param name="v4"></param>
            <returns>The lowest value.</returns>
        </member>
        <member name="M:Duality.MathF.Min(System.Single[])">
            <summary>
            Returns the lowest of any number of values.
            </summary>
            <param name="v"></param>
            <returns>The lowest value.</returns>
        </member>
        <member name="M:Duality.MathF.Min(System.Int32,System.Int32)">
            <summary>
            Returns the lower of two values.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns>The lowest value.</returns>
        </member>
        <member name="M:Duality.MathF.Min(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the lowest of three values.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <param name="v3"></param>
            <returns>The lowest value.</returns>
        </member>
        <member name="M:Duality.MathF.Min(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the lowest of four values.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <param name="v3"></param>
            <param name="v4"></param>
            <returns>The lowest value.</returns>
        </member>
        <member name="M:Duality.MathF.Min(System.Int32[])">
            <summary>
            Returns the lowest of any number of values.
            </summary>
            <param name="v"></param>
            <returns>The lowest value.</returns>
        </member>
        <member name="M:Duality.MathF.Max(System.Single,System.Single)">
            <summary>
            Returns the higher of two values.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns>The highest value.</returns>
        </member>
        <member name="M:Duality.MathF.Max(System.Single,System.Single,System.Single)">
            <summary>
            Returns the highest of three values.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <param name="v3"></param>
            <returns>The highest value.</returns>
        </member>
        <member name="M:Duality.MathF.Max(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns the highest of four values.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <param name="v3"></param>
            <param name="v4"></param>
            <returns>The highest value.</returns>
        </member>
        <member name="M:Duality.MathF.Max(System.Single[])">
            <summary>
            Returns the highest of any number of values.
            </summary>
            <param name="v"></param>
            <returns>The highest value.</returns>
        </member>
        <member name="M:Duality.MathF.Max(System.Int32,System.Int32)">
            <summary>
            Returns the higher of two values.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns>The highest value.</returns>
        </member>
        <member name="M:Duality.MathF.Max(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the highest of three values.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <param name="v3"></param>
            <returns>The highest value.</returns>
        </member>
        <member name="M:Duality.MathF.Max(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the highest of four values.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <param name="v3"></param>
            <param name="v4"></param>
            <returns>The highest value.</returns>
        </member>
        <member name="M:Duality.MathF.Max(System.Int32[])">
            <summary>
            Returns the highest of any number of values.
            </summary>
            <param name="v"></param>
            <returns>The highest value.</returns>
        </member>
        <member name="M:Duality.MathF.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Clamps a value between minimum and maximum.
            </summary>
            <param name="v">The value to clamp.</param>
            <param name="min">The minimum value that can't be deceeded.</param>
            <param name="max">The maximum value that can't be exceeded.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Duality.MathF.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamps a value between minimum and maximum.
            </summary>
            <param name="v">The value to clamp.</param>
            <param name="min">The minimum value that can't be deceeded.</param>
            <param name="max">The maximum value that can't be exceeded.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Duality.MathF.Exp(System.Single)">
            <summary>
            Returns the specified power of <see cref="F:Duality.MathF.E"/>.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.MathF.Log(System.Single)">
            <summary>
            Returns the natural logarithm of a value.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.MathF.Pow(System.Single,System.Single)">
            <summary>
            Returns the specified power of a value.
            </summary>
            <param name="v">The base value.</param>
            <param name="e">Specifies the power to return.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.MathF.Log(System.Single,System.Single)">
            <summary>
            Returns the logarithm of a value.
            </summary>
            <param name="v">The value whichs logarithm is to be calculated.</param>
            <param name="newBase">The base of the logarithm.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.MathF.Sin(System.Single)">
            <summary>
            Returns the sine value of the specified (radian) angle.
            </summary>
            <param name="angle">A radian angle.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.MathF.Cos(System.Single)">
            <summary>
            Returns the cosine value of the specified (radian) angle.
            </summary>
            <param name="angle">A radian angle.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.MathF.Tan(System.Single)">
            <summary>
            Returns the tangent value of the specified (radian) angle.
            </summary>
            <param name="angle">A radian angle.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.MathF.Asin(System.Single)">
            <summary>
            Returns the inverse sine value of the specified (radian) angle.
            </summary>
            <param name="angle">A radian angle.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.MathF.Acos(System.Single)">
            <summary>
            Returns the inverse cosine value of the specified (radian) angle.
            </summary>
            <param name="angle">A radian angle.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.MathF.Atan(System.Single)">
            <summary>
            Returns the inverse tangent value of the specified (radian) angle.
            </summary>
            <param name="angle">A radian angle.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.MathF.Atan2(System.Single,System.Single)">
            <summary>
            Returns the (radian) angle whose tangent is the quotient of two specified numbers.
            </summary>
            <param name="y">The y coordinate of a point. </param>
            <param name="x">The x coordinate of a point. </param>
            <returns></returns>
        </member>
        <member name="M:Duality.MathF.DegToRad(System.Single)">
            <summary>
            Converts degrees  to radians.
            </summary>
            <param name="deg"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.MathF.RadToDeg(System.Single)">
            <summary>
            Converts radians to degrees.
            </summary>
            <param name="rad"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.MathF.NormalizeVar(System.Single,System.Single,System.Single)">
            <summary>
            Normalizes a value to the given circular area.
            </summary>
            <returns>The normalized value between min (inclusive) and max (exclusive).</returns>
            <example>
            <c>NormalizeVar(480, 0, 360)</c> will return 120.
            </example>
        </member>
        <member name="M:Duality.MathF.NormalizeVar(System.Int32,System.Int32,System.Int32)">
            <summary>
            Normalizes a value to the given circular area.
            </summary>
            <returns>The normalized value between min (inclusive) and max (exclusive).</returns>
            <example>
            <c>NormalizeVar(480, 0, 360)</c> will return 120.
            </example>
        </member>
        <member name="M:Duality.MathF.NormalizeAngle(System.Single)">
            <summary>
            Normalizes a radian angle to values between zero and <see cref="F:Duality.MathF.TwoPi"/>.
            </summary>
            <returns>The normalized value between zero and <see cref="F:Duality.MathF.TwoPi"/>.</returns>
            <example>
            <c>NormalizeAngle(<see cref="F:Duality.MathF.TwoPi"/> + <see cref="F:Duality.MathF.Pi"/>)</c> will return <see cref="F:Duality.MathF.Pi"/>.
            </example>
        </member>
        <member name="M:Duality.MathF.Distance(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns the distance between two points in 2d space.
            </summary>
            <param name="x1">The x-Coordinate of the first point.</param>
            <param name="y1">The y-Coordinate of the first point.</param>
            <param name="x2">The x-Coordinate of the second point.</param>
            <param name="y2">The y-Coordinate of the second point.</param>
            <returns>The distance between both points.</returns>
        </member>
        <member name="M:Duality.MathF.Distance(System.Single,System.Single)">
            <summary>
            Returns the distance between a point and [0,0] in 2d space.
            </summary>
            <param name="x">The x-Coordinate of the point.</param>
            <param name="y">The y-Coordinate of the point.</param>
            <returns>The distance between the point and [0,0].</returns>
        </member>
        <member name="M:Duality.MathF.DistanceQuad(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns the squared distance between two points in 2d space.
            </summary>
            <param name="x1">The x-Coordinate of the first point.</param>
            <param name="y1">The y-Coordinate of the first point.</param>
            <param name="x2">The x-Coordinate of the second point.</param>
            <param name="y2">The y-Coordinate of the second point.</param>
            <returns>The distance between both points.</returns>
            <remarks>
            This method is faster than <see cref="M:Duality.MathF.Distance(System.Single,System.Single,System.Single,System.Single)"/>. 
            If sufficient, such as for distance comparison, consider using this method instead.
            </remarks>
        </member>
        <member name="M:Duality.MathF.DistanceQuad(System.Single,System.Single)">
            <summary>
            Returns the squared distance between a point and [0,0] in 2d space.
            </summary>
            <param name="x">The x-Coordinate of the point.</param>
            <param name="y">The y-Coordinate of the point.</param>
            <returns>The distance between the point and [0,0].</returns>
            <remarks>
            This method is faster than <see cref="M:Duality.MathF.Distance(System.Single,System.Single)"/>. 
            If sufficient, such as for distance comparison, consider using this method instead.
            </remarks>
        </member>
        <member name="M:Duality.MathF.Angle(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Calculates the angle between two points in 2D space.
            </summary>
            <param name="x1">The x-Coordinate of the first point.</param>
            <param name="y1">The y-Coordinate of the first point.</param>
            <param name="x2">The x-Coordinate of the second point.</param>
            <param name="y2">The y-Coordinate of the second point.</param>
            <returns>The angle between [x1,y1] and [x2,y2] in radians.</returns>
        </member>
        <member name="M:Duality.MathF.Angle(System.Single,System.Single)">
            <summary>
            Calculates the angle from [0,0] to a specified point in 2D space.
            </summary>
            <param name="x">The x-Coordinate of the point.</param>
            <param name="y">The y-Coordinate of the point.</param>
            <returns>The angle between [0,0] and [x,y] in radians.</returns>
        </member>
        <member name="M:Duality.MathF.TurnDir(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Assuming a circular value area, this method returns the direction to "turn" value 1 to
            when it comes to take the shortest way to value 2.
            </summary>
            <param name="val1">The first (source) value.</param>
            <param name="val2">The second (destination) value.</param>
            <param name="minVal">Minimum value.</param>
            <param name="maxVal">Maximum value.</param>
            <returns>-1 for "left" / lower, 1 for "right" / higher and 0 for "stay" / equal</returns>
        </member>
        <member name="M:Duality.MathF.TurnDir(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Assuming a circular value area, this method returns the direction to "turn" value 1 to
            when it comes to take the shortest way to value 2.
            </summary>
            <param name="val1">The first (source) value.</param>
            <param name="val2">The second (destination) value.</param>
            <param name="minVal">Minimum value.</param>
            <param name="maxVal">Maximum value.</param>
            <returns>-1 for "left" / lower, 1 for "right" / higher and 0 for "stay" / equal</returns>
        </member>
        <member name="M:Duality.MathF.TurnDir(System.Single,System.Single)">
            <summary>
            Assuming an angular (radian) value area, this method returns the direction to "turn" value 1 to
            when it comes to take the shortest way to value 2.
            </summary>
            <param name="val1">The first (source) value.</param>
            <param name="val2">The second (destination) value.</param>
            <returns>-1 for "left" / lower, 1 for "right" / higher and 0 for "stay" / equal</returns>
        </member>
        <member name="M:Duality.MathF.CircularDist(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Calculates the distance between two values assuming a circular value area.
            </summary>
            <param name="v1">Value 1</param>
            <param name="v2">Value 2</param>
            <param name="vMin">Value area minimum</param>
            <param name="vMax">Value area maximum</param>
            <returns>Value distance</returns>
        </member>
        <member name="M:Duality.MathF.CircularDist(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the distance between two values assuming a circular value area.
            </summary>
            <param name="v1">Value 1</param>
            <param name="v2">Value 2</param>
            <param name="vMin">Value area minimum</param>
            <param name="vMax">Value area maximum</param>
            <returns>Value distance</returns>
        </member>
        <member name="M:Duality.MathF.CircularDist(System.Single,System.Single)">
            <summary>
            Calculates the distance between two angular (radian) values.
            </summary>
            <param name="v1">The first (radian) angle.</param>
            <param name="v2">The second (radian) angle.</param>
            <returns>The angular distance in radians between both angles.</returns>
        </member>
        <member name="M:Duality.MathF.TransformCoord(System.Single@,System.Single@,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Turns and scales a specific coordinate around the specified center point.
            </summary>
            <param name="xCoord">The x-Coordinate to transform.</param>
            <param name="yCoord">The y-Coordinate to transform.</param>
            <param name="rot">The rotation to apply in radians.</param>
            <param name="scale">The scale factor to apply.</param>
            <param name="xCenter">The x-Coordinate of the transformations origin.</param>
            <param name="yCenter">The y-Coordinate of the transformations origin.</param>
        </member>
        <member name="M:Duality.MathF.TransformCoord(System.Single@,System.Single@,System.Single,System.Single)">
            <summary>
            Turns and scales a specific coordinate around [0,0].
            </summary>
            <param name="xCoord">The x-Coordinate to transform.</param>
            <param name="yCoord">The y-Coordinate to transform.</param>
            <param name="rot">The rotation to apply in radians.</param>
            <param name="scale">The scale factor to apply.</param>
        </member>
        <member name="M:Duality.MathF.TransformCoord(System.Single@,System.Single@,System.Single)">
            <summary>
            Turns a specific coordinate around [0,0].
            </summary>
            <param name="xCoord">The x-Coordinate to transform.</param>
            <param name="yCoord">The y-Coordinate to transform.</param>
            <param name="rot">The rotation to apply in radians.</param>
        </member>
        <!-- Ungültiger XML-Kommentar wurde für den Member "M:Duality.MathF.GetTransformDotVec(System.Single,OpenTK.Vector2,OpenTK.Vector2@,OpenTK.Vector2@)" ignoriert -->
        <!-- Ungültiger XML-Kommentar wurde für den Member "M:Duality.MathF.GetTransformDotVec(System.Single,System.Single,OpenTK.Vector2@,OpenTK.Vector2@)" ignoriert -->
        <member name="M:Duality.MathF.GetTransformDotVec(System.Single,OpenTK.Vector2@,OpenTK.Vector2@)">
            <summary>
            Prepares a 2d transformation (rotation).
            </summary>
            <param name="rot">The rotation to apply in radians.</param>
            <param name="xDot">Dot product base for the transformed x value.</param>
            <param name="yDot">Dot product base for the transformed y value.</param>
            <seealso cref="M:Duality.MathF.TransformDotVec(OpenTK.Vector2@,OpenTK.Vector2@,OpenTK.Vector2@)"/>
        </member>
        <member name="M:Duality.MathF.TransformDotVec(OpenTK.Vector2@,OpenTK.Vector2@,OpenTK.Vector2@)">
            <summary>
            Performs a 2d transformation
            </summary>
            <param name="vec">The vector to transform.</param>
            <param name="xDot">Dot product base for the transformed x value.</param>
            <param name="yDot">Dot product base for the transformed y value.</param>
            <seealso cref="M:Duality.MathF.GetTransformDotVec(System.Single,OpenTK.Vector2@,OpenTK.Vector2@)"/>
        </member>
        <member name="M:Duality.MathF.TransformDotVec(OpenTK.Vector2@,OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Performs a 2d transformation
            </summary>
            <param name="vec">The vector to transform.</param>
            <param name="xDot">Dot product base for the transformed x value.</param>
            <param name="yDot">Dot product base for the transformed y value.</param>
            <seealso cref="M:Duality.MathF.GetTransformDotVec(System.Single,OpenTK.Vector2@,OpenTK.Vector2@)"/>
        </member>
        <member name="M:Duality.MathF.TransformDotVec(OpenTK.Vector2,OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Performs a 2d transformation
            </summary>
            <param name="vec">The vector to transform.</param>
            <param name="xDot">Dot product base for the transformed x value.</param>
            <param name="yDot">Dot product base for the transformed y value.</param>
            <returns>The transformed vector.</returns>
            <seealso cref="M:Duality.MathF.GetTransformDotVec(System.Single,OpenTK.Vector2@,OpenTK.Vector2@)"/>
        </member>
        <member name="M:Duality.MathF.TransformDotVec(OpenTK.Vector3@,OpenTK.Vector2@,OpenTK.Vector2@)">
            <summary>
            Performs a 2d transformation
            </summary>
            <param name="vec">The vector to transform.</param>
            <param name="xDot">Dot product base for the transformed x value.</param>
            <param name="yDot">Dot product base for the transformed y value.</param>
            <seealso cref="M:Duality.MathF.GetTransformDotVec(System.Single,OpenTK.Vector2@,OpenTK.Vector2@)"/>
        </member>
        <member name="M:Duality.MathF.TransformDotVec(OpenTK.Vector3@,OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Performs a 2d transformation
            </summary>
            <param name="vec">The vector to transform.</param>
            <param name="xDot">Dot product base for the transformed x value.</param>
            <param name="yDot">Dot product base for the transformed y value.</param>
            <seealso cref="M:Duality.MathF.GetTransformDotVec(System.Single,OpenTK.Vector2@,OpenTK.Vector2@)"/>
        </member>
        <member name="M:Duality.MathF.TransformDotVec(OpenTK.Vector3,OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Performs a 2d transformation
            </summary>
            <param name="vec">The vector to transform.</param>
            <param name="xDot">Dot product base for the transformed x value.</param>
            <param name="yDot">Dot product base for the transformed y value.</param>
            <returns>The transformed vector.</returns>
            <seealso cref="M:Duality.MathF.GetTransformDotVec(System.Single,OpenTK.Vector2@,OpenTK.Vector2@)"/>
        </member>
        <member name="M:Duality.MathF.LinesCross(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single@,System.Single@,System.Boolean)">
            <summary>
            Checks, if two line segments (or infinite lines) cross and determines their mutual point.
            </summary>
            <param name="startX1">x-Coordinate of the first lines start.</param>
            <param name="startY1">y-Coordinate of the first lines start.</param>
            <param name="endX1">x-Coordinate of the first lines end.</param>
            <param name="endY1">y-Coordinate of the first lines end.</param>
            <param name="startX2">x-Coordinate of the second lines start.</param>
            <param name="startY2">y-Coordinate of the second lines start.</param>
            <param name="endX2">x-Coordinate of the second lines end.</param>
            <param name="endY2">y-Coordinate of the second lines end.</param>
            <param name="infinite">Whether the lines are considered infinite.</param>
            <param name="crossX">x-Coordiante at which both lines cross.</param>
            <param name="crossY">y-Coordinate at which both lines cross.</param>
            <returns>True, if the lines cross, false if not.</returns>
        </member>
        <member name="M:Duality.MathF.LinesCross(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Checks, if two line segments (or infinite lines) cross and determines their mutual point.
            </summary>
            <param name="startX1">x-Coordinate of the first lines start.</param>
            <param name="startY1">y-Coordinate of the first lines start.</param>
            <param name="endX1">x-Coordinate of the first lines end.</param>
            <param name="endY1">y-Coordinate of the first lines end.</param>
            <param name="startX2">x-Coordinate of the second lines start.</param>
            <param name="startY2">y-Coordinate of the second lines start.</param>
            <param name="endX2">x-Coordinate of the second lines end.</param>
            <param name="endY2">y-Coordinate of the second lines end.</param>
            <param name="infinite">Whether the lines are considered infinite.</param>
            <returns>True, if the lines cross, false if not.</returns>
        </member>
        <member name="M:Duality.MathF.PointLineNearestPoint(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Calculates the point on a line segment (or infinite line) that has the lowest possible
            distance to a point.
            </summary>
            <param name="pX">x-Coordinate of the point.</param>
            <param name="pY">y-Coordinate of the point.</param>
            <param name="lX1">x-Coordinate of the lines start.</param>
            <param name="lY1">y-Coordinate of the lines start.</param>
            <param name="lX2">x-Coordinate of the lines end.</param>
            <param name="lY2">y-Coordinate of the lines end.</param>
            <param name="infinite">Whether the line is considered infinite.</param>
            <returns>A point located on the specified line that is as close as possible to the specified point.</returns>
        </member>
        <member name="M:Duality.MathF.PointLineDistance(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Calculates the distance between a point and a line segment (or infinite line).
            </summary>
            <param name="pX">x-Coordinate of the point.</param>
            <param name="pY">y-Coordinate of the point.</param>
            <param name="lX1">x-Coordinate of the lines start.</param>
            <param name="lY1">y-Coordinate of the lines start.</param>
            <param name="lX2">x-Coordinate of the lines end.</param>
            <param name="lY2">y-Coordinate of the lines end.</param>
            <param name="infinite">Whether the line is considered infinite.</param>
            <returns>The distance between point and line.</returns>
        </member>
        <member name="M:Duality.MathF.GetLinearPrediction(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single@,System.Single@)">
            <summary>
            Assuming two objects travelling at a linear course with constant speed and angle, this method
            calculates at which point they may collide if the angle of object 1 is not defined by a specific
            (but constant!) value.
            In other words: If object 1 tries to hit object 2, let object 1 move towards the calculated point.
            </summary>
            <param name="obj1X">x-Coordinate of the first object.</param>
            <param name="obj1Y">y-Coordinate of the first object.</param>
            <param name="obj1Speed">Speed of the first object.</param>
            <param name="obj2X">x-Coordinate of the second object.</param>
            <param name="obj2Y">y-Coordinate of the second object.</param>
            <param name="obj2Speed">Speed of the second object.</param>
            <param name="obj2Angle">Angle (in radians) of the second object.</param>
            <param name="colX">x-Coordinate of the predicted impact.</param>
            <param name="colY">y-Coordinate of the predicted impact.</param>
            <returns>
            False if it is not possible for object 1 to collide with object 2 at any course of object 1.
            This is, for example, the case if object 1 and to move to the same direction but object 2 is faster.
            A "collision point" is calculated either way, though it is not a collision point but only a 
            "directional idea" if false is returned.
            </returns>
        </member>
        <member name="M:Duality.MathF.GetLinearPrediction2(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Assuming two objects travelling at a linear course with constant speed and angle, this method
            calculates the time from now at which the distance between the two objects will be minimal. If
            this has already passed, the returned time is negative.
            </summary>
            <param name="obj1X">x-Coordinate of the first object.</param>
            <param name="obj1Y">y-Coordinate of the first object.</param>
            <param name="obj1XSpeed">x-Speed of the first object.</param>
            <param name="obj1YSpeed">y-Speed of the first object.</param>
            <param name="obj2X">x-Coordinate of the second object.</param>
            <param name="obj2Y">y-Coordinate of the second object.</param>
            <param name="obj2XSpeed">x-Speed of the second object.</param>
            <param name="obj2YSpeed">y-Speed of the second object.</param>
            <returns>Time of minimum distance.</returns>
        </member>
        <member name="M:Duality.MathF.IsPolygonConvex(OpenTK.Vector2[])">
            <summary>
            Returns whether or not the specified polygon is convex.
            </summary>
            <param name="vertices"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.MathF.NextPowerOfTwo(System.Int32)">
            <summary>
            Returns the next power of two that is larger than the specified number.
            </summary>
            <param name="n">The specified number.</param>
            <returns>The next power of two.</returns>
        </member>
        <member name="M:Duality.MathF.Swap``1(``0@,``0@)">
            <summary>
            Swaps the values of two variables.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first"></param>
            <param name="second"></param>
        </member>
        <member name="P:Duality.MathF.Rnd">
            <summary>
            [GET / SET] Global random number generator. Is never null.
            </summary>
        </member>
        <member name="T:Duality.GraphicsModeComparer">
            <summary>
            Compares two <see cref="T:OpenTK.Graphics.GraphicsMode">GraphicsModes</see>.
            </summary>
        </member>
        <member name="M:Duality.GraphicsModeComparer.Equals(OpenTK.Graphics.GraphicsMode,OpenTK.Graphics.GraphicsMode)">
            <summary>
            Returns whether two GraphicsModes are equal.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.GraphicsModeComparer.GetHashCode(OpenTK.Graphics.GraphicsMode)">
            <summary>
            Returns the hash code of a GraphicsMode.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Duality.VertexFormat.VertexP3">
            <summary>
            Vertex data providing each vertex a position (3x4 byte).
            </summary>
        </member>
        <member name="F:Duality.VertexFormat.VertexP3.OffsetPos">
            <summary>
            Byte offset for the position.
            </summary>
        </member>
        <member name="F:Duality.VertexFormat.VertexP3.Size">
            <summary>
            Total size in bytes.
            </summary>
        </member>
        <member name="F:Duality.VertexFormat.VertexP3.Pos">
            <summary>
            The vertices position.
            </summary>
        </member>
        <member name="T:Duality.Serialization.Surrogates.BitmapSurrogate">
            <summary>
            De/Serializes a <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
        </member>
        <member name="T:Duality.Serialization.MetaFormat.DataNode">
            <summary>
            Describes a single serialization data node.
            </summary>
            <seealso cref="T:Duality.Serialization.BinaryMetaFormatter"/>
        </member>
        <member name="M:Duality.Serialization.MetaFormat.DataNode.GetTypeStrings(System.Boolean)">
            <summary>
            Returns a list of all <see cref="M:Duality.ReflectionHelper.GetTypeId(System.Type)">type strings</see> in this data node.
            </summary>
            <param name="deep">If true, both this node and all of its children are searched.</param>
            <returns>A list of <see cref="M:Duality.ReflectionHelper.GetTypeId(System.Type)">type strings</see>.</returns>
        </member>
        <member name="M:Duality.Serialization.MetaFormat.DataNode.GetTypeStrings(System.Collections.Generic.List{System.String}@,System.Boolean)">
            <summary>
            DataNodes may override this method to append their <see cref="M:Duality.ReflectionHelper.GetTypeId(System.Type)">type strings</see> to the
            specified list. The base version iterates over its children, if a deep search is performed.
            </summary>
            <param name="list">The <see cref="T:System.Collections.Generic.List`1"/> to append type strings to.</param>
            <param name="deep">If true, both this node and all of its children are searched.</param>
        </member>
        <member name="M:Duality.Serialization.MetaFormat.DataNode.IsObjectIdDefined(System.UInt32)">
            <summary>
            Determines whether this data node contains an <see cref="T:Duality.Serialization.MetaFormat.ObjectNode">object</see> with the specified
            object id. DataNodes may override this method to check for their own object id. The base version iterates
            over its children.
            </summary>
            <param name="objId"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Serialization.MetaFormat.DataNode.ReplaceTypeStrings(System.String,System.String)">
            <summary>
            Searches for one <see cref="M:Duality.ReflectionHelper.GetTypeId(System.Type)">type string</see> and replaces it with another.
            DataNodes may override this method to rename their own type strings. The base version iterates
            over its children.
            </summary>
            <param name="oldTypeString">The old type string that is to be replaced.</param>
            <param name="newTypeString">The new type string that is to be used instead of the other.</param>
            <returns>The number of occurences that have been replaced.</returns>
        </member>
        <member name="P:Duality.Serialization.MetaFormat.DataNode.SubNodes">
            <summary>
            [GET] Enumerates this nodes child nodes.
            </summary>
        </member>
        <member name="P:Duality.Serialization.MetaFormat.DataNode.Parent">
            <summary>
            [GET / SET] This nodes parent node.
            </summary>
        </member>
        <member name="P:Duality.Serialization.MetaFormat.DataNode.NodeType">
            <summary>
            [GET] The <see cref="T:Duality.Serialization.DataType"/> that is associated with this data node.
            </summary>
        </member>
        <member name="P:Duality.Serialization.MetaFormat.DataNode.Name">
            <summary>
            [GET] The node's name.
            </summary>
        </member>
        <member name="T:Duality.Serialization.MetaFormat.PrimitiveNode">
            <summary>
            Describes a serialization primitive data node.
            </summary>
            <seealso cref="T:Duality.Serialization.BinaryMetaFormatter"/>
        </member>
        <member name="P:Duality.Serialization.MetaFormat.PrimitiveNode.PrimitiveValue">
            <summary>
            [GET / SET] This nodes primitive data value.
            </summary>
        </member>
        <member name="T:Duality.Serialization.MetaFormat.StringNode">
            <summary>
            Describes a serialization <see cref="T:System.String"/> data node.
            </summary>
            <seealso cref="T:Duality.Serialization.BinaryMetaFormatter"/>
        </member>
        <member name="P:Duality.Serialization.MetaFormat.StringNode.StringValue">
            <summary>
            [GET / SET] This nodes <see cref="T:System.String"/> value.
            </summary>
        </member>
        <member name="T:Duality.Serialization.MetaFormat.EnumNode">
            <summary>
            Describes a serialization <see cref="T:System.Enum"/> data node.
            </summary>
            <seealso cref="T:Duality.Serialization.BinaryMetaFormatter"/>
        </member>
        <member name="P:Duality.Serialization.MetaFormat.EnumNode.EnumType">
            <summary>
            [GET / SET] A string referring to the <see cref="T:System.Enum">Enums</see> Tyoe.
            </summary>
        </member>
        <member name="P:Duality.Serialization.MetaFormat.EnumNode.ValueName">
            <summary>
            [GET / SET] The values name in the <see cref="T:System.Enum"/>.
            </summary>
        </member>
        <member name="P:Duality.Serialization.MetaFormat.EnumNode.Value">
            <summary>
            [GET / SET] The numeric enum value
            </summary>
        </member>
        <member name="T:Duality.Serialization.MetaFormat.ObjectNode">
            <summary>
            Describes a serialization object data node.
            </summary>
            <seealso cref="T:Duality.Serialization.BinaryMetaFormatter"/>
        </member>
        <member name="P:Duality.Serialization.MetaFormat.ObjectNode.TypeString">
            <summary>
            [GET / SET] A string referring to the objects <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="P:Duality.Serialization.MetaFormat.ObjectNode.ObjId">
            <summary>
            [GET / SET] The objects id.
            </summary>
        </member>
        <member name="T:Duality.Serialization.MetaFormat.ArrayNode">
            <summary>
            Describes a serialization array data node.
            </summary>
            <seealso cref="T:Duality.Serialization.BinaryMetaFormatter"/>
        </member>
        <member name="P:Duality.Serialization.MetaFormat.ArrayNode.PrimitiveData">
            <summary>
            [GET / SET] An <see cref="T:System.Array"/> storing this nodes primitive data. Null, if
            the data stored in this ArrayNode is not primitive.
            </summary>
        </member>
        <member name="P:Duality.Serialization.MetaFormat.ArrayNode.Rank">
            <summary>
            [GET / SET] The rank of the array.
            </summary>
        </member>
        <member name="P:Duality.Serialization.MetaFormat.ArrayNode.Length">
            <summary>
            [GET / SET] The arrays length.
            </summary>
        </member>
        <member name="T:Duality.Serialization.MetaFormat.StructNode">
            <summary>
            Describes a serialization structural object data node.
            </summary>
            <seealso cref="T:Duality.Serialization.BinaryMetaFormatter"/>
        </member>
        <member name="P:Duality.Serialization.MetaFormat.StructNode.CustomSerialization">
            <summary>
            [GET / SET] Whether this structural object uses <see cref="T:Duality.Serialization.ISerializable">custom serialization</see>.
            </summary>
        </member>
        <member name="P:Duality.Serialization.MetaFormat.StructNode.SurrogateSerialization">
            <summary>
            [GET / SET] Whether this structural object uses an <see cref="T:Duality.Serialization.ISurrogate"/>.
            </summary>
        </member>
        <member name="T:Duality.Serialization.MetaFormat.ObjectRefNode">
            <summary>
            Describes a serialization object reference data node.
            </summary>
            <seealso cref="T:Duality.Serialization.BinaryMetaFormatter"/>
        </member>
        <member name="P:Duality.Serialization.MetaFormat.ObjectRefNode.ObjRefId">
            <summary>
            [GET / SET] The id of the referenced object.
            </summary>
        </member>
        <member name="T:Duality.Serialization.MetaFormat.MemberInfoNode">
            <summary>
            Describes a serialization <see cref="T:System.Reflection.MemberInfo"/> data node.
            </summary>
            <seealso cref="T:Duality.Serialization.BinaryMetaFormatter"/>
        </member>
        <member name="T:Duality.Serialization.MetaFormat.DelegateNode">
            <summary>
            Describes a serialization <see cref="T:System.Delegate"/> data node.
            </summary>
            <seealso cref="T:Duality.Serialization.BinaryMetaFormatter"/>
        </member>
        <member name="P:Duality.Serialization.MetaFormat.DelegateNode.InvokeList">
            <summary>
            [GET / SET] A reference to the DataNode containing the <see cref="T:System.Delegate">Delegates</see> invokation list.
            </summary>
        </member>
        <member name="P:Duality.Serialization.MetaFormat.DelegateNode.Method">
            <summary>
            [GET / SET] A reference to the DataNode containing the <see cref="T:System.Delegate">Delegates</see> method.
            </summary>
        </member>
        <member name="P:Duality.Serialization.MetaFormat.DelegateNode.Target">
            <summary>
            [GET / SET] A reference to the DataNode containing the <see cref="T:System.Delegate">Delegates</see> target object.
            </summary>
        </member>
        <member name="T:Duality.Serialization.MetaFormat.TypeDataLayoutNode">
            <summary>
            Describes a serialization <see cref="T:Duality.Serialization.TypeDataLayout"/> data node.
            </summary>
            <seealso cref="T:Duality.Serialization.BinaryMetaFormatter"/>
        </member>
        <member name="P:Duality.Serialization.MetaFormat.TypeDataLayoutNode.Layout">
            <summary>
            [GET / SET] The TypeDataLayout that is stored in this node.
            </summary>
        </member>
        <member name="T:Duality.Serialization.MetaFormat.DummyNode">
            <summary>
            Describes a serialization dummy data node. It does not contain any information but might be used by meta-formatters
            to group and organize other nodes that have actually been read.
            </summary>
            <seealso cref="T:Duality.Serialization.BinaryMetaFormatter"/>
        </member>
        <member name="T:Duality.Resources.Pixmap">
            <summary>
            A Pixmap stores pixel data in system memory. 
            </summary>
            <seealso cref="T:Duality.Resources.Texture"/>
        </member>
        <member name="F:Duality.Resources.Pixmap.FileExt">
            <summary>
            A Pixmap resources file extension.
            </summary>
        </member>
        <member name="F:Duality.Resources.Pixmap.ResFormat_Version_Unknown">
            <summary>
            Represents an unknown Pixmap version.
            </summary>
        </member>
        <member name="F:Duality.Resources.Pixmap.ResFormat_Version_Bitmap">
            <summary>
            Represents the old, uncompressed Pixmap version using a <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
        </member>
        <member name="F:Duality.Resources.Pixmap.ResFormat_Version_Png">
            <summary>
            Represents the PNG-compressed Pixmap version.
            </summary>
        </member>
        <member name="F:Duality.Resources.Pixmap.ResFormat_Version_LayerPng">
            <summary>
            Represents the PNG-compressed layered Pixmap version.
            </summary>
        </member>
        <member name="F:Duality.Resources.Pixmap.VirtualContentPath">
            <summary>
            (Virtual) base path for Duality's embedded default Pixmaps.
            </summary>
        </member>
        <member name="F:Duality.Resources.Pixmap.ContentPath_DualityLogo256">
            <summary>
            (Virtual) path of the <see cref="P:Duality.Resources.Pixmap.DualityLogo256"/> Pixmap.
            </summary>
        </member>
        <member name="F:Duality.Resources.Pixmap.ContentPath_DualityLogoB256">
            <summary>
            (Virtual) path of the <see cref="P:Duality.Resources.Pixmap.DualityLogoB256"/> Pixmap.
            </summary>
        </member>
        <member name="F:Duality.Resources.Pixmap.ContentPath_White">
            <summary>
            (Virtual) path of the <see cref="P:Duality.Resources.Pixmap.White"/> Pixmap.
            </summary>
        </member>
        <member name="M:Duality.Resources.Pixmap.#ctor">
            <summary>
            Creates a new, empty Pixmap.
            </summary>
        </member>
        <member name="M:Duality.Resources.Pixmap.#ctor(System.Drawing.Bitmap)">
            <summary>
            Creates a new Pixmap from the specified <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
            <param name="image">The <see cref="T:System.Drawing.Bitmap"/> that will be used by the Pixmap.</param>
        </member>
        <member name="M:Duality.Resources.Pixmap.#ctor(Duality.Resources.Pixmap.Layer)">
            <summary>
            Creates a new Pixmap from the specified <see cref="T:Duality.Resources.Pixmap.Layer"/>.
            </summary>
            <param name="image"></param>
        </member>
        <member name="M:Duality.Resources.Pixmap.#ctor(System.String)">
            <summary>
            Creates a new Pixmap from the specified image file.
            </summary>
            <param name="imagePath">A path to the image file that will be used as pixel data source.</param>
        </member>
        <member name="M:Duality.Resources.Pixmap.SavePixelData(System.String)">
            <summary>
            Saves the Pixmaps pixel data as image file. Its image format is determined by the file extension.
            </summary>
            <param name="imagePath">The path of the file to which the pixel data is written.</param>
        </member>
        <member name="M:Duality.Resources.Pixmap.LoadPixelData(System.String)">
            <summary>
            Replaces the Pixmaps pixel data with a new dataset that has been retrieved from file.
            </summary>
            <param name="imagePath">The path of the file from which to retrieve the new pixel data.</param>
        </member>
        <member name="P:Duality.Resources.Pixmap.DualityLogo256">
            <summary>
            [GET] A Pixmap showing the Duality logo.
            </summary>
        </member>
        <member name="P:Duality.Resources.Pixmap.DualityLogoB256">
            <summary>
            [GET] A Pixmap showing the Duality logo without the text on it.
            </summary>
        </member>
        <member name="P:Duality.Resources.Pixmap.White">
            <summary>
            [GET] A plain white 1x1 Pixmap. Can be used as a dummy.
            </summary>
        </member>
        <member name="P:Duality.Resources.Pixmap.MainLayer">
            <summary>
            [GET / SET] The main pixel data <see cref="T:Duality.Resources.Pixmap.Layer"/>.
            </summary>
        </member>
        <member name="P:Duality.Resources.Pixmap.PixelData">
            <summary>
            [GET / SET] A list of pixel data <see cref="T:Duality.Resources.Pixmap.Layer">Layers</see>.
            </summary>
        </member>
        <member name="P:Duality.Resources.Pixmap.Width">
            <summary>
            [GET] The Width of the actual pixel data.
            </summary>
        </member>
        <member name="P:Duality.Resources.Pixmap.Height">
            <summary>
            [GET] The Height of the actual pixel data.
            </summary>
        </member>
        <member name="T:Duality.Resources.Pixmap.FilterMethod">
            <summary>
            Represents a filtering method.
            </summary>
        </member>
        <member name="F:Duality.Resources.Pixmap.FilterMethod.Nearest">
            <summary>
            Nearest neighbor filterting. (No interpolation)
            </summary>
        </member>
        <member name="F:Duality.Resources.Pixmap.FilterMethod.Linear">
            <summary>
            Linear interpolation.
            </summary>
        </member>
        <member name="T:Duality.Resources.Pixmap.Layer">
            <summary>
            Represents a pixel data layer.
            </summary>
        </member>
        <member name="M:Duality.Resources.Pixmap.Layer.Clone">
            <summary>
            Clones the pixel data layer and returns the new instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duality.Resources.Pixmap.Layer.CopyTo(Duality.Resources.Pixmap.Layer)">
            <summary>
            Copies all data contained in this pixel data layer to a target layer.
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Duality.Resources.Pixmap.Layer.SavePixelData(System.String)">
            <summary>
            Saves the pixel data contained in this layer to the specified file.
            </summary>
            <param name="imagePath"></param>
        </member>
        <member name="M:Duality.Resources.Pixmap.Layer.LoadPixelData(System.String)">
            <summary>
            Loads the pixel data in this layer from the specified file.
            </summary>
            <param name="imagePath"></param>
        </member>
        <member name="M:Duality.Resources.Pixmap.Layer.ClearPixelData">
            <summary>
            Discards all pixel data in this Layer.
            </summary>
        </member>
        <member name="M:Duality.Resources.Pixmap.Layer.ToBitmap">
            <summary>
            Creates a <see cref="T:System.Drawing.Bitmap"/> out of this Layer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duality.Resources.Pixmap.Layer.GetPixelDataRgba">
            <summary>
            Gets the Layers pixel data in the ColorRgba format. Note that this data is a clone and thus modifying it won't
            affect the Layer it has been retrieved from.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duality.Resources.Pixmap.Layer.GetPixelDataByteRgba">
            <summary>
            Gets the Layers pixel data in bytewise Rgba format. (Four elements per pixel)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duality.Resources.Pixmap.Layer.GetPixelDataIntArgb">
            <summary>
            Gets the Layers pixel data in the integer Argb format. (One element per pixel)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duality.Resources.Pixmap.Layer.FromBitmap(System.Drawing.Bitmap)">
            <summary>
            Sets this Layers pixel data to the one contained in the specified <see cref="T:System.Drawing.Bitmap"/>
            </summary>
            <param name="bm"></param>
        </member>
        <member name="M:Duality.Resources.Pixmap.Layer.SetPixelDataRgba(Duality.ColorFormat.ColorRgba[],System.Int32,System.Int32)">
            <summary>
            Sets the layers pixel data in the ColorRgba format. Note that the specified data will be copied and thus modifying it
            outside won't affect the Layer it has been inserted into.
            </summary>
            <param name="pixelData"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Duality.Resources.Pixmap.Layer.SetPixelDataRgba(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the Layers pixel data in bytewise Rgba format. (Four elements per pixel)
            </summary>
            <param name="pixelData"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Duality.Resources.Pixmap.Layer.SetPixelDataArgb(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Sets the Layers pixel data in the integer Argb format. (One element per pixel)
            </summary>
            <param name="pixelData"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Duality.Resources.Pixmap.Layer.Rescale(System.Int32,System.Int32,Duality.Resources.Pixmap.FilterMethod)">
            <summary>
            Rescales the Layer, stretching it to the specified size.
            </summary>
            <param name="w"></param>
            <param name="h"></param>
            <param name="filter">The filtering method to use when rescaling</param>
        </member>
        <member name="M:Duality.Resources.Pixmap.Layer.Resize(System.Int32,System.Int32,Duality.Alignment)">
            <summary>
            Resizes the Layers boundaries.
            </summary>
            <param name="w"></param>
            <param name="h"></param>
            <param name="origin"></param>
        </member>
        <member name="M:Duality.Resources.Pixmap.Layer.SubImage(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Extracts a rectangular region of this Layer. If the extracted region is bigger than the original Layer,
            all new space is filled with a background color.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="w"></param>
            <param name="h"></param>
        </member>
        <member name="M:Duality.Resources.Pixmap.Layer.SubImage(System.Int32,System.Int32,System.Int32,System.Int32,Duality.ColorFormat.ColorRgba)">
            <summary>
            Extracts a rectangular region of this Layer. If the extracted region is bigger than the original Layer,
            all new space is filled with a background color.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="w"></param>
            <param name="h"></param>
            <param name="backColor"></param>
        </member>
        <member name="M:Duality.Resources.Pixmap.Layer.Crop(System.Boolean,System.Boolean)">
            <summary>
            Crops the Layer, removing transparent / empty border areas.
            </summary>
            <param name="cropX">Whether the Layer should be cropped in X-direction</param>
            <param name="cropY">Whether the Layer should be cropped in Y-direction</param>
        </member>
        <member name="M:Duality.Resources.Pixmap.Layer.OpaqueBounds">
            <summary>
            Measures the bounding rectangle of the Layers opaque pixels.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duality.Resources.Pixmap.Layer.GetAverageColor(System.Boolean)">
            <summary>
            Determines the average color of a Layer.
            </summary>
            <param name="weightTransparent">If true, the alpha value weights a pixels color value. </param>
            <returns></returns>
        </member>
        <member name="M:Duality.Resources.Pixmap.Layer.ColorTransparentPixels">
            <summary>
            Sets the color of all transparent pixels based on the non-transparent color values next to them.
            This does not affect any alpha values but prepares the Layer for correct filtering once uploaded
            to <see cref="T:Duality.Resources.Texture"/>.
            </summary>
        </member>
        <member name="M:Duality.Resources.Pixmap.Layer.ColorTransparentPixels(Duality.ColorFormat.ColorRgba)">
            <summary>
            Sets the color of all transparent pixels to the specified color.
            </summary>
            <param name="transparentColor"></param>
        </member>
        <member name="M:Duality.Resources.Pixmap.Layer.CloneRescale(System.Int32,System.Int32,Duality.Resources.Pixmap.FilterMethod)">
            <summary>
            Rescales the Layer, stretching it to the specified size.
            </summary>
            <param name="w"></param>
            <param name="h"></param>
            <param name="filter">The filtering method to use when rescaling</param>
        </member>
        <member name="M:Duality.Resources.Pixmap.Layer.CloneResize(System.Int32,System.Int32,Duality.Alignment)">
            <summary>
            Resizes the Layers boundaries.
            </summary>
            <param name="w"></param>
            <param name="h"></param>
            <param name="origin"></param>
        </member>
        <member name="M:Duality.Resources.Pixmap.Layer.CloneSubImage(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Extracts a rectangular region of this Layer. If the extracted region is bigger than the original Layer,
            all new space is filled with a background color.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="w"></param>
            <param name="h"></param>
        </member>
        <member name="M:Duality.Resources.Pixmap.Layer.CloneSubImage(System.Int32,System.Int32,System.Int32,System.Int32,Duality.ColorFormat.ColorRgba)">
            <summary>
            Extracts a rectangular region of this Layer. If the extracted region is bigger than the original Layer,
            all new space is filled with a background color.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="w"></param>
            <param name="h"></param>
            <param name="backColor"></param>
        </member>
        <member name="M:Duality.Resources.Pixmap.Layer.CloneCrop(System.Boolean,System.Boolean)">
            <summary>
            Crops the Layer, removing transparent / empty border areas.
            </summary>
            <param name="cropX">Whether the Layer should be cropped in X-direction</param>
            <param name="cropY">Whether the Layer should be cropped in Y-direction</param>
        </member>
        <member name="M:Duality.Resources.Pixmap.Layer.DrawOnto(Duality.Resources.Pixmap.Layer,Duality.BlendMode,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Performs a drawing operation from this Layer to a target layer.
            </summary>
            <param name="target"></param>
            <param name="blend"></param>
            <param name="destX"></param>
            <param name="destY"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="srcX"></param>
            <param name="srcY"></param>
        </member>
        <member name="M:Duality.Resources.Pixmap.Layer.DrawOnto(Duality.Resources.Pixmap.Layer,Duality.BlendMode,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Duality.ColorFormat.ColorRgba)">
            <summary>
            Performs a drawing operation from this Layer to a target layer.
            </summary>
            <param name="target"></param>
            <param name="blend"></param>
            <param name="destX"></param>
            <param name="destY"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="srcX"></param>
            <param name="srcY"></param>
            <param name="colorTint"></param>
        </member>
        <member name="P:Duality.Resources.Pixmap.Layer.Width">
            <summary>
            [GET] The layers width in pixels
            </summary>
        </member>
        <member name="P:Duality.Resources.Pixmap.Layer.Height">
            <summary>
            [GET] The layers height in pixels
            </summary>
        </member>
        <member name="P:Duality.Resources.Pixmap.Layer.Data">
            <summary>
            [GET] The layers pixel data
            </summary>
        </member>
        <member name="P:Duality.Resources.Pixmap.Layer.Item(System.Int32,System.Int32)">
            <summary>
            [GET / SET] A single pixels color.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Duality.Resources.Font">
            <summary>
            Represents a font. While any system font or imported TrueType font can be used, they are internally
            pre-rasterized and stored in a <see cref="T:Duality.Resources.Texture"/> with an <see cref="P:Duality.Resources.Texture.Atlas"/>.
            </summary>
        </member>
        <member name="F:Duality.Resources.Font.FileExt">
            <summary>
            A Font resources file extension.
            </summary>
        </member>
        <member name="F:Duality.Resources.Font.VirtualContentPath">
            <summary>
            (Virtual) base path for Duality's embedded default Fonts.
            </summary>
        </member>
        <member name="F:Duality.Resources.Font.ContentPath_GenericMonospace10">
            <summary>
            (Virtual) path of the <see cref="P:Duality.Resources.Font.GenericMonospace10"/> Font.
            </summary>
        </member>
        <member name="F:Duality.Resources.Font.ContentPath_GenericMonospace8">
            <summary>
            (Virtual) path of the <see cref="P:Duality.Resources.Font.GenericMonospace8"/> Font.
            </summary>
        </member>
        <member name="F:Duality.Resources.Font.ContentPath_GenericSerif12">
            <summary>
            (Virtual) path of the <see cref="P:Duality.Resources.Font.GenericSerif12"/> Font.
            </summary>
        </member>
        <member name="F:Duality.Resources.Font.ContentPath_GenericSansSerif12">
            <summary>
            (Virtual) path of the <see cref="P:Duality.Resources.Font.GenericSansSerif12"/> Font.
            </summary>
        </member>
        <member name="F:Duality.Resources.Font.None">
            <summary>
            Refers to a null reference Font.
            </summary>
            <seealso cref="F:Duality.ContentRef`1.Null"/>
        </member>
        <member name="F:Duality.Resources.Font.SupportedChars">
            <summary>
            A string containing all characters that are supported by Duality.
            </summary>
        </member>
        <member name="M:Duality.Resources.Font.#ctor(System.String,System.Single,System.Drawing.FontStyle)">
            <summary>
            Creates a new Font based on a system font.
            </summary>
            <param name="familyName">The font family to use.</param>
            <param name="emSize">The Fonts <see cref="P:Duality.Resources.Font.Size"/>.</param>
            <param name="style">The Fonts style.</param>
        </member>
        <member name="M:Duality.Resources.Font.#ctor">
            <summary>
            Creates a new, empty Font.
            </summary>
        </member>
        <member name="M:Duality.Resources.Font.LoadCustomFamilyData(System.String)">
            <summary>
            Replaces the Fonts custom font family with a new dataset that has been retrieved from file.
            </summary>
            <param name="path">The path of the file from which to retrieve the new font family data.</param>
        </member>
        <member name="M:Duality.Resources.Font.SaveCustomFamilyData(System.String)">
            <summary>
            Saves the Fonts custom font family to file.
            </summary>
            <param name="path">The path of the file to which to save the font family data.</param>
        </member>
        <member name="M:Duality.Resources.Font.ReloadData">
            <summary>
            Reloads this Fonts internal data and rasterizes its glyphs.
            </summary>
        </member>
        <member name="M:Duality.Resources.Font.UpdateKerningData">
            <summary>
            Updates this Fonts kerning sample data.
            </summary>
        </member>
        <member name="M:Duality.Resources.Font.GetGlyphData(System.Char,Duality.Resources.Font.GlyphData@)">
            <summary>
            Retrieves information about a single glyph.
            </summary>
            <param name="glyph">The glyph to retrieve information about.</param>
            <param name="data">A struct holding the retrieved information.</param>
            <returns>True, if successful, false if not. This is the case if the specified glyph is not supported.</returns>
        </member>
        <member name="M:Duality.Resources.Font.GetGlyphBitmap(System.Char)">
            <summary>
            Retrieves the rasterized <see cref="T:System.Drawing.Bitmap"/> for a single glyph.
            </summary>
            <param name="glyph">The glyph of which to retrieve the Bitmap.</param>
            <returns>The Bitmap that has been retrieved, or null if the glyph is not supported.</returns>
        </member>
        <member name="M:Duality.Resources.Font.EmitTextVertices(System.String,Duality.VertexFormat.VertexC1P3T2[]@,System.Single,System.Single,System.Single)">
            <summary>
            Emits a set of vertices based on a text. To render this text, simply use that set of vertices combined with
            the Fonts <see cref="P:Duality.Resources.Font.Material"/>.
            </summary>
            <param name="text">The text to render.</param>
            <param name="vertices">The set of vertices that is emitted. You can re-use the same array each frame.</param>
            <param name="x">An X-Offset applied to the position of each emitted vertex.</param>
            <param name="y">An Y-Offset applied to the position of each emitted vertex.</param>
            <param name="z">An Z-Offset applied to the position of each emitted vertex.</param>
        </member>
        <member name="M:Duality.Resources.Font.EmitTextVertices(System.String,Duality.VertexFormat.VertexC1P3T2[]@,System.Single,System.Single,System.Single,Duality.ColorFormat.ColorRgba,System.Single,System.Single)">
            <summary>
            Emits a set of vertices based on a text. To render this text, simply use that set of vertices combined with
            the Fonts <see cref="P:Duality.Resources.Font.Material"/>.
            </summary>
            <param name="text">The text to render.</param>
            <param name="vertices">The set of vertices that is emitted. You can re-use the same array each frame.</param>
            <param name="x">An X-Offset applied to the position of each emitted vertex.</param>
            <param name="y">An Y-Offset applied to the position of each emitted vertex.</param>
            <param name="z">An Z-Offset applied to the position of each emitted vertex.</param>
            <param name="clr">The color value that is applied to each emitted vertex.</param>
            <param name="angle">An angle by which the text is rotated (before applying the offset).</param>
            <param name="scale">A factor by which the text is scaled (before applying the offset).</param>
        </member>
        <member name="M:Duality.Resources.Font.EmitTextVertices(System.String,Duality.VertexFormat.VertexC1P3T2[]@,System.Single,System.Single,Duality.ColorFormat.ColorRgba)">
            <summary>
            Emits a set of vertices based on a text. To render this text, simply use that set of vertices combined with
            the Fonts <see cref="P:Duality.Resources.Font.Material"/>.
            </summary>
            <param name="text">The text to render.</param>
            <param name="vertices">The set of vertices that is emitted. You can re-use the same array each frame.</param>
            <param name="x">An X-Offset applied to the position of each emitted vertex.</param>
            <param name="y">An Y-Offset applied to the position of each emitted vertex.</param>
            <param name="clr">The color value that is applied to each emitted vertex.</param>
        </member>
        <member name="M:Duality.Resources.Font.EmitTextVertices(System.String,Duality.VertexFormat.VertexC1P3T2[]@)">
            <summary>
            Emits a set of vertices based on a text. To render this text, simply use that set of vertices combined with
            the Fonts <see cref="P:Duality.Resources.Font.Material"/>.
            </summary>
            <param name="text">The text to render.</param>
            <param name="vertices">The set of vertices that is emitted. You can re-use the same array each frame.</param>
        </member>
        <member name="M:Duality.Resources.Font.RenderToBitmap(System.String,System.Drawing.Image,System.Single,System.Single)">
            <summary>
            Renders a text to the specified target Image.
            </summary>
            <param name="text"></param>
            <param name="target"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Duality.Resources.Font.RenderToBitmap(System.String,System.Drawing.Image,System.Single,System.Single,Duality.ColorFormat.ColorRgba)">
            <summary>
            Renders a text to the specified target Image.
            </summary>
            <param name="text"></param>
            <param name="target"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="clr"></param>
        </member>
        <member name="M:Duality.Resources.Font.RenderToBitmap(System.String,Duality.Resources.Pixmap.Layer,System.Single,System.Single)">
            <summary>
            Renders a text to the specified target <see cref="T:Duality.Resources.Pixmap"/> <see cref="T:Duality.Resources.Pixmap.Layer"/>.
            </summary>
            <param name="text"></param>
            <param name="target"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Duality.Resources.Font.RenderToBitmap(System.String,Duality.Resources.Pixmap.Layer,System.Single,System.Single,Duality.ColorFormat.ColorRgba)">
            <summary>
            Renders a text to the specified target <see cref="T:Duality.Resources.Pixmap"/> <see cref="T:Duality.Resources.Pixmap.Layer"/>.
            </summary>
            <param name="text"></param>
            <param name="target"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="clr"></param>
        </member>
        <member name="M:Duality.Resources.Font.MeasureText(System.String)">
            <summary>
            Measures the size of a text rendered using this Font.
            </summary>
            <param name="text">The text to measure.</param>
            <returns>The size of the measured text.</returns>
        </member>
        <member name="M:Duality.Resources.Font.MeasureText(System.String[])">
            <summary>
            Measures the size of a multiline text rendered using this Font.
            </summary>
            <param name="text">The text to measure.</param>
            <returns>The size of the measured text.</returns>
        </member>
        <member name="M:Duality.Resources.Font.FitText(System.String,System.Single,System.Boolean)">
            <summary>
            Returns a text that is cropped to fit a maximum width using this Font.
            </summary>
            <param name="text">The original text.</param>
            <param name="maxWidth">The maximum width it may occupy.</param>
            <param name="byWord">If true, only whole words may be cropped.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.Resources.Font.MeasureTextGlyph(System.String,System.Int32)">
            <summary>
            Measures position and size of a specific glyph inside a text.
            </summary>
            <param name="text">The text that contains the glyph to measure.</param>
            <param name="index">The index of the glyph to measure.</param>
            <returns>A rectangle that describes the specified glyphs position and size.</returns>
        </member>
        <member name="M:Duality.Resources.Font.PickTextGlyph(System.String,System.Single,System.Single)">
            <summary>
            Returns the index of the glyph that is located at a certain location within a text.
            </summary>
            <param name="text">The text from which to pick a glyph.</param>
            <param name="x">X-Coordinate of the position where to look for a glyph.</param>
            <param name="y">Y-Coordinate of the position where to look for a glyph.</param>
            <returns>The index of the glyph that is located at the specified position.</returns>
        </member>
        <member name="M:Duality.Resources.Font.GetFontFamily(System.String)">
            <summary>
            Retrieves a <see cref="T:System.Drawing.FontFamily"/> by its name.
            </summary>
            <param name="name">The name of the FontFamily.</param>
            <returns>The FontFamily that has been retrieved, or null if no matching family was found.</returns>
        </member>
        <member name="M:Duality.Resources.Font.LoadFontFamilyFromFile(System.String)">
            <summary>
            Loads a <see cref="T:System.Drawing.FontFamily"/> from file.
            </summary>
            <param name="file">The file to load the FontFamily from.</param>
            <returns>The FontFamily that has been loaded.</returns>
        </member>
        <member name="M:Duality.Resources.Font.LoadFontFamilyFromMemory(System.Byte[])">
            <summary>
            Loads a <see cref="T:System.Drawing.FontFamily"/> from memory.
            </summary>
            <param name="memory">The memory chunk to load the FontFamily from.</param>
            <returns>The FontFamily that has been loaded.</returns>
        </member>
        <member name="M:Duality.Resources.Font.LoadFontFamilyFromStream(System.IO.Stream)">
            <summary>
            Loads a <see cref="T:System.Drawing.FontFamily"/> from stream.
            </summary>
            <param name="stream">The stream to load the FontFamily from.</param>
            <returns>The FontFamily that has been loaded.</returns>
        </member>
        <member name="P:Duality.Resources.Font.GenericMonospace8">
            <summary>
            A generic <see cref="P:Duality.Resources.Font.MonoSpace">monospace</see> Font (Size 8) that has been loaded from your systems font library.
            This is usually "Courier New".
            </summary>
        </member>
        <member name="P:Duality.Resources.Font.GenericMonospace10">
            <summary>
            A generic <see cref="P:Duality.Resources.Font.MonoSpace">monospace</see> Font (Size 10) that has been loaded from your systems font library.
            This is usually "Courier New".
            </summary>
        </member>
        <member name="P:Duality.Resources.Font.GenericSerif12">
            <summary>
            A generic serif Font (Size 12) that has been loaded from your systems font library.
            This is usually "Times New Roman".
            </summary>
        </member>
        <member name="P:Duality.Resources.Font.GenericSansSerif12">
            <summary>
            A generic sans-serif Font (Size 12) that has been loaded from your systems font library.
            This is usually "Arial".
            </summary>
        </member>
        <member name="P:Duality.Resources.Font.Family">
            <summary>
            [GET / SET] The name of the font family that is used.
            </summary>
        </member>
        <member name="P:Duality.Resources.Font.Size">
            <summary>
            [GET / SET] The size of the Font.
            </summary>
        </member>
        <member name="P:Duality.Resources.Font.Style">
            <summary>
            [GET / SET] The style of the font.
            </summary>
        </member>
        <member name="P:Duality.Resources.Font.GlyphColor">
            <summary>
            [GET / SET] When pre-rasterizing the necessary glyphs, they are rendered in this color.
            </summary>
        </member>
        <member name="P:Duality.Resources.Font.GlyphBgColor">
            <summary>
            [GET / SET] When pre-rasterizing the necessary glyphs, their background has this color.
            </summary>
        </member>
        <member name="P:Duality.Resources.Font.GlyphRenderHint">
            <summary>
            [GET / SET] Configures the internal glyph rasterizer.
            </summary>
        </member>
        <member name="P:Duality.Resources.Font.Material">
            <summary>
            [GET] The <see cref="T:Duality.Resources.Material"/> to use when rendering text of this Font.
            </summary>
        </member>
        <member name="P:Duality.Resources.Font.CharSpacing">
            <summary>
            [GET / SET] Additional spacing between each character. This is usually one tenth of the Fonts <see cref="P:Duality.Resources.Font.Size"/>.
            </summary>
        </member>
        <member name="P:Duality.Resources.Font.LineHeightFactor">
            <summary>
            [GET / SET] A factor for the Fonts <see cref="P:Duality.Resources.Font.Height"/> value that affects line spacings but not actual glyph sizes.
            </summary>
        </member>
        <member name="P:Duality.Resources.Font.MonoSpace">
            <summary>
            [GET / SET] Whether this is considered a monospace Font. If true, each character occupies exactly the same space.
            </summary>
        </member>
        <member name="P:Duality.Resources.Font.Kerning">
            <summary>
            [GET / SET] Whether this Font uses kerning, a technique where characters are moved closer together based on their actual shape,
            which usually looks much nicer. It has no visual effect when active at the same time with <see cref="P:Duality.Resources.Font.MonoSpace"/>, however
            kerning sample data will be available on glyphs.
            </summary>
            <seealso cref="T:Duality.Resources.Font.GlyphData"/>
        </member>
        <member name="P:Duality.Resources.Font.Filtering">
            <summary>
            [GET / SET] Whether or not this Font uses texture filtering. Note that if texture filtering is enabled, 
            fonts may appear slightly blurred due to full screen antialiazing / multisampling.
            </summary>
            <seealso cref="T:Duality.Resources.Font.GlyphData"/>
        </member>
        <member name="P:Duality.Resources.Font.NeedsReload">
            <summary>
            [GET] Returns whether this Font needs a <see cref="M:Duality.Resources.Font.ReloadData">reload</see> in order to apply
            changes that have been made to its Properties.
            </summary>
        </member>
        <member name="P:Duality.Resources.Font.CustomFamilyData">
            <summary>
            [GET] Returns a chunk of memory that contains this Fonts custom family data.
            </summary>
        </member>
        <member name="P:Duality.Resources.Font.Height">
            <summary>
            [GET] The Fonts height.
            </summary>
        </member>
        <member name="P:Duality.Resources.Font.LineSpacing">
            <summary>
            [GET] The y offset in pixels between two lines.
            </summary>
        </member>
        <member name="P:Duality.Resources.Font.Ascent">
            <summary>
            [GET] The Fonts ascent value.
            </summary>
        </member>
        <member name="P:Duality.Resources.Font.BodyAscent">
            <summary>
            [GET] The Fonts body ascent value.
            </summary>
        </member>
        <member name="P:Duality.Resources.Font.Descent">
            <summary>
            [GET] The Fonts descent value.
            </summary>
        </member>
        <member name="P:Duality.Resources.Font.BaseLine">
            <summary>
            [GET] The Fonts base line height.
            </summary>
        </member>
        <member name="T:Duality.Resources.Font.RenderHint">
            <summary>
            Configures a Fonts internal glyph rasterizer.
            </summary>
        </member>
        <member name="F:Duality.Resources.Font.RenderHint.Monochrome">
            <summary>
            Each glyph is rasterized monochrome
            </summary>
        </member>
        <member name="F:Duality.Resources.Font.RenderHint.AntiAlias">
            <summary>
            Each glyph is rasterized in grayscale, allowing smooth, antialiazed edges.
            </summary>
        </member>
        <member name="T:Duality.Resources.Font.GlyphData">
            <summary>
            Contains data about a single glyph.
            </summary>
        </member>
        <member name="F:Duality.Resources.Font.GlyphData.width">
            <summary>
            Thw width of the glyph
            </summary>
        </member>
        <member name="F:Duality.Resources.Font.GlyphData.height">
            <summary>
            The height of the glyph
            </summary>
        </member>
        <member name="F:Duality.Resources.Font.GlyphData.offsetX">
            <summary>
            The glyphs X offset when rendering it.
            </summary>
        </member>
        <member name="F:Duality.Resources.Font.GlyphData.kerningSamplesLeft">
            <summary>
            The glyphs kerning samples to the left.
            </summary>
        </member>
        <member name="F:Duality.Resources.Font.GlyphData.kerningSamplesRight">
            <summary>
            The glyphs kerning samples to the right.
            </summary>
        </member>
        <member name="T:Duality.DataLogOutput">
            <summary>
            A <see cref="T:Duality.ILogOutput">Log output</see> that stores all log entries in memory.
            </summary>
        </member>
        <member name="M:Duality.DataLogOutput.Write(Duality.Log,Duality.LogMessageType,System.String)">
            <summary>
            Writes a single message to the output.
            </summary>
            <param name="source">The <see cref="T:Duality.Log"/> from which the message originates.</param>
            <param name="type">The type of the log message.</param>
            <param name="msg">The message to write.</param>
        </member>
        <member name="P:Duality.DataLogOutput.Data">
            <summary>
            [GET] Enumerates all log entries that have been made.
            </summary>
        </member>
        <member name="T:Duality.DataLogOutput.LogEntryEventArgs">
            <summary>
            EventArgs for <see cref="T:Duality.DataLogOutput.LogEntry">LogEntries</see>.
            </summary>
        </member>
        <member name="T:Duality.DataLogOutput.LogEntry">
            <summary>
            A log entry.
            </summary>
        </member>
        <member name="P:Duality.DataLogOutput.LogEntry.Source">
            <summary>
            The <see cref="T:Duality.Log"/> from which this entry originates.
            </summary>
        </member>
        <member name="P:Duality.DataLogOutput.LogEntry.Type">
            <summary>
            The message's type.
            </summary>
        </member>
        <member name="P:Duality.DataLogOutput.LogEntry.Message">
            <summary>
            The log entry's message.
            </summary>
        </member>
        <member name="P:Duality.DataLogOutput.LogEntry.Indent">
            <summary>
            [GET] The message's indent value.
            </summary>
        </member>
        <member name="P:Duality.DataLogOutput.LogEntry.Timestamp">
            <summary>
            [GET] The messages timestamp.
            </summary>
        </member>
        <member name="T:Duality.NonSerializedResourceAttribute">
            <summary>
            Indicates that a field will be assumed null when serializing it as part of a Resource serialization.
            </summary>
        </member>
        <member name="T:Duality.GameObject">
            <summary>
            GameObjects are what every <see cref="T:Duality.Resources.Scene"/> consists of. They represent nodes in the hierarchial scene graph and
            can maintain a <see cref="T:Duality.Resources.PrefabLink"/> connection. A GameObject's main duty is to group several <see cref="T:Duality.Component"/>s
            to form one logical instance of an actual object as part of the game, such as "Car" or "PlayerCharacter". However,
            the GameObjects itsself does not contain any game-related logic and, by default, doesn't even occupy a position in space.
            This is the job of its Components.
            </summary>
            <seealso cref="T:Duality.Component"/>
            <seealso cref="T:Duality.Resources.Scene"/>
            <seealso cref="T:Duality.Resources.PrefabLink"/>
        </member>
        <member name="M:Duality.GameObject.#ctor">
            <summary>
            Creates a new, empty GameObject.
            </summary>
        </member>
        <member name="M:Duality.GameObject.#ctor(System.String)">
            <summary>
            Creates a new, empty GameObject with a specific name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Duality.GameObject.#ctor(Duality.ContentRef{Duality.Resources.Prefab})">
            <summary>
            Creates a GameObject based on a specific <see cref="T:Duality.Resources.Prefab"/>.
            </summary>
            <param name="prefab">The Prefab that will be applied to this GameObject.</param>
            <seealso cref="T:Duality.Resources.Prefab"/>
        </member>
        <member name="M:Duality.GameObject.LinkToPrefab(Duality.ContentRef{Duality.Resources.Prefab})">
            <summary>
            Sets or alters this GameObject's <see cref="T:Duality.Resources.PrefabLink"/> to reference the specified <see cref="T:Duality.Resources.Prefab"/>.
            </summary>
            <param name="prefab">The Prefab that will be linked to.</param>
            <seealso cref="T:Duality.Resources.PrefabLink"/>
            <seealso cref="T:Duality.Resources.Prefab"/>
        </member>
        <member name="M:Duality.GameObject.BreakPrefabLink">
            <summary>
            Breaks this GameObject's <see cref="T:Duality.Resources.PrefabLink"/>
            </summary>
        </member>
        <member name="M:Duality.GameObject.ChildByName(System.String)">
            <summary>
            Returns the first child GameObject with the specified name. You may also specify a full name to access children's children.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.GameObject.ChildAtIndex(System.Int32)">
            <summary>
            Returns the child GameObject that is internally stored at the specified index.
            </summary>
            <param name="index">The index at which the desired GameObject is located.</param>
            <returns>The child GameObject at the specified index. Null, if the index is not valid.</returns>
        </member>
        <member name="M:Duality.GameObject.ChildAtIndexPath(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Executes a series of <see cref="M:Duality.GameObject.ChildAtIndex(System.Int32)"/> calls, beginning at this GameObject and 
            each on the last retrieved child object.
            </summary>
            <param name="indexPath">An enumeration of child indices.</param>
            <returns>The last retrieved GameObject after executing all indexing steps.</returns>
            <example>
            Calling <c>ChildAtIndexPath(new[] { 0, 0 })</c> will return the first child of the first child.
            </example>
        </member>
        <member name="M:Duality.GameObject.IndexOfChild(Duality.GameObject)">
            <summary>
            Determines the index of a specific child GameObject.
            </summary>
            <param name="child">The child GameObject of which the index is to be determined.</param>
            <returns>The index of the specified child GameObject</returns>
            <seealso cref="M:Duality.GameObject.ChildAtIndex(System.Int32)"/>
        </member>
        <member name="M:Duality.GameObject.IndexPathOfChild(Duality.GameObject)">
            <summary>
            Determines the index path from this GameObject to the specified child (or grandchild, etc.) of it.
            </summary>
            <param name="child">The child GameObject to lead to.</param>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> of indices that lead from this GameObject to the specified child GameObject.</returns>
            <seealso cref="M:Duality.GameObject.ChildAtIndexPath(System.Collections.Generic.IEnumerable{System.Int32})"/>
        </member>
        <member name="M:Duality.GameObject.IsChildOf(Duality.GameObject)">
            <summary>
            Returns whether this GameObject is a child, grandchild or similar of the specified GameObject.
            </summary>
            <param name="parent">The GameObject to check whether or not it is a parent of this one.</param>
            <returns>True, if it is, false if not.</returns>
        </member>
        <member name="M:Duality.GameObject.GetComponents``1(System.Boolean)">
            <summary>
            Enumerates all <see cref="T:Duality.Component"/>s of this GameObject that match the specified <see cref="T:System.Type"/> or subclass it.
            </summary>
            <typeparam name="T">The base Type to match when iterating through the Components.</typeparam>
            <param name="activeOnly">If true, only <see cref="P:Duality.Component.Active">active</see> Components are enumerated.</param>
            <returns>An enumeration of all Components that match the specified conditions.</returns>
            <seealso cref="M:Duality.GameObject.GetComponents(System.Type,System.Boolean)"/>
        </member>
        <member name="M:Duality.GameObject.GetComponentsInChildren``1(System.Boolean)">
            <summary>
            Enumerates all <see cref="T:Duality.Component"/>s of this object's child GameObjects that match the specified <see cref="T:System.Type"/> or subclass it.
            </summary>
            <typeparam name="T">The base Type to match when iterating through the Components.</typeparam>
            <param name="activeOnly">If true, only <see cref="P:Duality.Component.Active">active</see> Components are enumerated.</param>
            <returns>An enumeration of all Components that match the specified conditions.</returns>
            <seealso cref="M:Duality.GameObject.GetComponentsInChildren(System.Type,System.Boolean)"/>
        </member>
        <member name="M:Duality.GameObject.GetComponentsDeep``1(System.Boolean)">
            <summary>
            Enumerates all <see cref="T:Duality.Component"/>s of this GameObject or any child GameObject that match the specified <see cref="T:System.Type"/> or subclass it.
            </summary>
            <typeparam name="T">The base Type to match when iterating through the Components.</typeparam>
            <param name="activeOnly">If true, only <see cref="P:Duality.Component.Active">active</see> Components are enumerated.</param>
            <returns>An enumeration of all Components that match the specified conditions.</returns>
            <seealso cref="M:Duality.GameObject.GetComponentsDeep(System.Type,System.Boolean)"/>
        </member>
        <member name="M:Duality.GameObject.GetComponents(System.Type,System.Boolean)">
            <summary>
            Enumerates all <see cref="T:Duality.Component"/>s of this GameObject that match the specified <see cref="T:System.Type"/> or subclass it.
            </summary>
            <param name="t">The base Type to match when iterating through the Components.</param>
            <param name="activeOnly">If true, only <see cref="P:Duality.Component.Active">active</see> Components are enumerated.</param>
            <returns>An enumeration of all Components that match the specified conditions.</returns>
            <seealso cref="M:Duality.GameObject.GetComponents``1(System.Boolean)"/>
        </member>
        <member name="M:Duality.GameObject.GetComponentsInChildren(System.Type,System.Boolean)">
            <summary>
            Enumerates all <see cref="T:Duality.Component"/>s of this object's child GameObjects that match the specified <see cref="T:System.Type"/> or subclass it.
            </summary>
            <param name="t">The base Type to match when iterating through the Components.</param>
            <param name="activeOnly">If true, only <see cref="P:Duality.Component.Active">active</see> Components are enumerated.</param>
            <returns>An enumeration of all Components that match the specified conditions.</returns>
            <seealso cref="M:Duality.GameObject.GetComponentsInChildren``1(System.Boolean)"/>
        </member>
        <member name="M:Duality.GameObject.GetComponentsDeep(System.Type,System.Boolean)">
            <summary>
            Enumerates all <see cref="T:Duality.Component"/>s of this GameObject or any child GameObject that match the specified <see cref="T:System.Type"/> or subclass it.
            </summary>
            <param name="t">The base Type to match when iterating through the Components.</param>
            <param name="activeOnly">If true, only <see cref="P:Duality.Component.Active">active</see> Components are enumerated.</param>
            <returns>An enumeration of all Components that match the specified conditions.</returns>
            <seealso cref="M:Duality.GameObject.GetComponentsDeep``1(System.Boolean)"/>
        </member>
        <member name="M:Duality.GameObject.GetComponent``1(System.Boolean)">
            <summary>
            Returns a single <see cref="T:Duality.Component"/> that matches the specified <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The Type to match the Components with.</typeparam>
            <param name="exactType">If true, the Component must match the specified Type exactly. If false, subclasses of it are also valid.</param>
            <returns>A single Component that matches the specified Type. Null, if none was found.</returns>
        </member>
        <member name="M:Duality.GameObject.GetComponent(System.Type,System.Boolean)">
            <summary>
            Returns a single <see cref="T:Duality.Component"/> that matches the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="t">The Type to match the Components with.</param>
            <param name="exactType">If true, the Component must match the specified Type exactly. If false, subclasses of it are also valid.</param>
            <returns>A single Component that matches the specified Type. Null, if none was found.</returns>
        </member>
        <member name="M:Duality.GameObject.AddComponent``1">
            <summary>
            Adds a <see cref="T:Duality.Component"/> of the specified <see cref="T:System.Type"/> to this GameObject, if not existing yet.
            Simply uses the existing Component otherwise.
            </summary>
            <typeparam name="T">The Type of which to request a Component instance.</typeparam>
            <returns>A reference to a Component of the specified Type.</returns>
            <seealso cref="M:Duality.GameObject.AddComponent(System.Type)"/>
        </member>
        <member name="M:Duality.GameObject.AddComponent(System.Type)">
            <summary>
            Adds a <see cref="T:Duality.Component"/> of the specified <see cref="T:System.Type"/> to this GameObject, if not existing yet.
            Simply uses the existing Component otherwise.
            </summary>
            <param name="t">The Type of which to request a Component instance.</param>
            <returns>A reference to a Component of the specified Type.</returns>
            <seealso cref="M:Duality.GameObject.AddComponent``1"/>
        </member>
        <member name="M:Duality.GameObject.AddComponent``1(``0)">
            <summary>
            Adds the specified <see cref="T:Duality.Component"/> to this GameObject, if no Component of that Type is already part of this GameObject.
            Simply uses the already added Component otherwise.
            </summary>
            <typeparam name="T">The Components Type.</typeparam>
            <param name="newComp">The Component instance to add to this GameObject.</param>
            <returns>A reference to a Component of the specified Type</returns>
            <exception cref="T:System.ArgumentException">Thrown if the specified Component is already attached to a GameObject</exception>
        </member>
        <member name="M:Duality.GameObject.RemoveComponent``1">
            <summary>
            Removes a <see cref="T:Duality.Component"/> of the specified <see cref="T:System.Type"/> from this GameObject, if existing.
            </summary>
            <typeparam name="T">The Type of which to remove a Component instance.</typeparam>
            <returns>A reference to the removed Component. Null otherwise.</returns>
            <seealso cref="M:Duality.GameObject.RemoveComponent(System.Type)"/>
            <seealso cref="M:Duality.GameObject.RemoveComponent(Duality.Component)"/>
        </member>
        <member name="M:Duality.GameObject.RemoveComponent(System.Type)">
            <summary>
            Removes a <see cref="T:Duality.Component"/> of the specified <see cref="T:System.Type"/> from this GameObject, if existing.
            </summary>
            <param name="t">The Type of which to remove a Component instance.</param>
            <returns>A reference to the removed Component. Null otherwise.</returns>
            <seealso cref="M:Duality.GameObject.RemoveComponent``1"/>
            <seealso cref="M:Duality.GameObject.RemoveComponent(Duality.Component)"/>
        </member>
        <member name="M:Duality.GameObject.RemoveComponent(Duality.Component)">
            <summary>
            Removes a specific <see cref="T:Duality.Component"/> from this GameObject.
            </summary>
            <param name="cmp">The Component to remove from this GameObject</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the specified Component is a null reference.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the specified Component does not belong to this GameObject</exception>
            <seealso cref="M:Duality.GameObject.RemoveComponent(System.Type)"/>
            <seealso cref="M:Duality.GameObject.RemoveComponent``1"/>
        </member>
        <member name="M:Duality.GameObject.ClearComponents">
            <summary>
            Removes all <see cref="T:Duality.Component">Components</see> from this GameObject.
            </summary>
        </member>
        <member name="M:Duality.GameObject.Dispose">
            <summary>
            Disposes this GameObject as well as all of its child GameObjects and <see cref="T:Duality.Component">Components</see>.
            You usually don't need this - use <see cref="M:Duality.GameObject.DisposeLater"/> instead.
            </summary>
            <seealso cref="M:Duality.GameObject.DisposeLater"/>
        </member>
        <member name="M:Duality.GameObject.DisposeLater">
            <summary>
            Schedules this GameObject for disposal. It is guaranteed to be executed until the next update cycle starts.
            </summary>
            <seealso cref="M:Duality.GameObject.Dispose"/>
        </member>
        <member name="M:Duality.GameObject.Clone">
            <summary>
            Creates a deep copy of this GameObject.
            </summary>
            <returns>A reference to a newly created deep copy of this GameObject.</returns>
        </member>
        <member name="M:Duality.GameObject.CopyTo(Duality.GameObject)">
            <summary>
            Deep-copies this GameObject's data to the specified target GameObject.
            </summary>
            <param name="target">The target GameObject to copy to.</param>
        </member>
        <member name="M:Duality.GameObject.PerformSanitaryCheck">
            <summary>
            Sanitary check in case something failed deserializing
            </summary>
        </member>
        <member name="M:Duality.GameObject.NotifyCollisionBegin(Duality.Component,Duality.CollisionEventArgs)">
            <summary>
            Notifies the GameObject about a collision that has begun.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Duality.GameObject.NotifyCollisionEnd(Duality.Component,Duality.CollisionEventArgs)">
            <summary>
            Notifies the GameObject about a collision that has ended.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Duality.GameObject.NotifyCollisionSolve(Duality.Component,Duality.CollisionEventArgs)">
            <summary>
            Notifies the GameObject about a collision that has been solved.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="P:Duality.GameObject.Parent">
            <summary>
            [GET / SET] This GameObject's parent object in the scene graph.
            A GameObject usually depends on its parent in some way, such as being
            positioned relative to it when occupying a position in space.
            </summary>
        </member>
        <member name="P:Duality.GameObject.Active">
            <summary>
            [GET / SET] Whether or not the GameObject is currently active. To return true,
            both the GameObject itsself and all of its parent GameObjects need to be active.
            </summary>
            <seealso cref="P:Duality.GameObject.ActiveSingle"/>
        </member>
        <member name="P:Duality.GameObject.ActiveSingle">
            <summary>
            [GET / SET] Whether or not the GameObject is currently active. Unlike <see cref="P:Duality.GameObject.Active"/>,
            this property ignores parent activation states and depends only on this single GameObject.
            The scene graph and other Duality instances usually check <see cref="P:Duality.GameObject.Active"/>, not ActiveSingle.
            </summary>
            <seealso cref="P:Duality.GameObject.Active"/>
        </member>
        <member name="P:Duality.GameObject.Name">
            <summary>
            [GET / SET] The name of this GameObject.
            </summary>
        </member>
        <member name="P:Duality.GameObject.FullName">
            <summary>
            [GET] The path-like hierarchial name of this GameObject.
            </summary>
            <example>For an object called <c>Wheel</c> inside an object called <c>Car</c>, this would return <c>Car/Wheel</c>.</example>
        </member>
        <member name="P:Duality.GameObject.Id">
            <summary>
            [GET] The GameObjects persistent globally unique identifier.
            </summary>
        </member>
        <member name="P:Duality.GameObject.HierarchyLevel">
            <summary>
            [GET] Returns the number of parents this object has when travelling upwards the scene graph hierarchy.
            </summary>
            <example>
            This will be zero for a root object (one that has no parent object), one for a root object's child,
            two for a root object's child's child, and so on.
            </example>
        </member>
        <member name="P:Duality.GameObject.ChildCount">
            <summary>
            [GET] The number of child GameObjects this object has.
            </summary>
        </member>
        <member name="P:Duality.GameObject.ComponentCount">
            <summary>
            [GET] The number of <see cref="T:Duality.Component"/>s this object consists of.
            </summary>
        </member>
        <member name="P:Duality.GameObject.Children">
            <summary>
            [GET] Enumerates this objects child GameObjects.
            </summary>
        </member>
        <member name="P:Duality.GameObject.ChildrenDeep">
            <summary>
            [GET] Enumerates all GameObjects that are directly or indirectly parented to this object, i.e. its
            children, grandchildren, etc.
            </summary>
        </member>
        <member name="P:Duality.GameObject.PrefabLink">
            <summary>
            [GET] The <see cref="T:Duality.Resources.PrefabLink"/> that connects this object to a <see cref="T:Duality.Resources.Prefab"/>.
            </summary>
            <seealso cref="T:Duality.Resources.PrefabLink"/>
            <seealso cref="T:Duality.Resources.Prefab"/>
        </member>
        <member name="P:Duality.GameObject.AffectedByPrefabLink">
            <summary>
            [GET] The <see cref="T:Duality.Resources.PrefabLink"/> that connects this object or one or its parent GameObjects to a <see cref="T:Duality.Resources.Prefab"/>.
            </summary>
            <remarks>
            This does not necessarily mean that this GameObject will be affected by the PrefabLink, since it might not be part of
            the linked Prefab. It simply indicates the returned PrefabLink's potential to adjust this GameObject when being applied.
            </remarks>
            <seealso cref="T:Duality.Resources.PrefabLink"/>
            <seealso cref="T:Duality.Resources.Prefab"/>
        </member>
        <member name="P:Duality.GameObject.Disposed">
            <summary>
            [GET] Returns whether this GameObject has been disposed. Disposed GameObjects are not to be used and should
            be treated specifically or as null references by your code.
            </summary>
        </member>
        <member name="P:Duality.GameObject.Transform">
            <summary>
            [GET] The GameObject's <see cref="T:Duality.Components.Transform"/> Component, if existing.
            </summary>
            <seealso cref="T:Duality.Components.Transform"/>
        </member>
        <member name="P:Duality.GameObject.Camera">
            <summary>
            [GET] The GameObject's <see cref="T:Duality.Components.Camera"/> Component, if existing.
            </summary>
            <seealso cref="T:Duality.Components.Camera"/>
        </member>
        <member name="P:Duality.GameObject.Renderer">
            <summary>
            [GET] The GameObject's <see cref="T:Duality.Components.Renderer"/> Component, if existing. 
            </summary>
            <remarks>Note that a GameObject may contain multiple Renderers in which case the return value of this property may be any of them.</remarks>
            <seealso cref="T:Duality.Components.Renderer"/>
        </member>
        <member name="P:Duality.GameObject.RigidBody">
            <summary>
            [GET] The GameObject's <see cref="T:Duality.Components.Physics.RigidBody"/> Component, if existing. 
            </summary>
            <remarks>Note that a GameObject may contain multiple Colliders in which case the return value of this property may be any of them.</remarks>
            <seealso cref="T:Duality.Components.Physics.RigidBody"/>
        </member>
        <member name="E:Duality.GameObject.EventComponentAdded">
            <summary>
            Fired when a Component has been added to the GameObject
            </summary>
        </member>
        <member name="E:Duality.GameObject.EventComponentRemoving">
            <summary>
            Fired when a Component is about to be removed from the GameObject
            </summary>
        </member>
        <member name="E:Duality.GameObject.EventCollisionBegin">
            <summary>
            Fired when this GameObject starts to collide with another GameObject.
            </summary>
        </member>
        <member name="E:Duality.GameObject.EventCollisionEnd">
            <summary>
            Fired when this GameObject stops to collide with another GameObject.
            </summary>
        </member>
        <member name="E:Duality.GameObject.EventCollisionSolve">
            <summary>
            Fired each time a collision between this GameObject and another has been solved.
            </summary>
        </member>
        <member name="T:Duality.ExtMethodsIList">
            <summary>
            Provides extension methods for lists.
            </summary>
        </member>
        <member name="M:Duality.ExtMethodsIList.StableSort``1(System.Collections.Generic.IList{``0})">
            <summary>
            Performs a stable sort.
            </summary>
            <typeparam name="T">The lists object type.</typeparam>
            <param name="list">List to perform the sort operation on.</param>
        </member>
        <member name="M:Duality.ExtMethodsIList.StableSort``1(System.Collections.Generic.IList{``0},System.Collections.Generic.Comparer{``0})">
            <summary>
            Performs a stable sort.
            </summary>
            <typeparam name="T">The lists object type.</typeparam>
            <param name="list">List to perform the sort operation on.</param>
            <param name="comparer">The comparer to use.</param>
        </member>
        <member name="M:Duality.ExtMethodsIList.StableSort``1(System.Collections.Generic.IList{``0},System.Comparison{``0})">
            <summary>
            Performs a stable sort.
            </summary>
            <typeparam name="T">The lists object type.</typeparam>
            <param name="list">List to perform the sort operation on.</param>
            <param name="comparison">The comparison to use.</param>
        </member>
        <member name="M:Duality.ExtMethodsIList.IndexOfFirst``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Returns the index of the first object matching the specified one.
            </summary>
            <typeparam name="T">The lists object type.</typeparam>
            <param name="collection">List to perform the sort operation on.</param>
            <param name="val">Object to compare the lists contents to.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.ExtMethodsIList.IndexOfFirst``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            Returns the index of the first object matching the specified predicate.
            </summary>
            <typeparam name="T">The lists object type.</typeparam>
            <param name="collection">List to perform the sort operation on.</param>
            <param name="pred">The predicate to use on the lists contents.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.ExtMethodsIList.IndexOfLast``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Returns the index of the last object matching the specified one.
            </summary>
            <typeparam name="T">The lists object type.</typeparam>
            <param name="collection">List to perform the sort operation on.</param>
            <param name="val">Object to compare the lists contents to.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.ExtMethodsIList.IndexOfLast``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            Returns the index of the last object matching the specified predicate.
            </summary>
            <typeparam name="T">The lists object type.</typeparam>
            <param name="collection">List to perform the sort operation on.</param>
            <param name="pred">The predicate to use on the lists contents.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.ExtMethodsIList.GetCombinedHashCode(System.Collections.Generic.IList{System.Byte})">
            <summary>
            Returns the combined hash code of the specified byte list.
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="T:Duality.EditorHints.MemberFlags">
            <summary>
            Some general flags for Type members that indicate preferred editor behaviour.
            </summary>
        </member>
        <member name="F:Duality.EditorHints.MemberFlags.None">
            <summary>
            No flags set.
            </summary>
        </member>
        <member name="F:Duality.EditorHints.MemberFlags.ForceWriteback">
            <summary>
            When editing the Properties or Fields value, a final set operation is requested to finish editing.
            </summary>
        </member>
        <member name="F:Duality.EditorHints.MemberFlags.Invisible">
            <summary>
            The member is considered invisible.
            </summary>
        </member>
        <member name="F:Duality.EditorHints.MemberFlags.ReadOnly">
            <summary>
            The member is considered read-only, even if writing is possible via reflection.
            </summary>
        </member>
        <member name="F:Duality.EditorHints.MemberFlags.AffectsOthers">
            <summary>
            Indicates that editing the member may have an effect on any other member of the current object.
            </summary>
        </member>
        <member name="T:Duality.EditorHints.EditorHintMemberAttribute">
            <summary>
            An attribute that provides member-related information about preferred editor behaviour
            </summary>
        </member>
        <member name="T:Duality.EditorHints.EditorHintFlagsAttribute">
            <summary>
            Provides general information about a members preferred editor behaviour.
            </summary>
        </member>
        <member name="P:Duality.EditorHints.EditorHintFlagsAttribute.Flags">
            <summary>
            [GET] Flags that indicate the members general behaviour
            </summary>
        </member>
        <member name="T:Duality.EditorHints.EditorHintRangeAttribute">
            <summary>
            Provides information about a numerical members allowed value range.
            </summary>
        </member>
        <member name="P:Duality.EditorHints.EditorHintRangeAttribute.Min">
            <summary>
            [GET] The members minimum value
            </summary>
        </member>
        <member name="P:Duality.EditorHints.EditorHintRangeAttribute.Max">
            <summary>
            [GET] The members maximum value
            </summary>
        </member>
        <member name="T:Duality.EditorHints.EditorHintIncrementAttribute">
            <summary>
            Provides information about a numerical members value increment.
            </summary>
        </member>
        <member name="P:Duality.EditorHints.EditorHintIncrementAttribute.Increment">
            <summary>
            [GET] The members value increment.
            </summary>
        </member>
        <member name="T:Duality.EditorHints.EditorHintDecimalPlacesAttribute">
            <summary>
            Provides information about a numerical members decimal accuracy
            </summary>
        </member>
        <member name="P:Duality.EditorHints.EditorHintDecimalPlacesAttribute.Places">
            <summary>
            [GET] The preferred number of displayed decimal places
            </summary>
        </member>
        <member name="T:Duality.InitState">
            <summary>
            Describes the state of object activation or disposal.
            </summary>
        </member>
        <member name="F:Duality.InitState.Initializing">
            <summary>
            The object is currently initializing.
            </summary>
        </member>
        <member name="F:Duality.InitState.Initialized">
            <summary>
            The object has been fully initialized and is fully operational.
            </summary>
        </member>
        <member name="F:Duality.InitState.Disposing">
            <summary>
            The object is currently disposing.
            </summary>
        </member>
        <member name="F:Duality.InitState.Disposed">
            <summary>
            The object has been fully disposed and can be considered "dead".
            </summary>
        </member>
        <member name="M:Duality.ExtMethodsInitState.IsActive(Duality.InitState)">
            <summary>
            Returns whether the current <see cref="T:Duality.InitState"/> can be considered active. This is true
            after initialization and during disposal.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="T:Duality.Serialization.BinaryFormatter">
            <summary>
            De/Serializes object data.
            </summary>
            <seealso cref="T:Duality.Serialization.BinaryMetaFormatter"/>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatter.WriteMemberInfo(System.Object,System.UInt32)">
            <summary>
            Writes the specified <see cref="T:System.Reflection.MemberInfo"/>, including references objects.
            </summary>
            <param name="obj">The object to write.</param>
            <param name="id">The objects id.</param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatter.WriteArray(System.Object,Duality.Serialization.SerializeType,System.UInt32)">
            <summary>
            Writes the specified <see cref="T:System.Array"/>, including references objects.
            </summary>
            <param name="obj">The object to write.</param>
            <param name="objSerializeType">The <see cref="T:Duality.Serialization.SerializeType"/> describing the object.</param>
            <param name="id">The objects id.</param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatter.WriteStruct(System.Object,Duality.Serialization.SerializeType,System.UInt32)">
            <summary>
            Writes the specified structural object, including references objects.
            </summary>
            <param name="obj">The object to write.</param>
            <param name="objSerializeType">The <see cref="T:Duality.Serialization.SerializeType"/> describing the object.</param>
            <param name="id">The objects id.</param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatter.WriteDelegate(System.Object,Duality.Serialization.SerializeType,System.UInt32)">
            <summary>
            Writes the specified <see cref="T:System.Delegate"/>, including references objects.
            </summary>
            <param name="obj">The object to write.</param>
            <param name="objSerializeType">The <see cref="T:Duality.Serialization.SerializeType"/> describing the object.</param>
            <param name="id">The objects id.</param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatter.WriteEnum(System.Enum,Duality.Serialization.SerializeType)">
            <summary>
            Writes the specified <see cref="T:System.Enum"/>.
            </summary>
            <param name="obj">The object to write.</param>
            <param name="objSerializeType">The <see cref="T:Duality.Serialization.SerializeType"/> describing the object.</param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatter.ReadArray">
            <summary>
            Reads an <see cref="T:System.Array"/>, including referenced objects.
            </summary>
            <returns>The object that has been read.</returns>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatter.ReadStruct">
            <summary>
            Reads a structural object, including referenced objects.
            </summary>
            <returns>The object that has been read.</returns>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatter.ReadObjectRef">
            <summary>
            Reads an object reference.
            </summary>
            <returns>The object that has been read.</returns>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatter.ReadMemberInfo(Duality.Serialization.DataType)">
            <summary>
            Reads a <see cref="T:System.Reflection.MemberInfo"/>, including referenced objects.
            </summary>
            <param name="dataType">The <see cref="T:Duality.Serialization.DataType"/> of the object to read.</param>
            <returns>The object that has been read.</returns>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatter.ReadDelegate">
            <summary>
            Reads a <see cref="T:System.Delegate"/>, including referenced objects.
            </summary>
            <returns>The object that has been read.</returns>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatter.ReadEnum">
            <summary>
            Reads an <see cref="T:System.Enum"/>.
            </summary>
            <returns>The object that has been read.</returns>
        </member>
        <member name="T:Duality.Resources.FragmentShader">
            <summary>
            Represents an OpenGL FragmentShader.
            </summary>
        </member>
        <member name="F:Duality.Resources.FragmentShader.FileExt">
            <summary>
            A FragmentShader resources file extension.
            </summary>
        </member>
        <member name="F:Duality.Resources.FragmentShader.VirtualContentPath">
            <summary>
            (Virtual) base path for Duality's embedded default FragmentShaders.
            </summary>
        </member>
        <member name="F:Duality.Resources.FragmentShader.ContentPath_Minimal">
            <summary>
            (Virtual) path of the <see cref="P:Duality.Resources.FragmentShader.Minimal"/> FragmentShader.
            </summary>
        </member>
        <member name="F:Duality.Resources.FragmentShader.ContentPath_Picking">
            <summary>
            (Virtual) path of the <see cref="P:Duality.Resources.FragmentShader.Picking"/> FragmentShader.
            </summary>
        </member>
        <member name="F:Duality.Resources.FragmentShader.ContentPath_SmoothAnim">
            <summary>
            (Virtual) path of the <see cref="P:Duality.Resources.FragmentShader.SmoothAnim"/> FragmentShader.
            </summary>
        </member>
        <member name="P:Duality.Resources.FragmentShader.Minimal">
            <summary>
            [GET] A minimal FragmentShader. It performs a texture lookup
            and applies vertex-coloring.
            </summary>
        </member>
        <member name="P:Duality.Resources.FragmentShader.Picking">
            <summary>
            [GET] A FragmentShader designed for picking operations. It uses
            the provided texture for alpha output and forwards the incoming RGB color value.
            </summary>
        </member>
        <member name="P:Duality.Resources.FragmentShader.SmoothAnim">
            <summary>
            [GET] The SmoothAnim FragmentShader. It performs two lookups
            on the same texture and blends the results using an incoming float value.
            </summary>
        </member>
        <member name="T:Duality.IContentRef">
            <summary>
            IContentRef is a general interface for <see cref="T:Duality.ContentRef`1">content references</see> of any <see cref="T:Duality.Resource"/> type.
            </summary>
            <seealso cref="T:Duality.Resource"/>
            <seealso cref="T:Duality.ContentProvider"/>
            <seealso cref="T:Duality.ContentRef`1"/>
        </member>
        <member name="M:Duality.IContentRef.Is(System.Type)">
            <summary>
            Determines if the references Resource's Type is assignable to the specified Type.
            </summary>
            <param name="resType">The Resource Type in question.</param>
            <returns>True, if the referenced Resource is of the specified Type or subclassing it.</returns>
        </member>
        <member name="M:Duality.IContentRef.Is``1">
            <summary>
            Determines if the references Resource's Type is assignable to the specified Type.
            </summary>
            <typeparam name="U">The Resource Type in question.</typeparam>
            <returns>True, if the referenced Resource is of the specified Type or subclassing it.</returns>
        </member>
        <member name="M:Duality.IContentRef.As``1">
            <summary>
            Creates a <see cref="T:Duality.ContentRef`1"/> of the specified Type, referencing the same Resource.
            </summary>
            <typeparam name="U">The Resource Type to create a reference of.</typeparam>
            <returns>
            A <see cref="T:Duality.ContentRef`1"/> of the specified Type, referencing the same Resource.
            Returns a <see cref="F:Duality.ContentRef`1.Null">null reference</see> if the Resource is not assignable
            to the specified Type.
            </returns>
        </member>
        <member name="M:Duality.IContentRef.MakeAvailable">
            <summary>
            Loads the associated content as if it was accessed now.
            You don't usually need to call this method. It is invoked implicitly by trying to access the ContentRef.
            </summary>
        </member>
        <member name="P:Duality.IContentRef.Res">
            <summary>
            [GET] Returns the actual <see cref="T:Duality.Resource"/>. If currently unavailable, it is loaded and then returned.
            Because of that, this Property is only null if the references Resource is missing, invalid, or
            this content reference has been explicitly set to null. Never returns disposed Resources.
            </summary>
        </member>
        <member name="P:Duality.IContentRef.ResWeak">
            <summary>
            [GET] Returns the current reference to the Resource that is stored locally. No attemp is made to load or reload
            the Resource if currently unavailable.
            </summary>
        </member>
        <member name="P:Duality.IContentRef.ResType">
            <summary>
            [GET] The <see cref="T:System.Type"/> of the referenced Resource. If currently unavailable, this is determined by
            the Resource file path.
            </summary>
        </member>
        <member name="P:Duality.IContentRef.Path">
            <summary>
            [GET / SET] The path where to look for the Resource, if it is currently unavailable.
            </summary>
        </member>
        <member name="P:Duality.IContentRef.IsExplicitNull">
            <summary>
            [GET] Returns whether this content reference has been explicitly set to null.
            </summary>
        </member>
        <member name="P:Duality.IContentRef.IsAvailable">
            <summary>
            [GET] Returns whether this content reference is available in general. This may trigger loading it, if currently unavailable.
            </summary>
        </member>
        <member name="P:Duality.IContentRef.IsLoaded">
            <summary>
            [GET] Returns whether the referenced Resource is currently loaded.
            </summary>
        </member>
        <member name="P:Duality.IContentRef.IsDefaultContent">
            <summary>
            [GET] Returns whether the referenced Resource is part of Duality's embedded default content.
            </summary>
        </member>
        <member name="P:Duality.IContentRef.IsRuntimeResource">
            <summary>
            [GET] Returns whether the Resource has been generated at runtime and cannot be retrieved via content path.
            </summary>
        </member>
        <member name="P:Duality.IContentRef.Name">
            <summary>
            [GET] The name of the referenced Resource.
            </summary>
        </member>
        <member name="P:Duality.IContentRef.FullName">
            <summary>
            [GET] The full name of the referenced Resource, including its path but not its file extension
            </summary>
        </member>
        <!-- Ungültiger XML-Kommentar wurde für den Member "T:Duality.ContentRef`1" ignoriert -->
        <member name="F:Duality.ContentRef`1.Null">
            <summary>
            An explicit null reference.
            </summary>
        </member>
        <member name="M:Duality.ContentRef`1.#ctor(`0,System.String)">
            <summary>
            Creates a ContentRef pointing to the specified <see cref="T:Duality.Resource"/>, assuming the
            specified path as its origin, if the Resource itsself is either null or doesn't
            provide a valid <see cref="P:Duality.Resource.Path"/>.
            </summary>
            <param name="res">The Resource to reference.</param>
            <param name="altPath">The referenced Resource's file path.</param>
        </member>
        <member name="M:Duality.ContentRef`1.#ctor(`0)">
            <summary>
            Creates a ContentRef pointing to the specified <see cref="T:Duality.Resource"/>.
            </summary>
            <param name="res">The Resource to reference.</param>
        </member>
        <member name="M:Duality.ContentRef`1.Is(System.Type)">
            <summary>
            Determines if the references Resource's Type is assignable to the specified Type.
            </summary>
            <param name="resType">The Resource Type in question.</param>
            <returns>True, if the referenced Resource is of the specified Type or subclassing it.</returns>
        </member>
        <member name="M:Duality.ContentRef`1.Is``1">
            <summary>
            Determines if the references Resource's Type is assignable to the specified Type.
            </summary>
            <typeparam name="U">The Resource Type in question.</typeparam>
            <returns>True, if the referenced Resource is of the specified Type or subclassing it.</returns>
        </member>
        <member name="M:Duality.ContentRef`1.As``1">
            <summary>
            Creates a <see cref="T:Duality.ContentRef`1"/> of the specified Type, referencing the same Resource.
            </summary>
            <typeparam name="U">The Resource Type to create a reference of.</typeparam>
            <returns>
            A <see cref="T:Duality.ContentRef`1"/> of the specified Type, referencing the same Resource.
            Returns a <see cref="F:Duality.ContentRef`1.Null">null reference</see> if the Resource is not assignable
            to the specified Type.
            </returns>
        </member>
        <member name="M:Duality.ContentRef`1.MakeAvailable">
            <summary>
            Loads the associated content as if it was accessed now.
            You don't usually need to call this method. It is invoked implicitly by trying to access the ContentRef
            </summary>
        </member>
        <member name="M:Duality.ContentRef`1.op_Equality(Duality.ContentRef{`0},Duality.ContentRef{`0})">
            <summary>
            Compares two ContentRefs for equality.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
            <remarks>
            This is a two-step comparison. First, their actual Resources references are compared.
            If they're both not null and equal, true is returned. Otherwise, their Resource paths
            are compared for equality
            </remarks>
        </member>
        <member name="M:Duality.ContentRef`1.op_Inequality(Duality.ContentRef{`0},Duality.ContentRef{`0})">
            <summary>
            Compares two ContentRefs for inequality.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="P:Duality.ContentRef`1.Res">
            <summary>
            [GET / SET] The actual <see cref="T:Duality.Resource"/>. If currently unavailable, it is loaded and then returned.
            Because of that, this Property is only null if the references Resource is missing, invalid, or
            this content reference has been explicitly set to null. Never returns disposed Resources.
            </summary>
        </member>
        <member name="P:Duality.ContentRef`1.ResWeak">
            <summary>
            [GET] Returns the current reference to the Resource that is stored locally. No attemp is made to load or reload
            the Resource if currently unavailable.
            </summary>
        </member>
        <member name="P:Duality.ContentRef`1.ResType">
            <summary>
            [GET] The <see cref="T:System.Type"/> of the referenced Resource. If currently unavailable, this is determined by
            the Resource file path.
            </summary>
        </member>
        <member name="P:Duality.ContentRef`1.Path">
            <summary>
            [GET / SET] The path where to look for the Resource, if it is currently unavailable.
            </summary>
        </member>
        <member name="P:Duality.ContentRef`1.IsExplicitNull">
            <summary>
            [GET] Returns whether this content reference has been explicitly set to null.
            </summary>
        </member>
        <member name="P:Duality.ContentRef`1.IsAvailable">
            <summary>
            [GET] Returns whether this content reference is available in general. This may trigger loading it, if currently unavailable.
            </summary>
        </member>
        <member name="P:Duality.ContentRef`1.IsLoaded">
            <summary>
            [GET] Returns whether the referenced Resource is currently loaded.
            </summary>
        </member>
        <member name="P:Duality.ContentRef`1.IsDefaultContent">
            <summary>
            [GET] Returns whether the referenced Resource is part of Duality's embedded default content.
            </summary>
        </member>
        <member name="P:Duality.ContentRef`1.IsRuntimeResource">
            <summary>
            [GET] Returns whether the Resource has been generated at runtime and cannot be retrieved via content path.
            </summary>
        </member>
        <member name="P:Duality.ContentRef`1.Name">
            <summary>
            [GET] The name of the referenced Resource.
            </summary>
        </member>
        <member name="P:Duality.ContentRef`1.FullName">
            <summary>
            [GET] The full name of the referenced Resource, including its path but not its file extension
            </summary>
        </member>
        <member name="T:Duality.ContentProvider">
            <summary>
            <para>
            The ContentProvider is Duality's main instance for content management. If you need any kind of <see cref="T:Duality.Resource"/>,
            simply request it from the ContentProvider. It keeps track of which Resources are loaded and valid and prevents
            Resources from being loaded more than once at a time, thus reducing loading times and redundancy.
            </para>
            <para>
            You can also manually <see cref="M:Duality.ContentProvider.RegisterContent(System.String,Duality.Resource)">register Resources</see> that have been created at runtime 
            using a string alias of your choice.
            </para>
            </summary>
            <seealso cref="T:Duality.Resource"/>
            <seealso cref="T:Duality.ContentRef`1"/>
            <seealso cref="T:Duality.IContentRef"/>
        </member>
        <member name="F:Duality.ContentProvider.VirtualContentPath">
            <summary>
            (Virtual) base path for Duality's embedded default content.
            </summary>
        </member>
        <member name="M:Duality.ContentProvider.InitDefaultContent">
            <summary>
            Initializes Dualitys embedded default content.
            </summary>
        </member>
        <member name="M:Duality.ContentProvider.GetAllDefaultContent">
            <summary>
            Returns a list of all available embedded default content.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duality.ContentProvider.GetAvailContent``1">
            <summary>
            Returns a list of all available content matching the specified Type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Duality.ContentProvider.GetAvailContent(System.Type)">
            <summary>
            Returns a list of all available content matching the specified Type
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.ContentProvider.ClearContent(System.Boolean)">
            <summary>
            Clears all non-default content.
            </summary>
            <param name="dispose">If true, unregistered content is also disposed.</param>
        </member>
        <member name="M:Duality.ContentProvider.RegisterContent(System.String,Duality.Resource)">
            <summary>
            Registers a <see cref="T:Duality.Resource"/> and maps it to the specified path key.
            </summary>
            <param name="path">The path key to map the Resource to</param>
            <param name="content">The Resource to register.</param>
        </member>
        <member name="M:Duality.ContentProvider.IsContentRegistered(System.String)">
            <summary>
            Returns whether or not there is any content currently registered under the specified path key.
            </summary>
            <param name="path">The path key to look for content</param>
            <returns>True, if there is content available for that path key, false if not.</returns>
        </member>
        <member name="M:Duality.ContentProvider.UnregisterContent(System.String,System.Boolean)">
            <summary>
            Unregisters content that has been registered using the specified path key.
            </summary>
            <param name="path">The path key to unregister.</param>
            <param name="dispose">If true, unregistered content is also disposed.</param>
            <returns>True, if the content has been found and successfully removed. False, if no</returns>
        </member>
        <member name="M:Duality.ContentProvider.UnregisterContentTree(System.String,System.Boolean)">
            <summary>
            Unregisters all content that has been registered using paths contained within
            the specified directory.
            </summary>
            <param name="dir">The directory to unregister</param>
            <param name="dispose">If true, unregistered content is also disposed.</param>
        </member>
        <member name="M:Duality.ContentProvider.UnregisterAllContent``1(System.Boolean)">
            <summary>
            Unregisters all content of the specified Type or subclassed Types.
            </summary>
            <typeparam name="T">The content Type to look for.</typeparam>
            <param name="dispose">If true, unregistered content is also disposed.</param>
        </member>
        <member name="M:Duality.ContentProvider.UnregisterAllContent(System.Type,System.Boolean)">
            <summary>
            Unregisters all content of the specified Type or subclassed Types.
            </summary>
            <param name="t">The content Type to look for.</param>
            <param name="dispose">If true, unregistered content is also disposed.</param>
        </member>
        <member name="M:Duality.ContentProvider.RenameContent(System.String,System.String)">
            <summary>
            Changes the path key under which a specific Resource can be found. If the target path is registered already, it will be replaced.
            If the source path isn't registered / is unknown, the operation will fail.
            </summary>
            <param name="path">The Resources current path key.</param>
            <param name="newPath">The Resources new path key.</param>
            <returns>True, if the renaming operation was successful. False, if not.</returns>
        </member>
        <member name="M:Duality.ContentProvider.RenameContentTree(System.String,System.String)">
            <summary>
            Changes the path key under which a set of Resource can be found, i.e.
            renames all path keys located inside the specified directory.
            </summary>
            <param name="dir">The Resources current directory</param>
            <param name="newDir">The Resources new directory</param>
        </member>
        <member name="M:Duality.ContentProvider.RequestContent``1(System.String)">
            <summary>
            Requests a <see cref="T:Duality.Resource"/>.
            </summary>
            <typeparam name="T">
            The requested Resource type. Does not affect actual data, only the kind of <see cref="T:Duality.ContentRef`1"/> that is obtained.
            </typeparam>
            <param name="path">
            The path key to identify the Resource. If there is no matching Resource available yet, the ContentProvider attemps
            to load a Resource from that path.
            </param>
            <returns>A <see cref="T:Duality.ContentRef`1"/> to the requested Resource.</returns>
        </member>
        <member name="M:Duality.ContentProvider.RequestContent(System.String)">
            <summary>
            Requests a <see cref="T:Duality.Resource"/>.
            </summary>
            <param name="path">
            The path key to identify the Resource. If there is no matching Resource available yet, the ContentProvider attemps
            to load a Resource from that path.
            </param>
            <returns>A <see cref="T:Duality.IContentRef"/> to the requested Resource.</returns>
        </member>
        <member name="T:Duality.ExtMethodsIEnumerable">
            <summary>
            Provides extension methods for enumerations.
            </summary>
        </member>
        <member name="M:Duality.ExtMethodsIEnumerable.Children(System.Collections.Generic.IEnumerable{Duality.GameObject})">
            <summary>
            Enumerates the <see cref="T:Duality.GameObject">GameObjects</see> children.
            </summary>
            <param name="objEnum"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.ExtMethodsIEnumerable.ChildrenDeep(System.Collections.Generic.IEnumerable{Duality.GameObject})">
            <summary>
            Enumerates the <see cref="T:Duality.GameObject">GameObjects</see> children, grandchildren, etc.
            </summary>
            <param name="objEnum"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.ExtMethodsIEnumerable.ByName(System.Collections.Generic.IEnumerable{Duality.GameObject},System.String)">
            <summary>
            Enumerates all <see cref="T:Duality.GameObject">GameObjects</see> that match the specified name.
            </summary>
            <param name="objEnum"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.ExtMethodsIEnumerable.FirstByName(System.Collections.Generic.IEnumerable{Duality.GameObject},System.String)">
            <summary>
            Returns the first <see cref="T:Duality.GameObject"/> that matches the specified name.
            </summary>
            <param name="objEnum"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.ExtMethodsIEnumerable.GetComponents``1(System.Collections.Generic.IEnumerable{Duality.GameObject},System.Boolean)">
            <summary>
            Enumerates all <see cref="T:Duality.GameObject">GameObjects</see> <see cref="T:Duality.Component">Components</see> of the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objEnum"></param>
            <param name="activeOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.ExtMethodsIEnumerable.GetComponentsInChildren``1(System.Collections.Generic.IEnumerable{Duality.GameObject},System.Boolean)">
            <summary>
            Enumerates all <see cref="T:Duality.GameObject">GameObjects</see> childrens <see cref="T:Duality.Component">Components</see> of the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objEnum"></param>
            <param name="activeOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.ExtMethodsIEnumerable.GetComponentsDeep``1(System.Collections.Generic.IEnumerable{Duality.GameObject},System.Boolean)">
            <summary>
            Enumerates all <see cref="T:Duality.GameObject">GameObjects</see> (and their childrens) <see cref="T:Duality.Component">Components</see> of the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objEnum"></param>
            <param name="activeOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.ExtMethodsIEnumerable.Transform(System.Collections.Generic.IEnumerable{Duality.GameObject},System.Boolean)">
            <summary>
            Enumerates all <see cref="T:Duality.GameObject">GameObjects</see> <see cref="T:Duality.Components.Transform"/> Components.
            </summary>
            <param name="objEnum"></param>
            <param name="activeOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.ExtMethodsIEnumerable.Camera(System.Collections.Generic.IEnumerable{Duality.GameObject},System.Boolean)">
            <summary>
            Enumerates all <see cref="T:Duality.GameObject">GameObjects</see> <see cref="T:Duality.Components.Camera"/> Components.
            </summary>
            <param name="objEnum"></param>
            <param name="activeOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.ExtMethodsIEnumerable.Renderer(System.Collections.Generic.IEnumerable{Duality.GameObject},System.Boolean)">
            <summary>
            Enumerates all <see cref="T:Duality.GameObject">GameObjects</see> <see cref="T:Duality.Components.Renderer"/> Components.
            </summary>
            <param name="objEnum"></param>
            <param name="activeOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.ExtMethodsIEnumerable.RigidBody(System.Collections.Generic.IEnumerable{Duality.GameObject},System.Boolean)">
            <summary>
            Enumerates all <see cref="T:Duality.GameObject">GameObjects</see> <see cref="T:Duality.Components.Physics.RigidBody"/> Components.
            </summary>
            <param name="objEnum"></param>
            <param name="activeOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.ExtMethodsIEnumerable.GameObject(System.Collections.Generic.IEnumerable{Duality.Component},System.Boolean)">
            <summary>
            Enumerates all <see cref="T:Duality.Component">Components</see> parent <see cref="T:Duality.GameObject">GameObjects</see>.
            </summary>
            <param name="compEnum"></param>
            <param name="activeOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.ExtMethodsIEnumerable.Ref``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts an enumeration of Resources to an enumeration of content references to it.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="res"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.ExtMethodsIEnumerable.Res``1(System.Collections.Generic.IEnumerable{Duality.ContentRef{``0}})">
            <summary>
            Converts an enumeration of content references to an enumeration of Resources.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="res"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.ExtMethodsIEnumerable.Res(System.Collections.Generic.IEnumerable{Duality.IContentRef})">
            <summary>
            Converts an enumeration of content references to an enumeration of Resources.
            </summary>
            <param name="res"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.ExtMethodsIEnumerable.ToString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Creates a separated list of the string versions of a set of objects.
            </summary>
            <typeparam name="T">The type of the incoming objects.</typeparam>
            <param name="collection">A set of objects.</param>
            <param name="separator">The string to use as separator between two string values.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.ExtMethodsIEnumerable.ToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)">
            <summary>
            Creates a separated list of the string versions of a set of objects.
            </summary>
            <typeparam name="T">The type of the incoming objects.</typeparam>
            <param name="collection">A set of objects.</param>
            <param name="toString">A function that transforms objects to strings.</param>
            <param name="separator">The string to use as separator between two string values.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.ExtMethodsIEnumerable.NotNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Enumerates objects that aren't null.
            </summary>
            <typeparam name="T">The type of the incoming objects.</typeparam>
            <param name="collection">A set of objects.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.ExtMethodsIEnumerable.Range``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Enumerates a all objects within a specific index range.
            </summary>
            <typeparam name="T">The type of the incoming objects.</typeparam>
            <param name="collection">A set of objects.</param>
            <param name="startIndex">Index of the first object to be enumerated.</param>
            <param name="length">Number of objects to be enumerated.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.ExtMethodsIEnumerable.Shuffle``1(System.Collections.Generic.IEnumerable{``0},System.Random)">
            <summary>
            Shuffles the specified eumerable.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="rnd">The random number generator to use. Defaults to <see cref="P:Duality.MathF.Rnd"/>, if null.</param>
            <returns></returns>
        </member>
        <member name="T:Duality.ScreenMode">
            <summary>
            Describes the way a Duality window is set up.
            </summary>
        </member>
        <member name="F:Duality.ScreenMode.Window">
            <summary>
            Duality runs in windowed mode. The window can be resized by the user.
            </summary>
        </member>
        <member name="F:Duality.ScreenMode.FixedWindow">
            <summary>
            Duality runs in windowed mode. The window has a fixed size.
            </summary>
        </member>
        <member name="F:Duality.ScreenMode.Native">
            <summary>
            Duality runs in fullscreen mode, using whatever screen resolution is currently active on the users desktop.
            </summary>
        </member>
        <member name="F:Duality.ScreenMode.Fullscreen">
            <summary>
            Duality runs in fullscreen mode and changes desktop resolution whenever necesary.
            </summary>
        </member>
        <member name="T:Duality.AAQuality">
            <summary>
            Specifies the quality level of the anti-aliasing used for rendering.
            </summary>
        </member>
        <member name="F:Duality.AAQuality.High">
            <summary>
            Highest possible quality. Sacrifices performance for smooth edges. Can be a problem on older machines.
            </summary>
        </member>
        <member name="F:Duality.AAQuality.Medium">
            <summary>
            Medium quality. A tradeoff between looks and performance.
            </summary>
        </member>
        <member name="F:Duality.AAQuality.Low">
            <summary>
            Low quality. Favors performance.
            </summary>
        </member>
        <member name="T:Duality.DualityUserData">
            <summary>
            Provides information about user settings for this Duality application / game.
            It is persistent beyond installing or deleting this Duality game.
            </summary>
        </member>
        <member name="P:Duality.DualityUserData.UserName">
            <summary>
            [GET / SET] The player's name. This may be his main character's name or simply remain unused.
            </summary>
        </member>
        <member name="P:Duality.DualityUserData.GfxWidth">
            <summary>
            [GET / SET] Width of the game's display area.
            </summary>
        </member>
        <member name="P:Duality.DualityUserData.GfxHeight">
            <summary>
            [GET / SET] Height of the game's display area.
            </summary>
        </member>
        <member name="P:Duality.DualityUserData.GfxMode">
            <summary>
            [GET / SET] Describes the way the game window is set up.
            </summary>
        </member>
        <member name="P:Duality.DualityUserData.AntialiasingQuality">
            <summary>
            [GET / SET] Specified the quality of anti-aliasing used in rendering.
            </summary>
        </member>
        <member name="P:Duality.DualityUserData.SfxEffectVol">
            <summary>
            [GET / SET] Volume factor of sound effects. This is applied automatically by the <see cref="T:Duality.SoundDevice"/> based on the <see cref="T:Duality.SoundType"/>.
            </summary>
        </member>
        <member name="P:Duality.DualityUserData.SfxSpeechVol">
            <summary>
            [GET / SET] Volume factor of speech / vocals. This is applied automatically by the <see cref="T:Duality.SoundDevice"/> based on the <see cref="T:Duality.SoundType"/>.
            </summary>
        </member>
        <member name="P:Duality.DualityUserData.SfxMusicVol">
            <summary>
            [GET / SET] Volume factor of music. This is applied automatically by the <see cref="T:Duality.SoundDevice"/> based on the <see cref="T:Duality.SoundType"/>.
            </summary>
        </member>
        <member name="P:Duality.DualityUserData.SfxMasterVol">
            <summary>
            [GET / SET] Volume master factor for sound in general. This is applied automatically by the <see cref="T:Duality.SoundDevice"/>.
            </summary>
        </member>
        <member name="P:Duality.DualityUserData.CustomData">
            <summary>
            [GET / SET] Use this property to store custom user data.
            </summary>
        </member>
        <member name="T:Duality.DualityMetaData">
            <summary>
            Provides custom information about the Duality environment in which this application / game runs.
            It is persistent beyond installing or deleting a specific Duality game and is shared among all Duality
            games. Developers can use the DualityMetaData API to share player-related game information, such as
            stats, player descisions, tasks, progress, etc.
            </summary>
        </member>
        <member name="F:Duality.DualityMetaData.Separator">
            <summary>
            An array of valid path separators for meta data.
            </summary>
        </member>
        <member name="M:Duality.DualityMetaData.ReadValue(System.String)">
            <summary>
            Reads the specified key's string value. Keys are organized hierarchially and behave
            like file paths. Use the normal path separator chars to address keys in keys.
            </summary>
            <param name="key">The key that defines where to look for the value.</param>
            <returns>The string value associated with the specified key.</returns>
            <example>
            The following code reads the value of <c>MainNode / SubNode / SomeKey</c>:
            <code>
            string value = DualityApp.MetaData.ReadValue("MainNode/SubNode/SomeKey");
            </code>
            </example>
            <seealso cref="M:Duality.DualityMetaData.ReadValueAs``1(System.String,``0@)"/>
        </member>
        <member name="M:Duality.DualityMetaData.ReadValueAs``1(System.String,``0@)">
            <summary>
            Reads the specified key's string value and tries to parse it.
            </summary>
            <typeparam name="T">The desired value type</typeparam>
            <param name="key">The key that defines where to look for the value.</param>
            <param name="value">The parsed value based on the string that is associated with the specified key.</param>
            <returns>True, if successful, false if not.</returns>
            <seealso cref="M:Duality.DualityMetaData.ReadValue(System.String)"/>
            <example>
            The following code writes and reads an int value:
            <code>
            DualityApp.MetaData.WriteValue("SomeKey", 42);
            int value =  DualityApp.MetaData.ReadValueAs{int}("SomeKey");
            </code>
            </example>
        </member>
        <member name="M:Duality.DualityMetaData.ReadSubValues(System.String)">
            <summary>
            Reads all the <see cref="T:System.Collections.Generic.KeyValuePair`2"/>s that are children of the specified key.
            </summary>
            <param name="key">The key of which to return child values.</param>
            <returns>An enumeration of <see cref="T:System.Collections.Generic.KeyValuePair`2"/>s.</returns>
            <example>
            The following code creates a small hierarchy and reads a part of it out again:
            <code>
            DualityApp.MetaData["MainNode/SubNode/SomeKey"] = "42";
            DualityApp.MetaData["MainNode/SubNode/SomeOtherKey"] = "43";
            DualityApp.MetaData["MainNode/SubNode/SomeOtherKey2"] = "44";
            DualityApp.MetaData["MainNode/SubNode2"] = "Something";
            
            var pairs = DualityApp.MetaData.ReadSubValues("MainNode/SubNode");
            foreach (var pair in pairs)
            {
                Log.Core.Write("{0}: {1}", pair.Key, pair.Value);
            }
            </code>
            The expected output is:
            <code>
            SomeKey: 42
            SomeOtherKey: 43
            SomeOtherKey2: 44
            </code>
            </example>
        </member>
        <member name="M:Duality.DualityMetaData.WriteValue(System.String,System.String)">
            <summary>
            Writes the specified string value to the specified key. Keys are organized hierarchially and behave
            like file paths. Use the normal path separator chars to address keys in keys.
            </summary>
            <param name="key">The key that defines to write the value to.</param>
            <param name="value">The value to write</param>
            <seealso cref="M:Duality.DualityMetaData.WriteValue``1(System.String,``0)"/>
        </member>
        <member name="M:Duality.DualityMetaData.WriteValue``1(System.String,``0)">
            <summary>
            Writes the specified value to the specified key. Keys are organized hierarchially and behave
            like file paths. Use the normal path separator chars to address keys in keys.
            </summary>
            <typeparam name="T">The value's Type.</typeparam>
            <param name="key">The key that defines to write the value to.</param>
            <param name="value">The value to write</param>
            <seealso cref="M:Duality.DualityMetaData.WriteValue(System.String,System.String)"/>
        </member>
        <member name="P:Duality.DualityMetaData.Item(System.String)">
            <summary>
            [GET / SET] The string value that is located at the specified key (path). Keys are organized hierarchially and behave
            like file paths. Use the normal path separator chars to address keys in keys.
            </summary>
            <param name="key">The key that defines where to look for the value.</param>
            <returns>The string value associated with the specified key.</returns>
            <example>
            The following code reads and writes the value of <c>MainNode / SubNode / SomeKey</c>:
            <code>
            string value = DualityApp.MetaData["MainNode/SubNode/SomeKey"];
            DualityApp.MetaData["MainNode/SubNode/SomeKey"] = "Some other value";
            </code>
            </example>
            <seealso cref="M:Duality.DualityMetaData.ReadValue(System.String)"/>
            <seealso cref="M:Duality.DualityMetaData.ReadValueAs``1(System.String,``0@)"/>
        </member>
        <member name="T:Duality.DualityAppData">
            <summary>
            Provides general information about this Duality application / game.
            </summary>
        </member>
        <member name="P:Duality.DualityAppData.AppName">
            <summary>
            [GET / SET] The name of your application / game. It will also be used as a window title by the launcher app.
            </summary>
        </member>
        <member name="P:Duality.DualityAppData.AuthorName">
            <summary>
            [GET / SET] The author name of your application. Might be your or your team's name or -nickname.
            </summary>
        </member>
        <member name="P:Duality.DualityAppData.WebsiteUrl">
            <summary>
            [GET / SET] The address of this game's official website or similar.
            </summary>
        </member>
        <member name="P:Duality.DualityAppData.Version">
            <summary>
            [GET / SET] The current application / game version.
            </summary>
        </member>
        <member name="P:Duality.DualityAppData.StartScene">
            <summary>
            [GET / SET] A reference to the start <see cref="T:Duality.Resources.Scene"/>. It is used by the launcher app to
            determine which Scene to load initially.
            </summary>
        </member>
        <member name="P:Duality.DualityAppData.SpeedOfSound">
            <summary>
            [GET / SET] The speed of sound. While this is technically a unitless value, you might assume something like "meters per second".
            It is used to calculate the doppler effect of <see cref="T:Duality.SoundInstance">SoundInstances</see> that are moving relative to the
            <see cref="T:Duality.Components.SoundListener"/>.
            </summary>
        </member>
        <member name="P:Duality.DualityAppData.SoundDopplerFactor">
            <summary>
            [GET / SET] A factor by which the strength of the doppler effect is multiplied.
            </summary>
        </member>
        <member name="P:Duality.DualityAppData.PhysicsVelocityThreshold">
            <summary>
            [GET / SET] Any velocity below this value will be resolved using inelastic equations i.e. won't lead to "bouncing".
            </summary>
        </member>
        <member name="P:Duality.DualityAppData.PhysicsFixedTime">
            <summary>
            [GET / SET] Does the physics simulation use fixed time steps? However, this setting may be overwritten dynamically due
            to frame timing restrictions. To check whether fixed-timestep physics is currently active, use <see cref="P:Duality.Resources.Scene.PhysicsFixedTime"/>
            </summary>
        </member>
        <member name="P:Duality.DualityAppData.CustomData">
            <summary>
            [GET / SET] Use this property to store custom application data.
            </summary>
        </member>
        <member name="T:Duality.Components.Transform">
            <summary>
            Represents a <see cref="T:Duality.GameObject">GameObjects</see> physical location in the world, relative to its <see cref="P:Duality.GameObject.Parent"/>.
            </summary>
        </member>
        <member name="M:Duality.Components.Transform.GetWorldPoint(OpenTK.Vector3)">
            <summary>
            Calculates a world coordinate from a Transform-local coordinate.
            </summary>
            <param name="local"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Components.Transform.GetWorldPoint(OpenTK.Vector2)">
            <summary>
            Calculates a world coordinate from a Transform-local coordinate.
            </summary>
            <param name="local"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Components.Transform.GetLocalPoint(OpenTK.Vector3)">
            <summary>
            Calculates a Transform-local coordinate from a world coordinate.
            </summary>
            <param name="world"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Components.Transform.GetLocalPoint(OpenTK.Vector2)">
            <summary>
            Calculates a Transform-local coordinate from a world coordinate.
            </summary>
            <param name="world"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Components.Transform.GetWorldVector(OpenTK.Vector3)">
            <summary>
            Calculates a world vector from a Transform-local vector.
            Does only take scale and rotation into account, but not position.
            </summary>
            <param name="local"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Components.Transform.GetWorldVector(OpenTK.Vector2)">
            <summary>
            Calculates a world vector from a Transform-local vector.
            Does only take scale and rotation into account, but not position.
            </summary>
            <param name="local"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Components.Transform.GetLocalVector(OpenTK.Vector3)">
            <summary>
            Calculates a Transform-local vector from a world vector.
            Does only take scale and rotation into account, but not position.
            </summary>
            <param name="world"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Components.Transform.GetLocalVector(OpenTK.Vector2)">
            <summary>
            Calculates a Transform-local vector from a world vector.
            Does only take scale and rotation into account, but not position.
            </summary>
            <param name="world"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Components.Transform.GetWorldVelocityAt(OpenTK.Vector3)">
            <summary>
            Calculates the Transforms world velocity at a given world coordinate;
            </summary>
            <param name="world"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Components.Transform.GetWorldVelocityAt(OpenTK.Vector2)">
            <summary>
            Calculates the Transforms world velocity at a given world coordinate;
            </summary>
            <param name="world"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Components.Transform.GetLocalVelocityAt(OpenTK.Vector3)">
            <summary>
            Calculates the Transforms local velocity at a given local coordinate;
            </summary>
            <param name="local"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Components.Transform.GetLocalVelocityAt(OpenTK.Vector2)">
            <summary>
            Calculates the Transforms local velocity at a given local coordinate;
            </summary>
            <param name="local"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Components.Transform.MoveBy(OpenTK.Vector3)">
            <summary>
            Moves the object by the given vector. This will affect the Transforms <see cref="P:Duality.Components.Transform.Vel">velocity</see> value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Duality.Components.Transform.MoveBy(OpenTK.Vector2)">
            <summary>
            Moves the object by the given vector. This will affect the Transforms <see cref="P:Duality.Components.Transform.Vel">velocity</see> value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Duality.Components.Transform.MoveByAbs(OpenTK.Vector3)">
            <summary>
            Moves the object by given absolute vector. This will affect the Transforms <see cref="P:Duality.Components.Transform.Vel">velocity</see> value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Duality.Components.Transform.MoveByAbs(OpenTK.Vector2)">
            <summary>
            Moves the object by given absolute vector. This will affect the Transforms <see cref="P:Duality.Components.Transform.Vel">velocity</see> value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Duality.Components.Transform.MoveTo(OpenTK.Vector3)">
            <summary>
            Moves the object to the given relative position. This will affect the Transforms <see cref="P:Duality.Components.Transform.Vel">velocity</see> value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Duality.Components.Transform.MoveTo(OpenTK.Vector2)">
            <summary>
            Moves the object to the given relative position. This will affect the Transforms <see cref="P:Duality.Components.Transform.Vel">velocity</see> value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Duality.Components.Transform.MoveToAbs(OpenTK.Vector3)">
            <summary>
            Moves the object to the given absolute position. This will affect the Transforms <see cref="P:Duality.Components.Transform.Vel">velocity</see> value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Duality.Components.Transform.MoveToAbs(OpenTK.Vector2)">
            <summary>
            Moves the object to the given absolute position. This will affect the Transforms <see cref="P:Duality.Components.Transform.Vel">velocity</see> value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Duality.Components.Transform.TurnBy(System.Single)">
            <summary>
            Turns the object by the given radian angle. This will affect the Transforms <see cref="P:Duality.Components.Transform.AngleVel">angular velocity</see> value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Duality.Components.Transform.TurnByAbs(System.Single)">
            <summary>
            Turns the object by the given absolute radian angle. This will affect the Transforms <see cref="P:Duality.Components.Transform.AngleVel">angular velocity</see> value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Duality.Components.Transform.TurnTo(System.Single)">
            <summary>
            Turns the object to the given relative radian angle. This will affect the Transforms <see cref="P:Duality.Components.Transform.AngleVel">angular velocity</see> value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Duality.Components.Transform.TurnToAbs(System.Single)">
            <summary>
            Turns the object to the given absolute radian angle. This will affect the Transforms <see cref="P:Duality.Components.Transform.AngleVel">angular velocity</see> value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Duality.Components.Transform.SetTransform(OpenTK.Vector3,OpenTK.Vector3,System.Single)">
            <summary>
            Updates the Transforms data all at once.
            </summary>
            <param name="pos"></param>
            <param name="vel"></param>
            <param name="scale"></param>
            <param name="angle"></param>
            <param name="angleVel"></param>
        </member>
        <member name="M:Duality.Components.Transform.SetRelativeTransform(OpenTK.Vector3,OpenTK.Vector3,System.Single)">
            <summary>
            Updates the Transforms data all at once.
            </summary>
            <param name="pos"></param>
            <param name="vel"></param>
            <param name="scale"></param>
            <param name="angle"></param>
            <param name="angleVel"></param>
        </member>
        <member name="M:Duality.Components.Transform.CommitChanges(Duality.Component)">
            <summary>
            Checks whether transform values have been changed, clears the changelist and fires the appropriate events
            </summary>
            <param name="sender"></param>
        </member>
        <member name="P:Duality.Components.Transform.RelativePos">
            <summary>
            [GET / SET] The objects position relative to its parent object.
            </summary>
        </member>
        <member name="P:Duality.Components.Transform.RelativeVel">
            <summary>
            [GET / SET] The objects velocity relative to its parent object.
            </summary>
        </member>
        <member name="P:Duality.Components.Transform.RelativeAngle">
            <summary>
            [GET / SET] The objects angle / rotation relative to its parent object, in radians.
            </summary>
        </member>
        <member name="P:Duality.Components.Transform.RelativeAngleVel">
            <summary>
            [GET / SET] The objects angle / rotation velocity relative to its parent object, in radians.
            </summary>
        </member>
        <member name="P:Duality.Components.Transform.RelativeScale">
            <summary>
            [GET / SET] The objects scale relative to its parent object.
            </summary>
        </member>
        <member name="P:Duality.Components.Transform.IgnoreParent">
            <summary>
            [GET / SET] Specifies whether the Transform component should ignore its parent transform.
            </summary>
        </member>
        <member name="P:Duality.Components.Transform.DeriveAngle">
            <summary>
            [GET / SET] If false, this objects rotation values aren't relative to its parent.
            However, its position, velocity, etc. still depend on parent rotation.
            </summary>
        </member>
        <member name="P:Duality.Components.Transform.RelativeForward">
            <summary>
            [GET] The objects forward vector, relative to its parent object.
            </summary>
        </member>
        <member name="P:Duality.Components.Transform.RelativeRight">
            <summary>
            [GET] The objects right (directional) vector, relative to its parent object.
            </summary>
        </member>
        <member name="P:Duality.Components.Transform.Pos">
            <summary>
            [GET / SET] The objects position.
            </summary>
        </member>
        <member name="P:Duality.Components.Transform.Vel">
            <summary>
            [GET] The objects velocity.
            </summary>
        </member>
        <member name="P:Duality.Components.Transform.Angle">
            <summary>
            [GET / SET] The objects angle / rotation, in radians.
            </summary>
        </member>
        <member name="P:Duality.Components.Transform.AngleVel">
            <summary>
            [GET] The objects angle / rotation velocity, in radians.
            </summary>
        </member>
        <member name="P:Duality.Components.Transform.Scale">
            <summary>
            [GET / SET] The objects scale.
            </summary>
        </member>
        <member name="P:Duality.Components.Transform.Forward">
            <summary>
            [GET] The objects forward vector.
            </summary>
        </member>
        <member name="P:Duality.Components.Transform.Right">
            <summary>
            [GET] The objects right (directional) vector.
            </summary>
        </member>
        <member name="T:Duality.Components.Transform.DirtyFlags">
            <summary>
            Flags that are used to specify, whether certain Properties have been changed.
            </summary>
        </member>
        <member name="T:Duality.Components.Physics.FrictionJointInfo">
            <summary>
            Applies relative friction to RigidBodies.
            </summary>
        </member>
        <member name="T:Duality.Components.Physics.JointInfo">
            <summary>
            Describes a <see cref="T:Duality.Components.Physics.RigidBody"/> joint. Joints limit a Colliders degree of freedom 
            by connecting it to fixed world coordinates or other Colliders.
            </summary>
        </member>
        <member name="M:Duality.Components.Physics.JointInfo.CopyTo(Duality.Components.Physics.JointInfo)">
            <summary>
            Copies this JointInfos data to another one. It is assumed that both are of the same type.
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Duality.Components.Physics.JointInfo.Clone">
            <summary>
            Clones the JointInfo.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Duality.Components.Physics.JointInfo.DualJoint">
            <summary>
            [GET] Returns whether the joint is connecting two Colliders (instead of connecting one to the world)
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.JointInfo.CollideConnected">
            <summary>
            [GET / SET] Specifies whether the connected Colliders will collide with each other.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.JointInfo.Enabled">
            <summary>
            [GET / SET] Whether or not the joint is active.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.JointInfo.BreakPoint">
            <summary>
            [GET / SET] Maximum joint error value before the joint break. Breaking does not remove the joint, but disable it.
            A value of zero or lower is interpreted as unbreakable. Note that some joints might not have breaking point support 
            and will ignore this value.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.FrictionJointInfo.LocalAnchorA">
            <summary>
            [GET / SET] The first RigidBodys local anchor point.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.FrictionJointInfo.LocalAnchorB">
            <summary>
            [GET / SET] The second RigidBodys local anchor point.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.FrictionJointInfo.MaxForce">
            <summary>
            [GET / SET] The maximum friction force in the local anchor point.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.FrictionJointInfo.MaxTorque">
            <summary>
            [GET / SET] The maximum friction torque in the local anchor point.
            </summary>
        </member>
        <member name="T:Duality.Components.Physics.GearJointInfo">
            <summary>
            Connects two bodies using a gear. The gear type is determined by the joints that are attached to
            each body. Supported joint types are (Fixed)Prismatic- and (Fixed)Revolutejoints. Those joints
            are required to be either fixed or attached to a static body.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.GearJointInfo.Ratio">
            <summary>
            [GET / SET] The gear ratio by which body movement is connected.
            </summary>
        </member>
        <member name="T:Duality.Components.Physics.RevoluteJointInfo">
            <summary>
            Pins two locally anchored RigidBodies together without constraining rotation.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.RevoluteJointInfo.LocalAnchorA">
            <summary>
            [GET / SET] The first RigidBodies local anchor point.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.RevoluteJointInfo.LocalAnchorB">
            <summary>
            [GET / SET] The second RigidBodies local anchor point.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.RevoluteJointInfo.LimitEnabled">
            <summary>
            [GET / SET] Is the joint limited in its angle?
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.RevoluteJointInfo.LowerLimit">
            <summary>
            [GET / SET] The lower joint limit in radians.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.RevoluteJointInfo.UpperLimit">
            <summary>
            [GET / SET] The upper joint limit in radians.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.RevoluteJointInfo.ReferenceAngle">
            <summary>
            [GET / SET] The joint's reference angle.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.RevoluteJointInfo.MotorEnabled">
            <summary>
            [GET / SET] Is the joint motor enabled?
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.RevoluteJointInfo.MaxMotorTorque">
            <summary>
            [GET / SET] The maximum motor torque.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.RevoluteJointInfo.MotorSpeed">
            <summary>
            [GET / SET] The desired motor speed in radians per frame.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.RevoluteJointInfo.JointSpeed">
            <summary>
            [GET] The current joint angle speed in radians per frame.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.RevoluteJointInfo.JointAngle">
            <summary>
            [GET] The current joint angle in radians.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.RevoluteJointInfo.MotorTorque">
            <summary>
            [GET] The current joint motor torque.
            </summary>
        </member>
        <member name="T:Duality.Components.Physics.ShapeInfo">
            <summary>
            Describes a <see cref="T:Duality.Components.Physics.RigidBody">Colliders</see> primitive shape. A Colliders overall shape may be combined of any number of primitive shapes.
            </summary>
        </member>
        <member name="M:Duality.Components.Physics.ShapeInfo.CopyTo(Duality.Components.Physics.ShapeInfo)">
            <summary>
            Copies this ShapeInfos data to another one. It is assumed that both are of the same type.
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Duality.Components.Physics.ShapeInfo.Clone">
            <summary>
            Clones the ShapeInfo.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Duality.Components.Physics.ShapeInfo.Parent">
            <summary>
            [GET] The shape's parent <see cref="T:Duality.Components.Physics.RigidBody"/>.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.ShapeInfo.Density">
            <summary>
            [GET / SET] The shapes density.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.ShapeInfo.IsSensor">
            <summary>
            [GET / SET] Whether or not the shape acts as sensor i.e. is not part of a rigid body.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.ShapeInfo.Friction">
            <summary>
            [GET / SET] The shapes friction value.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.ShapeInfo.Restitution">
            <summary>
            [GET / SET] The shapes restitution value.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.ShapeInfo.IsValid">
            <summary>
            [GET] Whether or not the shape is a valid part of the physical simulation
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.ShapeInfo.AABB">
            <summary>
            [GET] Returns the Shapes axis-aligned bounding box
            </summary>
        </member>
        <member name="T:Duality.Components.Physics.PulleyJointInfo">
            <summary>
            Constrains two RigidBodies as though connected using a rope that is fixed at
            two world anchor points.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.PulleyJointInfo.LocalAnchorA">
            <summary>
            [GET / SET] The first bodies local anchor point.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.PulleyJointInfo.LocalAnchorB">
            <summary>
            [GET / SET] The second bodies local anchor point.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.PulleyJointInfo.WorldAnchorA">
            <summary>
            [GET / SET] The first bodies world anchor point.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.PulleyJointInfo.WorldAnchorB">
            <summary>
            [GET / SET] The second bodies world anchor point.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.PulleyJointInfo.MaxLengthA">
            <summary>
            [GET / SET] The maximum "rope length" on the first bodies side of the pulley.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.PulleyJointInfo.MaxLengthB">
            <summary>
            [GET / SET] The maximum "rope length" on the second bodies side of the pulley.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.PulleyJointInfo.LengthA">
            <summary>
            [GET] The current "rope length" on the first bodies side of the pulley.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.PulleyJointInfo.LengthB">
            <summary>
            [GET] The current "rope length" on the second bodies side of the pulley.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.PulleyJointInfo.Ratio">
            <summary>
            [GET / SET] The ratio by which the second rope end is enlarged or shrinked on size changes of the first rope end.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.PulleyJointInfo.TotalLength">
            <summary>
            [GET / SET] The total length of the rope.
            </summary>
        </member>
        <member name="T:Duality.Components.Renderers.TextRenderer">
            <summary>
            Renders a text to represent the <see cref="T:Duality.GameObject"/>.
            </summary>
        </member>
        <member name="T:Duality.Components.Renderer">
            <summary>
            A Renderer usually gives its <see cref="T:Duality.GameObject"/> a visual appearance in space.
            However, in general it may render anything and isn't bound by any conceptual restrictions.
            </summary>
        </member>
        <member name="M:Duality.Components.Renderer.Draw(Duality.IDrawDevice)">
            <summary>
            Performs the Renderers drawing operation.
            </summary>
            <param name="device"></param>
        </member>
        <member name="M:Duality.Components.Renderer.IsVisible(Duality.IDrawDevice)">
            <summary>
            Determines if the Renderer is visible to the specified <see cref="T:Duality.IDrawDevice"/>.
            This is usually the case if they share at least one mutual <see cref="P:Duality.Components.Renderer.VisibilityGroup">visibility group</see>.
            </summary>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="P:Duality.Components.Renderer.VisibilityGroup">
            <summary>
            [GET / SET] A bitmask that informs about the set of visibility groups to which this Renderer
            belongs. Usually, a Renderer is considered visible to a <see cref="T:Duality.Components.Camera"/> if they
            share at least one mutual visibility group.
            </summary>
        </member>
        <member name="P:Duality.Components.Renderer.BoundRadius">
            <summary>
            [GET] The Renderers bounding radius, originating from the <see cref="T:Duality.GameObject">GameObjects</see> position.
            </summary>
        </member>
        <member name="M:Duality.Components.Renderers.TextRenderer.UpdateText">
            <summary>
            Updates the texts <see cref="P:Duality.Components.Renderers.TextRenderer.Metrics"/> and other internal data. Should be called everytime the text changes.
            </summary>
        </member>
        <member name="P:Duality.Components.Renderers.TextRenderer.Align">
            <summary>
            [GET / SET] The text blocks alignment relative to the <see cref="T:Duality.GameObject"/>.
            </summary>
        </member>
        <member name="P:Duality.Components.Renderers.TextRenderer.Text">
            <summary>
            [GET / SET] The text to display. If you change this without re-assigning it, be sure to call <see cref="M:Duality.Components.Renderers.TextRenderer.UpdateText"/>.
            </summary>
        </member>
        <member name="P:Duality.Components.Renderers.TextRenderer.ColorTint">
            <summary>
            [GET / SET] A color by which the displayed text is tinted.
            </summary>
        </member>
        <member name="P:Duality.Components.Renderers.TextRenderer.IconMat">
            <summary>
            [GET / SET] The <see cref="T:Duality.Resources.Material"/> to use for displaying icons ithin the text.
            </summary>
        </member>
        <member name="P:Duality.Components.Renderers.TextRenderer.Metrics">
            <summary>
            [GET] The current texts metrics.
            </summary>
        </member>
        <member name="P:Duality.Components.Renderers.TextRenderer.CustomMaterial">
            <summary>
            [GET / SET] A custom, local <see cref="T:Duality.Resources.BatchInfo"/> overriding the texts own <see cref="P:Duality.Resources.Font.Material">
            Materials</see>. Note that it does not override each <see cref="T:Duality.Resources.Font">Fonts</see> Texture, but their DrawTechniques and
            main colors.
            </summary>
        </member>
        <member name="T:Duality.Components.Physics.FixedDistanceJointInfo">
            <summary>
            Constrains the Collider to obtain a fixed distance to a world coordinate
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.FixedDistanceJointInfo.LocalAnchor">
            <summary>
            [GET / SET] The Colliders local anchor point.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.FixedDistanceJointInfo.WorldAnchor">
            <summary>
            [GET / SET] The world anchor point to which the Collider will be attached.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.FixedDistanceJointInfo.DampingRatio">
            <summary>
            [GET / SET] The damping ratio. Zero means "no damping", one means "critical damping".
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.FixedDistanceJointInfo.Frequency">
            <summary>
            [GET / SET] The mass spring damper frequency in hertz.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.FixedDistanceJointInfo.TargetDistance">
            <summary>
            [GET / SET] The target distance between local and world anchor
            </summary>
        </member>
        <member name="T:Duality.VertexMode">
            <summary>
            Specifies the way in which incoming vertex data is interpreted in order to generate geometry.
            We're not using OpenTK.Graphics.OpenGL.BeginMode in order to keep the abstraction layer that
            is introduced by <see cref="T:Duality.IDrawDevice"/> consistent. Also, we're able to limit the supported
            vertex modes and remove obsolete or inefficient ones.
            </summary>
        </member>
        <member name="T:Duality.PerspectiveMode">
            <summary>
            Specifies the perspective effect that is applied when rendering the world.
            </summary>
        </member>
        <member name="F:Duality.PerspectiveMode.Flat">
            <summary>
            No perspective effect is applied. Z points into the screen and is only used for object sorting.
            </summary>
        </member>
        <member name="F:Duality.PerspectiveMode.Parallax">
            <summary>
            Objects that are far away appear smaller. Z points into the screen and is used for scaling and sorting.
            </summary>
        </member>
        <member name="T:Duality.RenderMatrix">
            <summary>
            Specifies a matrix setup used in a <see cref="T:Duality.Components.Camera.Pass"/>.
            </summary>
        </member>
        <member name="F:Duality.VisibilityFlag.ScreenOverlay">
            <summary>
            Special flag. This flag is set when rendering screen overlays.
            </summary>
        </member>
        <member name="T:Duality.BlendMode">
            <summary>
            Enumerates different behviours on how to blend color data onto existing background color.
            </summary>
            <seealso cref="T:Duality.Resources.DrawTechnique"/>
        </member>
        <member name="F:Duality.BlendMode.Reset">
            <summary>
            When passing this to a method, this value can be used to indicate "Restore to default settings".
            </summary>
        </member>
        <member name="F:Duality.BlendMode.Solid">
            <summary>
            Incoming color overwrites background color completely. Doesn't need Z-Sorting.
            </summary>
        </member>
        <member name="F:Duality.BlendMode.Mask">
            <summary>
            Incoming color overwrites background color but leaves out areas with low alpha. Doesn't need Z-Sorting.
            </summary>
        </member>
        <member name="F:Duality.BlendMode.Add">
            <summary>
            Incoming color is multiplied by its alpha value and then added to background color. Needs Z-Sorting.
            </summary>
        </member>
        <member name="F:Duality.BlendMode.Alpha">
            <summary>
            Incoming color overwrites background color weighted by its alpha value. Needs Z-Sorting.
            </summary>
        </member>
        <member name="F:Duality.BlendMode.Multiply">
            <summary>
            Incoming color scales background color. Needs Z-Sorting.
            </summary>
        </member>
        <member name="F:Duality.BlendMode.Light">
            <summary>
            Incoming color is multiplied and then added to background color. Needs Z-Sorting.
            </summary>
        </member>
        <member name="F:Duality.BlendMode.Invert">
            <summary>
            Incoming color inverts background color. Needs Z-Sorting.
            </summary>
        </member>
        <member name="F:Duality.BlendMode.Count">
            <summary>
            The total number of available BlendModes.
            </summary>
        </member>
        <member name="T:Duality.IDrawDevice">
            <summary>
            Defines a general interface for drawing devices. Its main duty is to accept and collect parameterized vertex data.
            </summary>
        </member>
        <member name="M:Duality.IDrawDevice.PreprocessCoords(OpenTK.Vector3@,System.Single@)">
            <summary>
            Processes the specified world space position and scale values and transforms them to the IDrawDevices view space.
            This usually also applies a perspective effect, if applicable.
            </summary>
            <param name="pos">The position to process.</param>
            <param name="scale">The scale factor to process.</param>
        </member>
        <member name="M:Duality.IDrawDevice.IsCoordInView(OpenTK.Vector3,System.Single)">
            <summary>
            Returns whether the specified world-space position is visible in the drawing devices view space.
            </summary>
            <param name="c">The position to test.</param>
            <param name="boundRad">The visual bounding radius to assume for the specified position.</param>
            <returns>True, if the position or a portion of its bounding circle is visible, false if not.</returns>
        </member>
        <member name="M:Duality.IDrawDevice.AddVertices``1(Duality.ContentRef{Duality.Resources.Material},Duality.VertexMode,``0[])">
            <summary>
            Adds a parameterized set of vertices to the drawing devices rendering schedule.
            </summary>
            <typeparam name="T">The type of vertex data to add.</typeparam>
            <param name="material">The <see cref="T:Duality.Resources.Material"/> to use for rendering the vertices.</param>
            <param name="vertexMode">The vertices drawing mode.</param>
            <param name="vertices">The vertex data to add.</param>
        </member>
        <member name="M:Duality.IDrawDevice.AddVertices``1(Duality.Resources.BatchInfo,Duality.VertexMode,``0[])">
            <summary>
            Adds a parameterized set of vertices to the drawing devices rendering schedule.
            </summary>
            <typeparam name="T">The type of vertex data to add.</typeparam>
            <param name="material">The <see cref="T:Duality.Resources.BatchInfo"/> to use for rendering the vertices.</param>
            <param name="vertexMode">The vertices drawing mode.</param>
            <param name="vertices">The vertex data to add.</param>
        </member>
        <member name="P:Duality.IDrawDevice.RefCoord">
            <summary>
            [GET] Reference coordinate for rendering i.e. the position of the drawing device's Camera.
            </summary>
        </member>
        <member name="P:Duality.IDrawDevice.RefAngle">
            <summary>
            [GET] Reference angle for rendering i.e. the angle of the drawing device's Camera.
            </summary>
        </member>
        <member name="P:Duality.IDrawDevice.FocusDist">
            <summary>
            [GET] Reference distance for calculating the perspective effect. An object this far away from
            the Camera will appear in its original size.
            </summary>
        </member>
        <member name="P:Duality.IDrawDevice.VisibilityMask">
            <summary>
            [GET] A bitmask flagging all visibility groups that are considered visible to this drawing device.
            </summary>
        </member>
        <member name="P:Duality.IDrawDevice.NearZ">
            <summary>
            [GET] The lowest Z value that can be displayed by the device.
            </summary>
        </member>
        <member name="P:Duality.IDrawDevice.FarZ">
            <summary>
            [GET] The highest Z value that can be displayed by the device.
            </summary>
        </member>
        <member name="P:Duality.IDrawDevice.ViewBoundingRadius">
            <summary>
            [GET] The devices view space bounding circle radius.
            </summary>
        </member>
        <member name="P:Duality.IDrawDevice.IsScreenOverlay">
            <summary>
            [GET] Returns whether the drawing device is currently rendering in screen overlay mode
            </summary>
        </member>
        <member name="P:Duality.IDrawDevice.TargetSize">
            <summary>
            [GET] The size of the surface this drawing device operates on.
            </summary>
        </member>
        <member name="T:Duality.Components.Camera">
            <summary>
            A Camera is responsible for rendering the current <see cref="T:Duality.Resources.Scene"/>.
            </summary>
        </member>
        <member name="F:Duality.Components.Camera.DefaultFocusDist">
            <summary>
            The default reference distance for perspective rendering.
            </summary>
        </member>
        <member name="M:Duality.Components.Camera.Render">
            <summary>
            Renders the current <see cref="T:Duality.Resources.Scene"/>.
            </summary>
        </member>
        <member name="M:Duality.Components.Camera.RenderPickingMap">
            <summary>
            Renders a picking map of the current <see cref="T:Duality.Resources.Scene"/>.
            If picking is required, this will be (automatically) done each frame a picking operation needs to
            be performed. 
            </summary>
            <returns>True, if the picking map has been rendered. False, if this frames cached version is used.</returns>
        </member>
        <member name="M:Duality.Components.Camera.PickRendererAt(System.Int32,System.Int32)">
            <summary>
            Picks the <see cref="T:Duality.ICmpRenderer"/> that owns the pixel at the specified position.
            </summary>
            <param name="x">x-Coordinate of the pixel to check.</param>
            <param name="y">y-Coordinate of the pixel to check.</param>
            <returns>The <see cref="T:Duality.ICmpRenderer"/> that owns the pixel.</returns>
        </member>
        <member name="M:Duality.Components.Camera.PickRenderersIn(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Picks all <see cref="T:Duality.ICmpRenderer">ICmpRenderers</see> contained within the specified
            rectangular area.
            </summary>
            <param name="x">x-Coordinate of the Rect.</param>
            <param name="y">y-Coordinate of the Rect.</param>
            <param name="w">Width of the Rect.</param>
            <param name="h">Height of the Rect.</param>
            <returns>A set of all <see cref="T:Duality.ICmpRenderer">ICmpRenderers</see> that have been picked.</returns>
        </member>
        <member name="M:Duality.Components.Camera.GetScaleAtZ(System.Single)">
            <summary>
            Returns the scale factor of objects that are located at the specified (world space) z-Coordinate.
            </summary>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Components.Camera.GetSpaceCoord(OpenTK.Vector3)">
            <summary>
            Transforms screen space coordinates to world space coordinates. The screen positions Z coordinate is
            interpreted as the target world Z coordinate.
            </summary>
            <param name="screenPos"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Components.Camera.GetSpaceCoord(OpenTK.Vector2)">
            <summary>
            Transforms screen space coordinates to world space coordinates.
            </summary>
            <param name="screenPos"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Components.Camera.GetScreenCoord(OpenTK.Vector3)">
            <summary>
            Transforms world space coordinates to screen space coordinates.
            </summary>
            <param name="spacePos"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Components.Camera.GetScreenCoord(OpenTK.Vector2)">
            <summary>
            Transforms world space coordinates to screen space coordinates.
            </summary>
            <param name="spacePos"></param>
            <returns></returns>
        </member>
        <member name="P:Duality.Components.Camera.NearZ">
            <summary>
            [GET / SET] The lowest Z value that can be displayed by the device.
            </summary>
        </member>
        <member name="P:Duality.Components.Camera.FarZ">
            <summary>
            [GET / SET] The highest Z value that can be displayed by the device.
            </summary>
        </member>
        <member name="P:Duality.Components.Camera.FocusDist">
            <summary>
            [GET / SET] Reference distance for calculating the view projection. When using <see cref="F:Duality.PerspectiveMode.Parallax"/>, 
            an object this far away from the Camera will always appear in its original size and without offset.
            </summary>
        </member>
        <member name="P:Duality.Components.Camera.Perspective">
            <summary>
            [GET / SET] Specified the perspective effect that is applied when rendering the world.
            </summary>
        </member>
        <member name="P:Duality.Components.Camera.VisibilityMask">
            <summary>
            [GET / SET] A bitmask flagging all visibility groups that are considered visible to this drawing device.
            </summary>
        </member>
        <member name="P:Duality.Components.Camera.ClearColor">
            <summary>
            [GET / SET] The background color of the rendered image.
            </summary>
        </member>
        <member name="P:Duality.Components.Camera.Passes">
            <summary>
            [GET / SET] A set of passes that describes the Cameras rendering process. Is never null nor empty.
            </summary>
        </member>
        <member name="P:Duality.Components.Camera.DrawDevice">
            <summary>
            [GET] The drawing device which this Camera uses for rendering.
            </summary>
        </member>
        <member name="P:Duality.Components.Camera.SceneTargetSize">
            <summary>
            [GET] The drawing devices target size for rendering the Scene.
            </summary>
        </member>
        <member name="P:Duality.Components.Camera.SceneOrthoAbs">
            <summary>
            [GET] A Rect describing the Cameras absolute ortho value.
            </summary>
        </member>
        <member name="P:Duality.Components.Camera.SceneViewportAbs">
            <summary>
            [GET] A Rect describing the Cameras absolute viewport.
            </summary>
        </member>
        <member name="P:Duality.Components.Camera.ViewBoundingRadius">
            <summary>
            [GET] The Cameras view space bounding circle radius.
            </summary>
        </member>
        <member name="T:Duality.Components.Camera.ClearFlags">
            <summary>
            A Bitmask describing which components of the current (or back-)buffer to clear before rendering.
            </summary>
        </member>
        <member name="F:Duality.Components.Camera.ClearFlags.None">
            <summary>
            Nothing.
            </summary>
        </member>
        <member name="F:Duality.Components.Camera.ClearFlags.Color">
            <summary>
            The buffers color components.
            </summary>
        </member>
        <member name="F:Duality.Components.Camera.ClearFlags.Depth">
            <summary>
            The buffers depth component.
            </summary>
        </member>
        <member name="F:Duality.Components.Camera.ClearFlags.Default">
            <summary>
            The default set of flags.
            </summary>
        </member>
        <member name="F:Duality.Components.Camera.ClearFlags.All">
            <summary>
            All flags set.
            </summary>
        </member>
        <member name="T:Duality.Components.Camera.Pass">
            <summary>
            Describes a single pass in the overall rendering process.
            </summary>
        </member>
        <member name="E:Duality.Components.Camera.Pass.CollectDrawcalls">
            <summary>
            Fired when collecting drawcalls for this pass. Note that not all passes do collect drawcalls (see <see cref="P:Duality.Components.Camera.Pass.Input"/>)
            </summary>
        </member>
        <member name="P:Duality.Components.Camera.Pass.Input">
            <summary>
            The input to use for rendering. This can for example be a <see cref="T:Duality.Resources.Texture"/> that
            has been rendered to before and is now bound to perform a postprocessing step. If this is null, the current
            <see cref="T:Duality.Resources.Scene"/> is used as input - which is usually the case in the first rendering pass.
            </summary>
        </member>
        <member name="P:Duality.Components.Camera.Pass.Output">
            <summary>
            The output to render to in this pass. If this is null, the screen is used as rendering target.
            </summary>
        </member>
        <member name="P:Duality.Components.Camera.Pass.FitOutput">
            <summary>
            Specifies whether this passes output shall be scaled in order to fit the specified outputs dimensions.
            </summary>
        </member>
        <member name="P:Duality.Components.Camera.Pass.ClearColor">
            <summary>
            [GET / SET] The clear color to apply when clearing the color buffer
            </summary>
        </member>
        <member name="P:Duality.Components.Camera.Pass.ClearDepth">
            <summary>
            [GET / SET] The clear depth to apply when clearing the depth buffer
            </summary>
        </member>
        <member name="P:Duality.Components.Camera.Pass.ClearFlags">
            <summary>
            [GET / SET] Specifies which buffers to clean before rendering this pass
            </summary>
        </member>
        <member name="P:Duality.Components.Camera.Pass.MatrixMode">
            <summary>
            [GET / SET] How to set up the coordinate space before rendering
            </summary>
        </member>
        <member name="P:Duality.Components.Camera.Pass.VisibilityMask">
            <summary>
            [GET / SET] A Pass-local bitmask flagging all visibility groups that are considered visible to this drawing device.
            </summary>
        </member>
        <member name="T:Duality.Components.Physics.RigidBody">
            <summary>
            Represents a body instance for physical simulation, collision detection and response.
            </summary>
        </member>
        <member name="M:Duality.Components.Physics.RigidBody.AddShape(Duality.Components.Physics.ShapeInfo)">
            <summary>
            Adds a new shape to the Collider
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Duality.Components.Physics.RigidBody.RemoveShape(Duality.Components.Physics.ShapeInfo)">
            <summary>
            Removes an existing shape from the Collider.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Duality.Components.Physics.RigidBody.ClearShapes">
            <summary>
            Removes all existing shapes from the Collider.
            </summary>
        </member>
        <member name="M:Duality.Components.Physics.RigidBody.SetShapes(System.Collections.Generic.IEnumerable{Duality.Components.Physics.ShapeInfo})">
            <summary>
            Sets the Colliders shape.
            </summary>
            <param name="shapes"></param>
        </member>
        <member name="M:Duality.Components.Physics.RigidBody.RemoveJoint(Duality.Components.Physics.JointInfo)">
            <summary>
            Removes an existing joint from the Collider.
            </summary>
            <param name="joint"></param>
        </member>
        <member name="M:Duality.Components.Physics.RigidBody.AddJoint(Duality.Components.Physics.JointInfo,Duality.Components.Physics.RigidBody)">
            <summary>
            Adds a new joint to the Collider
            </summary>
            <param name="joint"></param>
        </member>
        <member name="M:Duality.Components.Physics.RigidBody.ClearJoints">
            <summary>
            Removes all existing joints from the Collider.
            </summary>
        </member>
        <member name="M:Duality.Components.Physics.RigidBody.SetJoints(System.Collections.Generic.IEnumerable{Duality.Components.Physics.JointInfo})">
            <summary>
            Sets the Colliders joint configuration. This may also affect other Colliders!
            </summary>
            <param name="joints"></param>
        </member>
        <member name="M:Duality.Components.Physics.RigidBody.ApplyLocalImpulse(System.Single)">
            <summary>
            Applies a Transform-local angular impulse to the object.
            </summary>
            <param name="angularImpulse"></param>
        </member>
        <member name="M:Duality.Components.Physics.RigidBody.ApplyLocalImpulse(OpenTK.Vector2)">
            <summary>
            Applies a Transform-local impulse to the objects mass center.
            </summary>
            <param name="impulse"></param>
        </member>
        <member name="M:Duality.Components.Physics.RigidBody.ApplyLocalImpulse(OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Applies a Transform-local impulse to the specified point.
            </summary>
            <param name="impulse"></param>
            <param name="applyAt"></param>
        </member>
        <member name="M:Duality.Components.Physics.RigidBody.ApplyWorldImpulse(OpenTK.Vector2)">
            <summary>
            Applies a world impulse to the objects mass center.
            </summary>
            <param name="impulse"></param>
        </member>
        <member name="M:Duality.Components.Physics.RigidBody.ApplyWorldImpulse(OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Applies a world impulse to the specified point.
            </summary>
            <param name="impulse"></param>
            <param name="applyAt"></param>
        </member>
        <member name="M:Duality.Components.Physics.RigidBody.ApplyLocalForce(System.Single)">
            <summary>
            Applies a Transform-local angular force to the object.
            </summary>
            <param name="angularForce"></param>
        </member>
        <member name="M:Duality.Components.Physics.RigidBody.ApplyLocalForce(OpenTK.Vector2)">
            <summary>
            Applies a Transform-local force to the objects mass center.
            </summary>
            <param name="force"></param>
        </member>
        <member name="M:Duality.Components.Physics.RigidBody.ApplyLocalForce(OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Applies a Transform-local force to the specified point.
            </summary>
            <param name="force"></param>
            <param name="applyAt"></param>
        </member>
        <member name="M:Duality.Components.Physics.RigidBody.ApplyWorldForce(OpenTK.Vector2)">
            <summary>
            Applies a world force to the objects mass center.
            </summary>
            <param name="force"></param>
        </member>
        <member name="M:Duality.Components.Physics.RigidBody.ApplyWorldForce(OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Applies a world force to the specified point.
            </summary>
            <param name="force"></param>
            <param name="applyAt"></param>
        </member>
        <member name="M:Duality.Components.Physics.RigidBody.AwakeBody">
            <summary>
            Awakes the body if it has been in a resting state that is now being left, such as
            when changing physical properties at runtime. You usually don't need to call this.
            </summary>
        </member>
        <member name="M:Duality.Components.Physics.RigidBody.PickShape(OpenTK.Vector2)">
            <summary>
            Performs a physical picking operation and returns the <see cref="T:Duality.Components.Physics.ShapeInfo">shape</see> in which
            the specified world coordinate is located in.
            </summary>
            <param name="worldCoord"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Components.Physics.RigidBody.PickShapes(OpenTK.Vector2)">
            <summary>
            Performs a physical picking operation and returns the <see cref="T:Duality.Components.Physics.ShapeInfo">shapes</see> that
            intersect the specified world coordinate.
            </summary>
            <param name="worldCoord"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Components.Physics.RigidBody.PickShapes(OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Performs a physical picking operation and returns the <see cref="T:Duality.Components.Physics.ShapeInfo">shapes</see> that
            intersect the specified world coordinate area.
            </summary>
            <param name="worldCoord"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Components.Physics.RigidBody.SynchronizeBodyShape">
            <summary>
            Forces previously scheduled body shape updates to execute. Changes to a RigidBodies shape
            are normally cached and executed in the following frame. Calling this method guarantes all
            scheduled updates to be performed immediately.
            </summary>
        </member>
        <member name="M:Duality.Components.Physics.RigidBody.BeginUpdateBodyShape">
            <summary>
            Prepares this RigidBody for a large-scale shape update. This isn't required but might boost update performance.
            </summary>
        </member>
        <member name="M:Duality.Components.Physics.RigidBody.EndUpdateBodyShape">
            <summary>
            Restores this RigidBody after a large-scale shape update. See <see cref="M:Duality.Components.Physics.RigidBody.BeginUpdateBodyShape"/>.
            </summary>
        </member>
        <member name="M:Duality.Components.Physics.RigidBody.Raycast(OpenTK.Vector2,OpenTK.Vector2,Duality.Components.Physics.RayCastCallback)">
            <summary>
            Performs a 2d physical raycast in world coordinates.
            </summary>
            <param name="worldCoordA">The starting point.</param>
            <param name="worldCoordB">The desired end point.</param>
            <param name="callback"></param>
        </member>
        <member name="M:Duality.Components.Physics.RigidBody.PickShapeGlobal(OpenTK.Vector2)">
            <summary>
            Performs a global physical picking operation and returns the <see cref="T:Duality.Components.Physics.ShapeInfo">shape</see> in which
            the specified world coordinate is located in.
            </summary>
            <param name="worldCoord"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Components.Physics.RigidBody.PickShapesGlobal(OpenTK.Vector2)">
            <summary>
            Performs a global physical picking operation and returns the <see cref="T:Duality.Components.Physics.ShapeInfo">shapes</see> that
            intersect the specified world coordinate.
            </summary>
            <param name="worldCoord"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Components.Physics.RigidBody.PickShapesGlobal(OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Performs a global physical picking operation and returns the <see cref="T:Duality.Components.Physics.ShapeInfo">shapes</see> that
            intersect the specified world coordinate area.
            </summary>
            <param name="worldCoord"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Components.Physics.RigidBody.AwakeAll">
            <summary>
            Awakes all currently existing RigidBodies.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.RigidBody.BodyType">
            <summary>
            [GET / SET] The type of the physical body.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.RigidBody.LinearDamping">
            <summary>
            [GET / SET] The damping that is applied to the bodies velocity.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.RigidBody.AngularDamping">
            <summary>
            [GET / SET] The damping that is applied to the bodies angular velocity.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.RigidBody.FixedAngle">
            <summary>
            [GET / SET] Whether the bodies rotation is fixed.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.RigidBody.IgnoreGravity">
            <summary>
            [GET / SET] Whether the body ignores gravity.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.RigidBody.ContinousCollision">
            <summary>
            [GET / SET] Whether the body is included in continous collision detection or not.
            It prevents the body from moving through others at high speeds at the cost of performance.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.RigidBody.LinearVelocity">
            <summary>
            [GET / SET] The Colliders current linear velocity.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.RigidBody.AngularVelocity">
            <summary>
            [GET / SET] The Colliders current angular velocity.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.RigidBody.Friction">
            <summary>
            [GET / SET] The bodies overall friction value.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.RigidBody.Restitution">
            <summary>
            [GET / SET] The bodies overall restitution value.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.RigidBody.Mass">
            <summary>
            [GET / SET] The bodies overall mass. This is usually calculated automatically. You may however
            assign an explicit, fixed value to override the automatically calculated mass. To reset to
            automated calculation, set to zero.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.RigidBody.CollisionCategory">
            <summary>
            [GET / SET] A bitmask that specifies the collision categories to which this Collider belongs.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.RigidBody.CollidesWith">
            <summary>
            [GET / SET] A bitmask that specifies which collision categories this Collider interacts with.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.RigidBody.Revolutions">
            <summary>
            [GET] The bodies total number of revolutions.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.RigidBody.WorldMassCenter">
            <summary>
            [GET] The bodies center of mass in world coordinates.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.RigidBody.LocalMassCenter">
            <summary>
            [GET] The bodies center of mass in local coordinates.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.RigidBody.Shapes">
            <summary>
            [GET / SET] Enumerates all <see cref="T:Duality.Components.Physics.ShapeInfo">primitive shapes</see> which this body consists of.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.RigidBody.Joints">
            <summary>
            [GET / SET] Enumerates all <see cref="T:Duality.Components.Physics.JointInfo">joints</see> that are connected to this Collider.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.RigidBody.BoundRadius">
            <summary>
            [GET] The physical bodys bounding radius.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.RigidBody.IsAwake">
            <summary>
            [GET] Whether the body is currently awake i.e. actively simulated.
            </summary>
        </member>
        <member name="T:Duality.Components.Physics.BodyType">
            <summary>
            The type of a <see cref="T:Duality.Components.Physics.RigidBody">Colliders</see> physical body.
            </summary>
        </member>
        <member name="F:Duality.Components.Physics.BodyType.Static">
            <summary>
            A static body. It will never move due to physical forces.
            </summary>
        </member>
        <member name="F:Duality.Components.Physics.BodyType.Dynamic">
            <summary>
            A dynamic body. Its movement is determined by physical effects.
            </summary>
        </member>
        <member name="T:Duality.Components.Physics.RayCastCallback">
            <summary>
            Called for each shape found in the query. You control how the ray cast proceeds by returning a float:
            <returns>-1 to filter, 0 to terminate, fraction to clip the ray for closest hit, 1 to continue</returns>
            </summary>
        </member>
        <member name="T:Duality.Components.Physics.LineJointInfo">
            <summary>
            The line joint is also called "wheel joint", because it behaves like the spring of a car tire:
            A body is only allowed to travel on a specific world axis relative to the other one but can rotate
            freely or accelerated by a motor.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.LineJointInfo.CarAnchor">
            <summary>
            [GET / SET] The car RigidBodies local anchor point.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.LineJointInfo.WheelAnchor">
            <summary>
            [GET / SET] The wheel RigidBodies local anchor point.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.LineJointInfo.MovementAxis">
            <summary>
            [GET / SET] The axis on which the body may move.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.LineJointInfo.DampingRatio">
            <summary>
            [GET / SET] The damping ratio. Zero means "no damping", one means "critical damping".
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.LineJointInfo.Frequency">
            <summary>
            [GET / SET] The mass spring damper frequency in hertz.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.LineJointInfo.MotorEnabled">
            <summary>
            [GET / SET] Is the joint motor enabled?
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.LineJointInfo.MaxMotorTorque">
            <summary>
            [GET / SET] The maximum motor torque.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.LineJointInfo.MotorSpeed">
            <summary>
            [GET / SET] The desired motor speed in radians per frame.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.LineJointInfo.JointSpeed">
            <summary>
            [GET] The current joint angle speed in radians per frame.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.LineJointInfo.JointTranslation">
            <summary>
            [GET] The current joint translation.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.LineJointInfo.MotorTorque">
            <summary>
            [GET] The current joint motor torque.
            </summary>
        </member>
        <member name="T:Duality.Components.Physics.FixedMouseJointInfo">
            <summary>
            Constrains the RigidBody to track a specific world point, such as a mouse cursor.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.FixedMouseJointInfo.LocalAnchor">
            <summary>
            [GET / SET] The RigidBodies local anchor point.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.FixedMouseJointInfo.WorldAnchor">
            <summary>
            [GET / SET] The world anchor point to which the RigidBody will be attached.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.FixedMouseJointInfo.DampingRatio">
            <summary>
            [GET / SET] The damping ratio. Zero means "no damping", one means "critical damping".
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.FixedMouseJointInfo.Frequency">
            <summary>
            [GET / SET] The mass spring damper frequency in hertz.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.FixedMouseJointInfo.MaxForce">
            <summary>
            [GET / SET] The maximum tracking force.
            </summary>
        </member>
        <member name="T:Duality.Components.SoundEmitter">
            <summary>
            Provides functionality to emit sound.
            </summary>
        </member>
        <member name="P:Duality.Components.SoundEmitter.Sources">
            <summary>
            [GET / SET] A list of sound sources this SoundEmitter maintains. Is never null.
            </summary>
        </member>
        <member name="T:Duality.Components.SoundEmitter.Source">
            <summary>
            A single sound source.
            </summary>
        </member>
        <member name="M:Duality.Components.SoundEmitter.Source.Update(Duality.Components.SoundEmitter)">
            <summary>
            Updates the sound source.
            </summary>
            <param name="emitter">The sources parent <see cref="T:Duality.Components.SoundEmitter"/>.</param>
            <returns>True, if the source is still active. False, if it requests to be removed.</returns>
        </member>
        <member name="P:Duality.Components.SoundEmitter.Source.Instance">
            <summary>
            [GET] The <see cref="T:Duality.SoundInstance"/> that is currently allocated to emit
            this sources sound.
            </summary>
        </member>
        <member name="P:Duality.Components.SoundEmitter.Source.Sound">
            <summary>
            [GET / SET] The <see cref="T:Duality.Resources.Sound"/> that is to be played by this source.
            </summary>
        </member>
        <member name="P:Duality.Components.SoundEmitter.Source.Looped">
            <summary>
            [GET / SET] Whether this source is looped.
            </summary>
        </member>
        <member name="P:Duality.Components.SoundEmitter.Source.Paused">
            <summary>
            [GET / SET] Whether this source is paused.
            </summary>
        </member>
        <member name="P:Duality.Components.SoundEmitter.Source.Volume">
            <summary>
            [GET / SET] The volume of this source.
            </summary>
        </member>
        <member name="P:Duality.Components.SoundEmitter.Source.Pitch">
            <summary>
            [GET / SET] The sources pitch factor.
            </summary>
        </member>
        <member name="P:Duality.Components.SoundEmitter.Source.Offset">
            <summary>
            [GET / SET] The 3d offset of the emitted sound relative to the GameObject.
            </summary>
        </member>
        <member name="T:Duality.Components.Physics.WeldJointInfo">
            <summary>
            "Welds" two Colliders together so they share a common point and relative angle.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.WeldJointInfo.LocalAnchorA">
            <summary>
            [GET / SET] The welding point, locally to the first object.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.WeldJointInfo.LocalAnchorB">
            <summary>
            [GET / SET] The welding point, locally to the second object.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.WeldJointInfo.RefAngle">
            <summary>
            [GET / SET] The relative angle both objects need to keep.
            </summary>
        </member>
        <member name="T:Duality.Components.Physics.PolyShapeInfo">
            <summary>
            Describes a <see cref="T:Duality.Components.Physics.RigidBody">Colliders</see> polygon shape.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.PolyShapeInfo.Vertices">
            <summary>
            [GET / SET] The polygons vertices.
            </summary>
        </member>
        <member name="T:Duality.Components.Physics.FixedFrictionJointInfo">
            <summary>
            Applies friction to a specific point of the RigidBody.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.FixedFrictionJointInfo.LocalAnchor">
            <summary>
            [GET / SET] The RigidBodys local anchor point.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.FixedFrictionJointInfo.MaxForce">
            <summary>
            [GET / SET] The maximum friction force in the local anchor point.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.FixedFrictionJointInfo.MaxTorque">
            <summary>
            [GET / SET] The maximum friction torque in the local anchor point.
            </summary>
        </member>
        <member name="T:Duality.Components.Physics.CircleShapeInfo">
            <summary>
            Describes a <see cref="T:Duality.Components.Physics.RigidBody">Colliders</see> circle shape.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.CircleShapeInfo.Radius">
            <summary>
            [GET / SET] The circles radius.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.CircleShapeInfo.Position">
            <summary>
            [GET / SET] The circles position.
            </summary>
        </member>
        <member name="T:Duality.Components.Renderers.SpriteRenderer">
            <summary>
            Renders a sprite to represent the <see cref="T:Duality.GameObject"/>.
            </summary>
        </member>
        <member name="P:Duality.Components.Renderers.SpriteRenderer.Rect">
            <summary>
            [GET / SET] The rectangular area the sprite occupies. Relative to the <see cref="T:Duality.GameObject"/>.
            </summary>
        </member>
        <member name="P:Duality.Components.Renderers.SpriteRenderer.SharedMaterial">
            <summary>
            [GET / SET] The <see cref="T:Duality.Resources.Material"/> that is used for rendering the sprite.
            </summary>
        </member>
        <member name="P:Duality.Components.Renderers.SpriteRenderer.CustomMaterial">
            <summary>
            [GET / SET] A custom, local <see cref="T:Duality.Resources.BatchInfo"/> overriding the <see cref="P:Duality.Components.Renderers.SpriteRenderer.SharedMaterial"/>,
            allowing this sprite to look unique without having to create its own <see cref="T:Duality.Resources.Material"/> Resource.
            However, this feature should be used with caution: Performance is better using <see cref="P:Duality.Components.Renderers.SpriteRenderer.SharedMaterial">shared Materials</see>.
            </summary>
        </member>
        <member name="P:Duality.Components.Renderers.SpriteRenderer.ColorTint">
            <summary>
            [GET / SET] A color by which the sprite is tinted.
            </summary>
        </member>
        <member name="P:Duality.Components.Renderers.SpriteRenderer.RectMode">
            <summary>
            [GET / SET] Specifies how the sprites uv-Coordinates are calculated.
            </summary>
        </member>
        <member name="P:Duality.Components.Renderers.SpriteRenderer.Offset">
            <summary>
            [GET / SET] A virtual Z offset that affects the order in which objects are drawn. If you want to assure an object is drawn after another one,
            just assign a higher Offset value to the background object.
            </summary>
        </member>
        <member name="P:Duality.Components.Renderers.SpriteRenderer.VertexZOffset">
            <summary>
            [GET] The internal Z-Offset added to the renderers vertices based on its <see cref="P:Duality.Components.Renderers.SpriteRenderer.Offset"/> value.
            </summary>
        </member>
        <member name="T:Duality.Components.Renderers.SpriteRenderer.UVMode">
            <summary>
            SPecifies, how the sprites uv-Coordinates are calculated.
            </summary>
        </member>
        <member name="F:Duality.Components.Renderers.SpriteRenderer.UVMode.Stretch">
            <summary>
            The uv-Coordinates are constant, stretching the supplied texture to fit the SpriteRenderers dimensions.
            </summary>
        </member>
        <member name="F:Duality.Components.Renderers.SpriteRenderer.UVMode.WrapHorizontal">
            <summary>
            The u-Coordinate is calculated based on the available horizontal space, allowing the supplied texture to be
            tiled across the SpriteRenderers width.
            </summary>
        </member>
        <member name="F:Duality.Components.Renderers.SpriteRenderer.UVMode.WrapVertical">
            <summary>
            The v-Coordinate is calculated based on the available vertical space, allowing the supplied texture to be
            tiled across the SpriteRenderers height.
            </summary>
        </member>
        <member name="F:Duality.Components.Renderers.SpriteRenderer.UVMode.WrapBoth">
            <summary>
            The uv-Coordinates are calculated based on the available space, allowing the supplied texture to be
            tiled across the SpriteRenderers size.
            </summary>
        </member>
        <member name="T:Duality.Components.Physics.FixedRevoluteJointInfo">
            <summary>
            Pins a local anchor on the the RigidBody to a specific world position without constraining rotation.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.FixedRevoluteJointInfo.LocalAnchor">
            <summary>
            [GET / SET] The Colliders local anchor point.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.FixedRevoluteJointInfo.WorldAnchor">
            <summary>
            [GET / SET] The world anchor point to which the Collider will be attached.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.FixedRevoluteJointInfo.LimitEnabled">
            <summary>
            [GET / SET] Is the joint limited in its angle?
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.FixedRevoluteJointInfo.LowerLimit">
            <summary>
            [GET / SET] The lower joint limit in radians.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.FixedRevoluteJointInfo.UpperLimit">
            <summary>
            [GET / SET] The upper joint limit in radians.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.FixedRevoluteJointInfo.ReferenceAngle">
            <summary>
            [GET / SET] The joint's reference angle.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.FixedRevoluteJointInfo.MotorEnabled">
            <summary>
            [GET / SET] Is the joint motor enabled?
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.FixedRevoluteJointInfo.MaxMotorTorque">
            <summary>
            [GET / SET] The maximum motor torque.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.FixedRevoluteJointInfo.MotorSpeed">
            <summary>
            [GET / SET] The desired motor speed in radians per frame.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.FixedRevoluteJointInfo.JointSpeed">
            <summary>
            [GET] The current joint angle speed in radians per frame.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.FixedRevoluteJointInfo.JointAngle">
            <summary>
            [GET] The current joint angle in radians.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.FixedRevoluteJointInfo.MotorTorque">
            <summary>
            [GET] The current joint motor torque.
            </summary>
        </member>
        <member name="T:Duality.Components.Physics.LoopShapeInfo">
            <summary>
            Describes a double-sided edge loop (outline) in a <see cref="T:Duality.Components.Physics.RigidBody">RigidBodies</see> shape.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.LoopShapeInfo.Vertices">
            <summary>
            [GET / SET] The edge loops vertices.
            </summary>
        </member>
        <member name="T:Duality.Components.Physics.PrismaticJointInfo">
            <summary>
            This joint allows the RigidBody to travel on a specific axis relative to another body. It can be limited to a certain area and driven by a motor force.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.PrismaticJointInfo.LocalAnchorA">
            <summary>
            [GET / SET] The local anchor point on the first RigidBody.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.PrismaticJointInfo.LocalAnchorB">
            <summary>
            [GET / SET] The local anchor point on the second RigidBody.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.PrismaticJointInfo.MovementAxis">
            <summary>
            [GET / SET] The axis on which the body may move.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.PrismaticJointInfo.LimitEnabled">
            <summary>
            [GET / SET] Is the joint limited in its movement?
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.PrismaticJointInfo.LowerLimit">
            <summary>
            [GET / SET] The lower joint limit.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.PrismaticJointInfo.UpperLimit">
            <summary>
            [GET / SET] The upper joint limit.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.PrismaticJointInfo.MotorEnabled">
            <summary>
            [GET / SET] Is the joint motor enabled?
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.PrismaticJointInfo.MaxMotorForce">
            <summary>
            [GET / SET] The maximum motor force.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.PrismaticJointInfo.MotorSpeed">
            <summary>
            [GET / SET] The desired motor speed.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.PrismaticJointInfo.JointSpeed">
            <summary>
            [GET] The current joint speed.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.PrismaticJointInfo.JointTranslation">
            <summary>
            [GET] The current joint translation.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.PrismaticJointInfo.MotorForce">
            <summary>
            [GET] The current joint motor force.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.PrismaticJointInfo.ReferenceAngle">
            <summary>
            [GET / SET] The reference angle that is used to constrain the bodies angle.
            </summary>
        </member>
        <member name="T:Duality.Components.Renderers.AnimSpriteRenderer">
            <summary>
            Renders an animated sprite to represent the <see cref="T:Duality.GameObject"/>.
            </summary>
        </member>
        <member name="M:Duality.Components.Renderers.AnimSpriteRenderer.UpdateVisibleFrames">
            <summary>
            Updates the <see cref="P:Duality.Components.Renderers.AnimSpriteRenderer.CurrentFrame"/>, <see cref="P:Duality.Components.Renderers.AnimSpriteRenderer.NextFrame"/> and <see cref="P:Duality.Components.Renderers.AnimSpriteRenderer.CurrentFrameProgress"/> properties immediately.
            This is called implicitly once each frame before drawing, so you don't normally call this. However, when changing animation
            parameters and requiring updated animation frame data immediately, this could be helpful.
            </summary>
        </member>
        <member name="P:Duality.Components.Renderers.AnimSpriteRenderer.AnimFirstFrame">
            <summary>
            [GET / SET] The index of the first frame to display. Ignored if <see cref="P:Duality.Components.Renderers.AnimSpriteRenderer.CustomFrameSequence"/> is set.
            </summary>
            <remarks>
            Animation indices are looked up in the <see cref="P:Duality.Resources.Texture.Atlas"/> map
            of the <see cref="T:Duality.Resources.Texture"/> that is used.
            </remarks>
        </member>
        <member name="P:Duality.Components.Renderers.AnimSpriteRenderer.AnimFrameCount">
            <summary>
            [GET / SET] The number of continous frames to use for the animation. Ignored if <see cref="P:Duality.Components.Renderers.AnimSpriteRenderer.CustomFrameSequence"/> is set.
            </summary>
            <remarks>
            Animation indices are looked up in the <see cref="P:Duality.Resources.Texture.Atlas"/> map
            of the <see cref="T:Duality.Resources.Texture"/> that is used.
            </remarks>
        </member>
        <member name="P:Duality.Components.Renderers.AnimSpriteRenderer.AnimDuration">
            <summary>
            [GET / SET] The time a single animation cycle needs to complete, in seconds.
            </summary>
        </member>
        <member name="P:Duality.Components.Renderers.AnimSpriteRenderer.AnimTime">
            <summary>
            [GET / SET] The animations current play time, i.e. the current state of the animation.
            </summary>
        </member>
        <member name="P:Duality.Components.Renderers.AnimSpriteRenderer.AnimLoopMode">
            <summary>
            [GET / SET] The animations loop behaviour.
            </summary>
        </member>
        <member name="P:Duality.Components.Renderers.AnimSpriteRenderer.CustomFrameSequence">
            <summary>
            [GET / SET] A custom sequence of frame indices that will be used instead of the default range
            specified by <see cref="P:Duality.Components.Renderers.AnimSpriteRenderer.AnimFirstFrame"/> and <see cref="P:Duality.Components.Renderers.AnimSpriteRenderer.AnimFrameCount"/>. Unused if set to null.
            </summary>
            <remarks>
            Animation indices are looked up in the <see cref="P:Duality.Resources.Texture.Atlas"/> map
            of the <see cref="T:Duality.Resources.Texture"/> that is used.
            </remarks>
        </member>
        <member name="P:Duality.Components.Renderers.AnimSpriteRenderer.IsAnimationRunning">
            <summary>
            [GET] Whether the animation is currently running, i.e. if there is anything animated right now.
            </summary>
        </member>
        <member name="P:Duality.Components.Renderers.AnimSpriteRenderer.CurrentFrame">
            <summary>
            [GET] The currently visible animation frames index.
            </summary>
        </member>
        <member name="P:Duality.Components.Renderers.AnimSpriteRenderer.NextFrame">
            <summary>
            [GET] The next visible animation frames index.
            </summary>
        </member>
        <member name="P:Duality.Components.Renderers.AnimSpriteRenderer.CurrentFrameProgress">
            <summary>
            [GET] The current animation frames progress where zero means "just entered the current frame"
            and one means "about to leave the current frame". This value is also used for smooth animation blending.
            </summary>
        </member>
        <member name="T:Duality.Components.Renderers.AnimSpriteRenderer.LoopMode">
            <summary>
            Describes the sprite animations loop behaviour.
            </summary>
        </member>
        <member name="F:Duality.Components.Renderers.AnimSpriteRenderer.LoopMode.Once">
            <summary>
            The animation is played once an then remains in its last frame.
            </summary>
        </member>
        <member name="F:Duality.Components.Renderers.AnimSpriteRenderer.LoopMode.Loop">
            <summary>
            The animation is looped: When reaching the last frame, it begins again at the first one.
            </summary>
        </member>
        <member name="F:Duality.Components.Renderers.AnimSpriteRenderer.LoopMode.PingPong">
            <summary>
            The animation plays forward until reaching the end, then reverses and plays backward until 
            reaching the start again. This "pingpong" behaviour is looped.
            </summary>
        </member>
        <member name="F:Duality.Components.Renderers.AnimSpriteRenderer.LoopMode.RandomSingle">
            <summary>
            A single frame is selected randomly each time the object is initialized and remains static
            for its whole lifetime.
            </summary>
        </member>
        <member name="F:Duality.Components.Renderers.AnimSpriteRenderer.LoopMode.FixedSingle">
            <summary>
            A fixed, single frame is displayed. Which one depends on the one you set in the editor or
            in source code.
            </summary>
        </member>
        <member name="F:Duality.Components.Renderers.AnimSpriteRenderer.LoopMode.Queue">
            <summary>
            The <see cref="P:Duality.Components.Renderers.AnimSpriteRenderer.CustomFrameSequence"/> is interpreted and processed as a queue where <see cref="P:Duality.Components.Renderers.AnimSpriteRenderer.AnimDuration"/>
            is the time a single frame takes.
            </summary>
        </member>
        <member name="T:Duality.Components.Physics.DistanceJointInfo">
            <summary>
            Constrains two RigidBodies to obtain a fixed distance to each other
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.DistanceJointInfo.LocalAnchorA">
            <summary>
            [GET / SET] The first bodies local anchor point.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.DistanceJointInfo.LocalAnchorB">
            <summary>
            [GET / SET] The second bodies local anchor point.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.DistanceJointInfo.DampingRatio">
            <summary>
            [GET / SET] The damping ratio. Zero means "no damping", one means "critical damping".
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.DistanceJointInfo.Frequency">
            <summary>
            [GET / SET] The mass spring damper frequency in hertz.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.DistanceJointInfo.TargetDistance">
            <summary>
            [GET / SET] The target distance between local and world anchor
            </summary>
        </member>
        <member name="T:Duality.Components.Physics.FixedPrismaticJointInfo">
            <summary>
            This joint allows the RigidBody to travel on a specific axis. It can be limited to a certain area and driven by a motor force.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.FixedPrismaticJointInfo.WorldAnchor">
            <summary>
            [GET / SET] The world anchor point to which the RigidBody will be attached.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.FixedPrismaticJointInfo.MovementAxis">
            <summary>
            [GET / SET] The axis on which the body may move.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.FixedPrismaticJointInfo.LimitEnabled">
            <summary>
            [GET / SET] Is the joint limited in its movement?
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.FixedPrismaticJointInfo.LowerLimit">
            <summary>
            [GET / SET] The lower joint limit.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.FixedPrismaticJointInfo.UpperLimit">
            <summary>
            [GET / SET] The upper joint limit.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.FixedPrismaticJointInfo.MotorEnabled">
            <summary>
            [GET / SET] Is the joint motor enabled?
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.FixedPrismaticJointInfo.MaxMotorForce">
            <summary>
            [GET / SET] The maximum motor force.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.FixedPrismaticJointInfo.MotorSpeed">
            <summary>
            [GET / SET] The desired motor speed.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.FixedPrismaticJointInfo.JointSpeed">
            <summary>
            [GET] The current joint speed.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.FixedPrismaticJointInfo.JointTranslation">
            <summary>
            [GET] The current joint translation.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.FixedPrismaticJointInfo.MotorForce">
            <summary>
            [GET] The current joint motor force.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.FixedPrismaticJointInfo.ReferenceAngle">
            <summary>
            [GET / SET] The reference angle that is used to constrain the bodies angle.
            </summary>
        </member>
        <member name="T:Duality.Components.Physics.SliderJointInfo">
            <summary>
            Constrains two RigidBodies to keep their distance to each other in a certain range.
            You can view this as a massless, rigid rod.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.SliderJointInfo.LocalAnchorA">
            <summary>
            [GET / SET] The first bodies local anchor point.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.SliderJointInfo.LocalAnchorB">
            <summary>
            [GET / SET] The second bodies local anchor point.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.SliderJointInfo.MaxLength">
            <summary>
            [GET / SET] The maximum distance between both RigidBodies.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.SliderJointInfo.MinLength">
            <summary>
            [GET / SET] The minimum distance between both RigidBodies.
            </summary>
        </member>
        <member name="T:Duality.Components.Physics.RopeJointInfo">
            <summary>
            Constrains two RigidBodies to not exceed a maximum distance to each other.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.RopeJointInfo.LocalAnchorA">
            <summary>
            [GET / SET] The first bodies local anchor point.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.RopeJointInfo.LocalAnchorB">
            <summary>
            [GET / SET] The second bodies local anchor point.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.RopeJointInfo.MaxLength">
            <summary>
            [GET / SET] The maximum distance between both RigidBodies i.e. the "rope length".
            </summary>
        </member>
        <member name="T:Duality.Components.SoundListener">
            <summary>
            Makes this <see cref="T:Duality.GameObject"/> the 3d sound listener.
            </summary>
        </member>
        <member name="T:Duality.Components.Physics.FixedAngleJointInfo">
            <summary>
            Constrains the Collider to a fixed angle
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.FixedAngleJointInfo.TargetAngle">
            <summary>
            [GET / SET] The Colliders target angle.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.FixedAngleJointInfo.BiasFactor">
            <summary>
            [GET / SET] The bias factor determines how strong the joint reacts to the difference between target and actual angle.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.FixedAngleJointInfo.Softness">
            <summary>
            [GET / SET] The softness of the joint determines how easy it is to turn it away from its ideal angle.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.FixedAngleJointInfo.MaxImpulse">
            <summary>
            [GET / SET] The maximum angular impulse to apply to the RigidBody. A negative value equals infinity.
            </summary>
        </member>
        <member name="T:Duality.Components.Physics.AngleJointInfo">
            <summary>
            Constrains two RigidBodies to a fixed relative angle
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.AngleJointInfo.TargetAngle">
            <summary>
            [GET / SET] The Colliders target angle.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.AngleJointInfo.BiasFactor">
            <summary>
            [GET / SET] The bias factor determines how strong the joint reacts to the difference between target and actual angle.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.AngleJointInfo.Softness">
            <summary>
            [GET / SET] The softness of the joint determines how easy it is to turn it away from its ideal angle.
            </summary>
        </member>
        <member name="P:Duality.Components.Physics.AngleJointInfo.MaxImpulse">
            <summary>
            [GET / SET] The maximum angular impulse to apply to the RigidBody. A negative value equals infinity.
            </summary>
        </member>
    </members>
</doc>
