<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Duality</name>
    </assembly>
    <members>
        <member name="T:Duality.SoundBudgetPriority">
            <summary>
            Defines priorities for the budget-based sound system
            </summary>
        </member>
        <member name="T:Duality.SoundBudgetPad">
            <summary>
            Wraps a SoundInstance in order to make it budget-based. Intended
            only to be used for longer sound pads.
            </summary>
        </member>
        <member name="T:Duality.DualityApp">
            <summary>
            This class controls Duality's main program flow control and general maintenance functionality.
            It initializes the engine, loads plugins, provides access to user input, houses global data structures
            and handles logfiles internally.
            </summary>
        </member>
        <member name="M:Duality.DualityApp.Init(Duality.DualityApp.ExecutionContext,System.String[])">
            <summary>
            Initializes this DualityApp. Should be called before performing any operations withing Duality.
            </summary>
            <param name="context">The <see cref="T:Duality.DualityApp.ExecutionContext"/> in which Duality runs.</param>
            <param name="args">
            Command line arguments to run this DualityApp with. 
            Usually these are just the ones from the host application, passed on.
            </param>
        </member>
        <member name="M:Duality.DualityApp.Terminate(System.Boolean)">
            <summary>
            Terminates this DualityApp. This does not end the current Process, but it isn't recommended to
            attemp performing any Duality operations after it has been terminated.
            </summary>
            <param name="unexpected">
            If true, this is handled as an unexpected termination, such as because of an exception that
            from which the application can't recover.
            </param>
        </member>
        <member name="M:Duality.DualityApp.Update">
            <summary>
            Performs a single update cycle.
            </summary>
        </member>
        <member name="M:Duality.DualityApp.Render">
            <summary>
            Performs a single render cycle.
            </summary>
        </member>
        <member name="M:Duality.DualityApp.DisposeLater(System.Object)">
            <summary>
            Schedules the specified object for disposal. It is guaranteed to be disposed by the end of the current update cycle.
            </summary>
            <param name="o">The object to schedule for disposal.</param>
        </member>
        <member name="M:Duality.DualityApp.EditorUpdate(Duality.ObjectManagers.GameObjectManager)">
            <summary>
            Performs a single editor update cycle.
            </summary>
            <param name="updateObjects"></param>
        </member>
        <member name="M:Duality.DualityApp.LoadSaveAll">
            <summary>
            Loads all <see cref="T:Duality.Resource">Resources</see> that are located in this DualityApp's data directory and
            saves them again. All loaded content is discarded both before and after this operation. You usually don't
            need this.
            </summary>
        </member>
        <member name="M:Duality.DualityApp.LoadAppData">
            <summary>
            Triggers Duality to (re)load its <see cref="T:Duality.DualityAppData"/>.
            </summary>
        </member>
        <member name="M:Duality.DualityApp.LoadUserData">
            <summary>
            Triggers Duality to (re)load its <see cref="T:Duality.DualityUserData"/>.
            </summary>
        </member>
        <member name="M:Duality.DualityApp.LoadMetaData">
            <summary>
            Triggers Duality to (re)load its <see cref="T:Duality.DualityMetaData"/>.
            </summary>
        </member>
        <member name="M:Duality.DualityApp.SaveAppData">
            <summary>
            Triggers Duality to save its <see cref="T:Duality.DualityAppData"/>.
            </summary>
        </member>
        <member name="M:Duality.DualityApp.SaveUserData">
            <summary>
            Triggers Duality to save its <see cref="T:Duality.DualityUserData"/>.
            </summary>
        </member>
        <member name="M:Duality.DualityApp.SaveMetaData">
            <summary>
            Triggers Duality to save its <see cref="T:Duality.DualityMetaData"/>.
            </summary>
        </member>
        <member name="M:Duality.DualityApp.LoadPlugins">
            <summary>
            (Re)Loads all plugins. This results in discarding ALL Resources that might have been loaded before.
            </summary>
        </member>
        <member name="M:Duality.DualityApp.ReloadPlugin(System.String)">
            <summary>
            Reloads the specified plugin. This results in discarding all <see cref="T:Duality.Resource"/> types related to this
            plugin, as well as the current <see cref="T:Duality.Resources.Scene"/>. However, you might still need to take care of your
            own custom data, i.e. dispose and properly reload it, if it relies on the reloaded plugin in any way.
            </summary>
            <param name="pluginFileName">The file path of the plugin to reload</param>
        </member>
        <member name="M:Duality.DualityApp.IsLeafPlugin(System.String)">
            <summary>
            Returns whether the specified plugin is a leaf plugin i.e. isn't referenced by any other already loaded plugin.
            </summary>
            <param name="pluginFileName">The file path of the plugin to reload</param>
            <returns></returns>
        </member>
        <member name="M:Duality.DualityApp.RequestSerializer(System.IO.Stream)">
            <summary>
            Requests a <see cref="T:Duality.Serialization.BinaryFormatter">binary serializer</see> for the specified stream.
            </summary>
            <param name="stream">The stream which is used for de/serialization</param>
            <returns>A binary serializer to use for serialization</returns>
        </member>
        <member name="M:Duality.DualityApp.GetDualityAssemblies">
            <summary>
            Enumerates all currently loaded assemblies that are part of Duality, i.e. Duality itsself and all loaded plugins.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duality.DualityApp.GetAvailDualityTypes(System.Type)">
            <summary>
            Enumerates all available Duality <see cref="T:System.Type">Types</see> that are assignable
            to the specified Type. 
            </summary>
            <param name="baseType">The base type to use for matching the result types.</param>
            <returns>An enumeration of all Duality types deriving from the specified type.</returns>
            <example>
            The following code logs all available kinds of <see cref="T:Duality.Components.Renderer">Renderers</see>:
            <code>
            var rendererTypes = DualityApp.GetAvailDualityTypes(typeof(Duality.Components.Renderer));
            foreach (Type rt in rendererTypes)
            {
            	Log.Core.Write("Renderer Type '{0}' from Assembly '{1}'", Log.Type(rt), rt.Assembly.FullName);
            }
            </code>
            </example>
        </member>
        <member name="E:Duality.DualityApp.Initialized">
            <summary>
            Fired as soon as Duality has been initialized. However, this usually happens before creating any kind of graphics context,
            so no content is available yet and any attemp to load or request Resources is not recommended.
            </summary>
        </member>
        <member name="E:Duality.DualityApp.Terminating">
            <summary>
            Fired when shutting down Duality.
            </summary>
        </member>
        <member name="E:Duality.DualityApp.Updating">
            <summary>
            Fired once each update cycle - but not in the editor.
            </summary>
        </member>
        <member name="E:Duality.DualityApp.GfxSizeChanged">
            <summary>
            Fired whenever the <see cref="T:Duality.DualityUserData">gfx size / display resolution has changed</see>.
            </summary>
        </member>
        <member name="P:Duality.DualityApp.TargetResolution">
            <summary>
            [GET / SET] The size of the current rendering surface (full screen, a single window, etc.) in pixels. Setting this will not actually change
            Duality's state - this is a pure "for your information" property.
            </summary>
        </member>
        <member name="P:Duality.DualityApp.TargetMode">
            <summary>
            [GET / SET] The <see cref="T:OpenTK.Graphics.GraphicsMode"/> in which rendering takes place. Setting this will not actually change
            Duality's state - this is a pure "for your information" property.
            </summary>
        </member>
        <member name="P:Duality.DualityApp.Mouse">
            <summary>
            [GET / SET] Provides access to mouse user input.
            </summary>
        </member>
        <member name="P:Duality.DualityApp.Keyboard">
            <summary>
            [GET / SET] Provides access to keyboard user input
            </summary>
        </member>
        <member name="P:Duality.DualityApp.Sound">
            <summary>
            [GET] Provides access to the main <see cref="T:Duality.SoundDevice"/>.
            </summary>
        </member>
        <member name="P:Duality.DualityApp.Joysticks">
            <summary>
            [GET / SET] Provides access to joystick user input
            </summary>
        </member>
        <member name="P:Duality.DualityApp.AppData">
            <summary>
            [GET / SET] Provides access to Duality's current <see cref="T:Duality.DualityAppData">application data</see>. This is never null.
            Any kind of data change event is fired as soon as you re-assign this property. Be sure to do that after changing its data.
            </summary>
        </member>
        <member name="P:Duality.DualityApp.UserData">
            <summary>
            [GET / SET] Provides access to Duality's current <see cref="T:Duality.DualityUserData">user data</see>. This is never null.
            Any kind of data change event is fired as soon as you re-assign this property. Be sure to do that after changing its data.
            </summary>
        </member>
        <member name="P:Duality.DualityApp.MetaData">
            <summary>
            [GET] Provides access to Duality's current <see cref="T:Duality.DualityMetaData">meta data</see>. This is never null.
            </summary>
        </member>
        <member name="P:Duality.DualityApp.AppDataPath">
            <summary>
            [GET] Returns the path where this DualityApp's <see cref="T:Duality.DualityAppData">application data</see> is located at.
            </summary>
        </member>
        <member name="P:Duality.DualityApp.UserDataPath">
            <summary>
            [GET] Returns the path where this DualityApp's <see cref="T:Duality.DualityUserData">user data</see> is located at.
            </summary>
        </member>
        <member name="P:Duality.DualityApp.MetaDataPath">
            <summary>
            [GET] Returns the path where this DualityApp's <see cref="T:Duality.DualityMetaData">meta data</see> is located at.
            </summary>
        </member>
        <member name="P:Duality.DualityApp.DefaultMode">
            <summary>
            [GET] Returns the <see cref="T:OpenTK.Graphics.GraphicsMode"/> that Duality intends to use by default.
            </summary>
        </member>
        <member name="P:Duality.DualityApp.AvailableModes">
            <summary>
            [GET] Enumerates all available <see cref="T:OpenTK.Graphics.GraphicsMode">GraphicsModes</see>.
            </summary>
        </member>
        <member name="P:Duality.DualityApp.ExecContext">
            <summary>
            [GET] Returns the <see cref="T:Duality.DualityApp.ExecutionContext"/> in which this DualityApp is currently running.
            </summary>
        </member>
        <member name="P:Duality.DualityApp.LoadedPlugins">
            <summary>
            [GET] Enumerates all currently loaded plugins.
            </summary>
        </member>
        <member name="P:Duality.DualityApp.DisposedPlugins">
            <summary>
            [GET] Enumerates all plugins that have been loaded before, but have been discarded due to a runtime plugin reload operation.
            This is usually only the case when being executed from withing the editor or manually triggering a plugin reload. However,
            this is normally unnecessary.
            </summary>
        </member>
        <member name="T:Duality.DualityApp.ExecutionContext">
            <summary>
            Describes the context in which the current DualityApp runs.
            </summary>
        </member>
        <member name="F:Duality.DualityApp.ExecutionContext.Terminated">
            <summary>
            Duality has been terminated. There is no guarantee that any object is still valid or usable.
            </summary>
        </member>
        <member name="F:Duality.DualityApp.ExecutionContext.Unknown">
            <summary>
            The context in which Duality is executed is unknown.
            </summary>
        </member>
        <member name="F:Duality.DualityApp.ExecutionContext.Launcher">
            <summary>
            Duality is being run by the launcher app or similar.
            </summary>
        </member>
        <member name="F:Duality.DualityApp.ExecutionContext.Editor">
            <summary>
            Duality runs inside the editor.
            </summary>
        </member>
        <member name="T:Duality.DualityAppData">
            <summary>
            Provides general information about this Duality application / game.
            </summary>
        </member>
        <member name="P:Duality.DualityAppData.AppName">
            <summary>
            [GET / SET] The name of your application / game. It will also be used as a window title by the launcher app.
            </summary>
        </member>
        <member name="P:Duality.DualityAppData.AuthorName">
            <summary>
            [GET / SET] The author name of your application. Might be your or your team's name or -nickname.
            </summary>
        </member>
        <member name="P:Duality.DualityAppData.WebsiteUrl">
            <summary>
            [GET / SET] The address of this game's official website or similar.
            </summary>
        </member>
        <member name="P:Duality.DualityAppData.Version">
            <summary>
            [GET / SET] The current application / game version.
            </summary>
        </member>
        <member name="P:Duality.DualityAppData.StartScene">
            <summary>
            [GET / SET] A reference to the start <see cref="T:Duality.Resources.Scene"/>. It is used by the launcher app to
            determine which Scene to load initially.
            </summary>
        </member>
        <member name="P:Duality.DualityAppData.SpeedOfSound">
            <summary>
            [GET / SET] The speed of sound. While this is technically a unitless value, you might assume something like "meters per second".
            It is used to calculate the doppler effect of <see cref="T:Duality.SoundInstance">SoundInstances</see> that are moving relative to the
            <see cref="T:Duality.Components.SoundListener"/>.
            </summary>
        </member>
        <member name="P:Duality.DualityAppData.SoundDopplerFactor">
            <summary>
            [GET / SET] A factor by which the strength of the doppler effect is multiplied.
            </summary>
        </member>
        <member name="T:Duality.DualityUserData">
            <summary>
            Provides information about user settings for this Duality application / game.
            It is persistent beyond installing or deleting this Duality game.
            </summary>
        </member>
        <member name="P:Duality.DualityUserData.UserName">
            <summary>
            [GET / SET] The player's name. This may be his main character's name or simply remain unused.
            </summary>
        </member>
        <member name="P:Duality.DualityUserData.GfxWidth">
            <summary>
            [GET / SET] Width of the game's display area.
            </summary>
        </member>
        <member name="P:Duality.DualityUserData.GfxHeight">
            <summary>
            [GET / SET] Height of the game's display area.
            </summary>
        </member>
        <member name="P:Duality.DualityUserData.GfxFullScreen">
            <summary>
            [GET / SET] Whether or not the game is launched in fullscreen mode. Not all display area sizes are available in fullscreen
            and some of them might look distorted when applied to a display they do not fit on. To be sure, you should let the user decide
            which screen resolution to use when in fullscreen.
            </summary>
        </member>
        <member name="P:Duality.DualityUserData.SfxEffectVol">
            <summary>
            [GET / SET] Volume factor of sound effects. This is applied automatically by the <see cref="T:Duality.SoundDevice"/> based on the <see cref="T:Duality.SoundType"/>.
            </summary>
        </member>
        <member name="P:Duality.DualityUserData.SfxSpeechVol">
            <summary>
            [GET / SET] Volume factor of speech / vocals. This is applied automatically by the <see cref="T:Duality.SoundDevice"/> based on the <see cref="T:Duality.SoundType"/>.
            </summary>
        </member>
        <member name="P:Duality.DualityUserData.SfxMusicVol">
            <summary>
            [GET / SET] Volume factor of music. This is applied automatically by the <see cref="T:Duality.SoundDevice"/> based on the <see cref="T:Duality.SoundType"/>.
            </summary>
        </member>
        <member name="P:Duality.DualityUserData.SfxMasterVol">
            <summary>
            [GET / SET] Volume master factor for sound in general. This is applied automatically by the <see cref="T:Duality.SoundDevice"/>.
            </summary>
        </member>
        <member name="T:Duality.DualityMetaData">
            <summary>
            Provides custom information about the Duality environment in which this application / game runs.
            It is persistent beyond installing or deleting a specific Duality game and is shared among all Duality
            games. Developers can use the DualityMetaData API to share player-related game information, such as
            stats, player descisions, tasks, progress, etc.
            </summary>
        </member>
        <member name="F:Duality.DualityMetaData.Separator">
            <summary>
            An array of valid path separators for meta data.
            </summary>
        </member>
        <member name="M:Duality.DualityMetaData.ReadValue(System.String)">
            <summary>
            Reads the specified key's string value. Keys are organized hierarchially and behave
            like file paths. Use the normal path separator chars to address keys in keys.
            </summary>
            <param name="key">The key that defines where to look for the value.</param>
            <returns>The string value associated with the specified key.</returns>
            <example>
            The following code reads the value of <c>MainNode / SubNode / SomeKey</c>:
            <code>
            string value = DualityApp.MetaData.ReadValue("MainNode/SubNode/SomeKey");
            </code>
            </example>
            <seealso cref="M:Duality.DualityMetaData.ReadValueAs``1(System.String,``0@)"/>
        </member>
        <member name="M:Duality.DualityMetaData.ReadValueAs``1(System.String,``0@)">
            <summary>
            Reads the specified key's string value and tries to parse it.
            </summary>
            <typeparam name="T">The desired value type</typeparam>
            <param name="key">The key that defines where to look for the value.</param>
            <param name="value">The parsed value based on the string that is associated with the specified key.</param>
            <returns>True, if successful, false if not.</returns>
            <seealso cref="M:Duality.DualityMetaData.ReadValue(System.String)"/>
            <example>
            The following code writes and reads an int value:
            <code>
            DualityApp.MetaData.WriteValue("SomeKey", 42);
            int value =  DualityApp.MetaData.ReadValueAs{int}("SomeKey");
            </code>
            </example>
        </member>
        <member name="M:Duality.DualityMetaData.ReadSubValues(System.String)">
            <summary>
            Reads all the <see cref="!:KeyValuePair&lt;T&gt;"/>s that are children of the specified key.
            </summary>
            <param name="key">The key of which to return child values.</param>
            <returns>An enumeration of <see cref="!:KeyValuePair&lt;T&gt;"/>s.</returns>
            <example>
            The following code creates a small hierarchy and reads a part of it out again:
            <code>
            DualityApp.MetaData["MainNode/SubNode/SomeKey"] = "42";
            DualityApp.MetaData["MainNode/SubNode/SomeOtherKey"] = "43";
            DualityApp.MetaData["MainNode/SubNode/SomeOtherKey2"] = "44";
            DualityApp.MetaData["MainNode/SubNode2"] = "Something";
            
            var pairs = DualityApp.MetaData.ReadSubValues("MainNode/SubNode");
            foreach (var pair in pairs)
            {
            	Log.Core.Write("{0}: {1}", pair.Key, pair.Value);
            }
            </code>
            The expected output is:
            <code>
            SomeKey: 42
            SomeOtherKey: 43
            SomeOtherKey2: 44
            </code>
            </example>
        </member>
        <member name="M:Duality.DualityMetaData.WriteValue(System.String,System.String)">
            <summary>
            Writes the specified string value to the specified key. Keys are organized hierarchially and behave
            like file paths. Use the normal path separator chars to address keys in keys.
            </summary>
            <param name="key">The key that defines to write the value to.</param>
            <param name="value">The value to write</param>
            <seealso cref="M:Duality.DualityMetaData.WriteValue``1(System.String,``0)"/>
        </member>
        <member name="M:Duality.DualityMetaData.WriteValue``1(System.String,``0)">
            <summary>
            Writes the specified value to the specified key. Keys are organized hierarchially and behave
            like file paths. Use the normal path separator chars to address keys in keys.
            </summary>
            <typeparam name="T">The value's Type.</typeparam>
            <param name="key">The key that defines to write the value to.</param>
            <param name="value">The value to write</param>
            <seealso cref="M:Duality.DualityMetaData.WriteValue(System.String,System.String)"/>
        </member>
        <member name="P:Duality.DualityMetaData.Item(System.String)">
            <summary>
            [GET / SET] The string value that is located at the specified key (path). Keys are organized hierarchially and behave
            like file paths. Use the normal path separator chars to address keys in keys.
            </summary>
            <param name="key">The key that defines where to look for the value.</param>
            <returns>The string value associated with the specified key.</returns>
            <example>
            The following code reads and writes the value of <c>MainNode / SubNode / SomeKey</c>:
            <code>
            string value = DualityApp.MetaData["MainNode/SubNode/SomeKey"];
            DualityApp.MetaData["MainNode/SubNode/SomeKey"] = "Some other value";
            </code>
            </example>
            <seealso cref="M:Duality.DualityMetaData.ReadValue(System.String)"/>
            <seealso cref="M:Duality.DualityMetaData.ReadValueAs``1(System.String,``0@)"/>
        </member>
        <member name="T:Duality.Component">
            <summary>
            Components are isolated logic units that can independently be added to and removed from <see cref="T:Duality.GameObject">GameObjects</see>.
            Each Component has a distinct purpose, thus it is not possible to add multiple Components of the same Type to one GameObject.
            Also, a Component may not belong to multiple GameObjects at once.
            </summary>
        </member>
        <member name="M:Duality.Component.Dispose">
            <summary>
            Disposes this Component. You usually don't need this - use <see cref="M:Duality.Component.DisposeLater"/> instead.
            </summary>
            <seealso cref="M:Duality.Component.DisposeLater"/>
        </member>
        <member name="M:Duality.Component.DisposeLater">
            <summary>
            Schedules this Component for disposal. It is guaranteed to be executed until the next update cycle starts.
            </summary>
            <seealso cref="M:Duality.Component.Dispose"/>
        </member>
        <member name="M:Duality.Component.Clone">
            <summary>
            Creates a deep copy of this Component.
            </summary>
            <returns>A reference to a newly created deep copy of this Component.</returns>
        </member>
        <member name="M:Duality.Component.CopyTo(Duality.Component)">
            <summary>
            Deep-copies this Components data to the specified target Component. If source and 
            target Component Type do not match, the operation will fail.
            </summary>
            <param name="target">The target Component to copy to.</param>
        </member>
        <member name="M:Duality.Component.OnCopyTo(Duality.Component)">
            <summary>
            This method Performs the <see cref="M:Duality.Component.CopyTo(Duality.Component)"/> operation for custom Component Types.
            It uses reflection to copy each field that is declared inside a Duality plugin automatically.
            However, you may override this method to specify your own behaviour or simply speed things
            up a bit by not using Reflection.
            </summary>
            <param name="target">The target Component where this Components data is copied to.</param>
        </member>
        <member name="M:Duality.Component.RequiresComponent(System.Type)">
            <summary>
            Returns whether this Component requires a Component of the specified Type.
            </summary>
            <param name="requiredType">The Component Type that might be required.</param>
            <returns>True, if there is a requirement, false if not</returns>
        </member>
        <member name="M:Duality.Component.IsComponentRequirementMet(Duality.Component)">
            <summary>
            Returns whether this objects Component requirement is met.
            </summary>
            <param name="evenWhenRemovingThis">If not null, the specified Component is assumed to be missing.</param>
            <returns>True, if the Component requirement is met, false if not.</returns>
        </member>
        <member name="M:Duality.Component.IsComponentRequirementMet(Duality.GameObject,System.Collections.Generic.IEnumerable{Duality.Component})">
            <summary>
            Returns whether this objects Component requirement is met assuming a different <see cref="P:Duality.Component.GameObj">parent GameObject</see>
            </summary>
            <param name="isMetInObj">The specified object is assumed as parent object.</param>
            <param name="whenAddingThose">If not null, the specified Components are assumed to be present in the specified parent object.</param>
            <returns>True, if the Component requirement is met, false if not.</returns>
        </member>
        <member name="M:Duality.Component.GetRequiredComponents">
            <summary>
            Returns all Component Types this Component requires.
            </summary>
            <returns>An array of required Component Types.</returns>
        </member>
        <member name="M:Duality.Component.RequiresComponent(System.Type,System.Type)">
            <summary>
            Returns whether a Component Type requires another Component Type to work properly.
            </summary>
            <param name="cmpType">The Component Type that might require another Component Type.</param>
            <param name="requiredType">The Component Type that might be required.</param>
            <returns>True, if there is a requirement, false if not</returns>
        </member>
        <member name="M:Duality.Component.GetRequiredComponents(System.Type)">
            <summary>
            Returns all required Component Types of a specified Component Type.
            </summary>
            <param name="cmpType">The Component Type that might require other Component Types.</param>
            <returns>An array of Component Types to require.</returns>
        </member>
        <member name="P:Duality.Component.Active">
            <summary>
            [GET / SET] Whether or not the Component is currently active. To return true,
            both the Component itsself and its parent GameObject need to be active.
            </summary>
            <seealso cref="P:Duality.Component.ActiveSingle"/>
        </member>
        <member name="P:Duality.Component.ActiveSingle">
            <summary>
            [GET / SET] Whether or not the Component is currently active. Unlike <see cref="P:Duality.Component.Active"/>,
            this property ignores parent activation states and depends only on this single Component.
            The scene graph and other Duality instances usually check <see cref="P:Duality.Component.Active"/>, not ActiveSingle.
            </summary>
            <seealso cref="P:Duality.Component.Active"/>
        </member>
        <member name="P:Duality.Component.Disposed">
            <summary>
            [GET] Returns whether this Component has been disposed. Disposed Components are not to be used and should
            be treated specifically or as null references by your code.
            </summary>
        </member>
        <member name="P:Duality.Component.GameObj">
            <summary>
            [GET / SET] The <see cref="T:Duality.GameObject"/> to which this Component belongs.
            </summary>
        </member>
        <member name="T:Duality.Component.InitContext">
            <summary>
            Describes the kind of initialization that can be performed on a Component
            </summary>
        </member>
        <member name="F:Duality.Component.InitContext.Saved">
            <summary>
            A saving process has just finished.
            </summary>
        </member>
        <member name="F:Duality.Component.InitContext.Loaded">
            <summary>
            The Component has been fully loaded.
            </summary>
        </member>
        <member name="F:Duality.Component.InitContext.Activate">
            <summary>
            The Component is being activated. This can be the result of <see cref="P:Duality.Component.Active">activating</see> it,
            <see cref="P:Duality.GameObject.Active">activating</see> its GameObject, adding itsself or its GameObject
            to the <see cref="P:Duality.Resources.Scene.Current">current Scene</see> or entering a <see cref="T:Duality.Resources.Scene"/>
            in which this Component is registered.
            </summary>
        </member>
        <member name="F:Duality.Component.InitContext.AddToGameObject">
            <summary>
            The Component has just been added to a GameObject
            </summary>
        </member>
        <member name="T:Duality.Component.ShutdownContext">
            <summary>
            Describes the kind of shutdown that can be performed on a Component
            </summary>
        </member>
        <member name="F:Duality.Component.ShutdownContext.Saving">
            <summary>
            A saving process is about to start
            </summary>
        </member>
        <member name="F:Duality.Component.ShutdownContext.Deactivate">
            <summary>
            The Component has been deactivated. This can be the result of <see cref="P:Duality.Component.Active">deactivating</see> it,
            <see cref="P:Duality.GameObject.Active">deactivating</see> its GameObject, removing itsself or its GameObject
            from the <see cref="P:Duality.Resources.Scene.Current">current Scene</see> or leaving a <see cref="T:Duality.Resources.Scene"/>
            in which this Component is registered.
            </summary>
        </member>
        <member name="F:Duality.Component.ShutdownContext.RemovingFromGameObject">
            <summary>
            The Component is being removed from its GameObject.
            </summary>
        </member>
        <member name="T:Duality.ICmpUpdatable">
            <summary>
            Implement this interface in <see cref="T:Duality.Component">Components</see> that require per-frame updates.
            </summary>
        </member>
        <member name="M:Duality.ICmpUpdatable.OnUpdate">
            <summary>
            Called once per frame in order to update the Component.
            </summary>
        </member>
        <member name="T:Duality.ICmpEditorUpdatable">
            <summary>
            Implement this interface in C<see cref="T:Duality.Component">Components</see> that require per-frame updates in the editor.
            </summary>
        </member>
        <member name="M:Duality.ICmpEditorUpdatable.OnUpdate">
            <summary>
            Called once per frame in order to update the Component in the editor.
            </summary>
        </member>
        <member name="T:Duality.ICmpGameObjectListener">
            <summary>
            Implement this interface in <see cref="T:Duality.Component">Components</see> that require notification if the location of 
            their GameObject inside the scene graph changes.
            </summary>
        </member>
        <member name="M:Duality.ICmpGameObjectListener.OnGameObjectParentChanged(Duality.GameObject,Duality.GameObject)">
            <summary>
            Called whenever this Components GameObjects <see cref="P:Duality.GameObject.Parent"/> has changed.
            </summary>
            <param name="oldParent">The old parent object.</param>
            <param name="newParent">The new parent object.</param>
        </member>
        <member name="T:Duality.ICmpInitializable">
            <summary>
            Implement this interface in <see cref="T:Duality.Component">Components</see> that require specific init and shutdown logic.
            </summary>
        </member>
        <member name="M:Duality.ICmpInitializable.OnInit(Duality.Component.InitContext)">
            <summary>
            Called in order to initialize the Component in a specific way.
            </summary>
            <param name="context">The kind of initialization that is intended.</param>
        </member>
        <member name="M:Duality.ICmpInitializable.OnShutdown(Duality.Component.ShutdownContext)">
            <summary>
            Called in order to shutdown the Component in a specific way.
            </summary>
            <param name="context">The kind of shutdown that is intended.</param>
        </member>
        <member name="T:Duality.ICmpComponentListener">
            <summary>
            Implement this interface in <see cref="T:Duality.Component">Components</see> that require notifications for other Components 
            being added or removed at the same GameObject.
            </summary>
        </member>
        <member name="M:Duality.ICmpComponentListener.OnComponentAdded(Duality.Component)">
            <summary>
            Called whenever another Component has been added to this Components GameObject.
            </summary>
            <param name="comp">The Component that has been added</param>
        </member>
        <member name="M:Duality.ICmpComponentListener.OnComponentRemoving(Duality.Component)">
            <summary>
            Called whenever another Component is being removed from this Components GameObject.
            </summary>
            <param name="comp">The Component that is being removed</param>
        </member>
        <member name="T:Duality.ICmpScreenOverlayRenderer">
            <summary>
            Implement this interface in <see cref="T:Duality.Component">Components</see> that are able to render a screen overlay. 
            This is useful for HUD, GUI or debug rendering. Screen overlays are rendered after both regular rendering and 
            postprocessing. Unlike regular <see cref="T:Duality.Components.Renderer">Renderers</see> they do not operate in 
            <see cref="T:Duality.Components.Camera"/>-local space but screen space.
            </summary>
        </member>
        <member name="M:Duality.ICmpScreenOverlayRenderer.IsVisible(Duality.IDrawDevice)">
            <summary>
            Determines whether or not this screen overlay is visible to the specified <see cref="T:Duality.IDrawDevice"/>.
            </summary>
            <param name="device">The <see cref="T:Duality.IDrawDevice"/> to which visibility is determined.</param>
            <returns>True, if this screen overlay is visible to the <see cref="T:Duality.IDrawDevice"/>. False, if not.</returns>
        </member>
        <member name="M:Duality.ICmpScreenOverlayRenderer.DrawOverlay(Duality.IDrawDevice)">
            <summary>
            Draws the screen overlay.
            </summary>
            <param name="device">The <see cref="T:Duality.IDrawDevice"/> to which the screen overlay is drawn.</param>
        </member>
        <member name="T:Duality.RequiredComponentAttribute">
            <summary>
            This attribute indicates a <see cref="T:Duality.Component">Components</see> requirement for another Component
            of a specific Type, that is attached to the same <see cref="T:Duality.GameObject"/>.
            </summary>
            <example>
            The following code uses a RequiredComponentAttribute to indicate that a <see cref="T:Duality.Components.SoundEmitter"/>
            always needs a <see cref="T:Duality.Components.Transform"/> available as well.
            <code>
            [RequiredComponent(typeof(Transform))]
            public sealed class SoundEmitter : Component, ICmpUpdatable, ICmpInitializable
            {
            	// ...
            }
            </code>
            </example>
        </member>
        <member name="P:Duality.RequiredComponentAttribute.RequiredComponentType">
            <summary>
            The Component Type that is required by this Component.
            </summary>
        </member>
        <member name="M:Duality.SerializationHelper.IsSafeAssignType(System.Type)">
            <summary>
            Returns whether the specified type may just be assigned in a clone operation (even if deep)
            instead of being investigated further.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.SerializationHelper.DeepResetReferences(System.Object,System.Type[])">
            <summary>
            Resets all references of object types assignable to any of the specified. typeof(Component) will
            result in all references to any kind of Component to be cleared / set null.
            </summary>
            <param name="instance"></param>
            <param name="resetTypes"></param>
        </member>
        <member name="M:Duality.SerializationHelper.DeepResolveTypeReferences(System.Object,System.Runtime.Serialization.SerializationBinder)">
            <summary>
            Re-resolves all MemberInfo references using current Type information including Plugin data. When reloading
            Plugins, calling this method for an object will re-map its previously reflected MemberInfo references to
            the newly loaded plugin Assemblies equivalent
            </summary>
            <param name="instance"></param>
        </member>
        <member name="T:Duality.Serialization.BinaryFormatterBase">
            <summary>
            Base class for Dualitys binary serializers.
            </summary>
        </member>
        <member name="F:Duality.Serialization.BinaryFormatterBase.HeaderId">
            <summary>
            Binary serialization header id. 
            </summary>
        </member>
        <member name="F:Duality.Serialization.BinaryFormatterBase.Version">
            <summary>
            Binary serialization version number.
            </summary>
        </member>
        <member name="F:Duality.Serialization.BinaryFormatterBase.writer">
            <summary>
            The <see cref="T:System.IO.BinaryWriter"/> that is used for serialization.
            </summary>
        </member>
        <member name="F:Duality.Serialization.BinaryFormatterBase.reader">
            <summary>
            The <see cref="T:System.IO.BinaryReader"/> that is used for deserialization.
            </summary>
        </member>
        <member name="F:Duality.Serialization.BinaryFormatterBase.log">
            <summary>
            The de/serialization <see cref="T:Duality.Log"/>.
            </summary>
        </member>
        <member name="F:Duality.Serialization.BinaryFormatterBase.idCounter">
            <summary>
            A counter for the number of ids that have been used during the current <see cref="T:Duality.Serialization.BinaryFormatterBase.Operation"/>.
            </summary>
        </member>
        <member name="F:Duality.Serialization.BinaryFormatterBase.objRefIdMap">
            <summary>
            A dictionary that maps objects to their object ids.
            </summary>
        </member>
        <member name="F:Duality.Serialization.BinaryFormatterBase.idObjRefMap">
            <summary>
            A dictionary that maps object ids to their objects.
            </summary>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.ReadObject">
            <summary>
            Reads an object including all referenced objects using the <see cref="P:Duality.Serialization.BinaryFormatterBase.ReadTarget"/>.
            </summary>
            <returns>The object that has been read.</returns>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.ReadObjectBody(Duality.Serialization.DataType)">
            <summary>
            Reads the body of an object.
            </summary>
            <param name="dataType">The <see cref="T:Duality.Serialization.DataType"/> that is assumed.</param>
            <returns>The object that has been read.</returns>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.GetNullObject">
            <summary>
            Returns an object indicating a "null" value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.IsTypeDataLayoutCached(System.String)">
            <summary>
            Returns whether the <see cref="T:Duality.Serialization.TypeDataLayout"/> for the specified <see cref="T:System.Type"/> is
            already present in the binary serializers internal cache.
            </summary>
            <param name="t">A string referring to the <see cref="T:System.Type"/> that is described by the 
            <see cref="T:Duality.Serialization.TypeDataLayout"/> in question.</param>
            <returns>True, if the <see cref="T:Duality.Serialization.TypeDataLayout"/> is already cached, false if not.</returns>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.ReadTypeDataLayout(System.Type)">
            <summary>
            Reads the <see cref="T:Duality.Serialization.TypeDataLayout"/> describing the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="t">The <see cref="!:Systen.Type"/> of which to read the <see cref="T:Duality.Serialization.TypeDataLayout"/>.</param>
            <returns>A <see cref="T:Duality.Serialization.TypeDataLayout"/> describing the specified <see cref="T:System.Type"/></returns>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.ReadTypeDataLayout(System.String)">
            <summary>
            Reads the <see cref="T:Duality.Serialization.TypeDataLayout"/> describing the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="t">A string referring to the <see cref="!:Systen.Type"/> of which to read the <see cref="T:Duality.Serialization.TypeDataLayout"/>.</param>
            <returns>A <see cref="T:Duality.Serialization.TypeDataLayout"/> describing the specified <see cref="T:System.Type"/></returns>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.ReadFormatterHeader">
            <summary>
            Reads the binary serialization header.
            </summary>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.ReadPrimitive(Duality.Serialization.DataType)">
            <summary>
            Reads a single primitive value, assuming the specified <see cref="T:Duality.Serialization.DataType"/>.
            </summary>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.ReadString">
            <summary>
            Reads a single string value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.ReadArrayData(System.Boolean[])">
            <summary>
            Reads a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.ReadArrayData(System.Byte[])">
            <summary>
            Reads a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.ReadArrayData(System.SByte[])">
            <summary>
            Reads a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.ReadArrayData(System.Int16[])">
            <summary>
            Reads a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.ReadArrayData(System.UInt16[])">
            <summary>
            Reads a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.ReadArrayData(System.Int32[])">
            <summary>
            Reads a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.ReadArrayData(System.UInt32[])">
            <summary>
            Reads a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.ReadArrayData(System.Int64[])">
            <summary>
            Reads a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.ReadArrayData(System.UInt64[])">
            <summary>
            Reads a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.ReadArrayData(System.Single[])">
            <summary>
            Reads a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.ReadArrayData(System.Double[])">
            <summary>
            Reads a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.ReadArrayData(System.Decimal[])">
            <summary>
            Reads a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.ReadArrayData(System.Char[])">
            <summary>
            Reads a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.ReadArrayData(System.String[])">
            <summary>
            Reads a string array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.WriteObject(System.Object)">
            <summary>
            Writes the specified object including all referenced objects using the <see cref="P:Duality.Serialization.BinaryFormatterBase.WriteTarget"/>.
            </summary>
            <param name="obj">The object to write.</param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.GetWriteObjectData(System.Object,Duality.Serialization.SerializeType@,Duality.Serialization.DataType@,System.UInt32@)">
            <summary>
            Determines internal data for writing a given object.
            </summary>
            <param name="obj">The object to write</param>
            <param name="objSerializeType">The <see cref="T:Duality.Serialization.SerializeType"/> that describes the specified object.</param>
            <param name="dataType">The <see cref="T:Duality.Serialization.DataType"/> that is used for writing the specified object.</param>
            <param name="objId">An object id that is assigned to the specified object.</param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.WriteObjectBody(Duality.Serialization.DataType,System.Object,Duality.Serialization.SerializeType,System.UInt32)">
            <summary>
            Writes the body of a given object.
            </summary>
            <param name="dataType">The <see cref="T:Duality.Serialization.DataType"/> as which the object will be written.</param>
            <param name="obj">The object to be written.</param>
            <param name="objSerializeType">The <see cref="T:Duality.Serialization.SerializeType"/> that describes the specified object.</param>
            <param name="objId">An object id that is assigned to the specified object.</param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.WriteFormatterHeader">
            <summary>
            Writes the binary serialization header.
            </summary>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.WriteTypeDataLayout(Duality.Serialization.SerializeType)">
            <summary>
            Writes the <see cref="T:Duality.Serialization.TypeDataLayout"/> describing the specified <see cref="T:Duality.Serialization.SerializeType"/>.
            Note that this method does not write redundant layout data - if the specified TypeDataLayout has already been written withing the same
            operation, a back-reference is written instead.
            </summary>
            <param name="objSerializeType">
            The <see cref="T:Duality.Serialization.SerializeType"/> of which to write the <see cref="T:Duality.Serialization.TypeDataLayout"/>
            </param>
            <seealso cref="M:Duality.Serialization.BinaryFormatterBase.WriteTypeDataLayout(System.String)"/>
            <seealso cref="M:Duality.Serialization.BinaryFormatterBase.WriteTypeDataLayout(Duality.Serialization.TypeDataLayout,System.String)"/>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.WriteTypeDataLayout(System.String)">
            <summary>
            Writes the <see cref="T:Duality.Serialization.TypeDataLayout"/> describing the specified <see cref="T:Duality.Serialization.SerializeType"/>.
            Note that this method does not write redundant layout data - if the specified TypeDataLayout has already been written withing the same
            operation, a back-reference is written instead.
            </summary>
            <param name="typeString">
            A string referring to the <see cref="T:System.Type"/> of which to write the <see cref="T:Duality.Serialization.TypeDataLayout"/>.
            </param>
            <seealso cref="M:Duality.Serialization.BinaryFormatterBase.WriteTypeDataLayout(Duality.Serialization.SerializeType)"/>
            <seealso cref="M:Duality.Serialization.BinaryFormatterBase.WriteTypeDataLayout(Duality.Serialization.TypeDataLayout,System.String)"/>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.WriteTypeDataLayout(Duality.Serialization.TypeDataLayout,System.String)">
            <summary>
            Writes the specified <see cref="T:Duality.Serialization.TypeDataLayout"/> describing the <see cref="T:System.Type"/> referred to by
            the given <see cref="M:Duality.ReflectionHelper.GetTypeName(System.Type,Duality.TypeNameFormat)">type string</see>. Doesn't care about redundant data, writes always.
            </summary>
            <param name="layout">The <see cref="T:Duality.Serialization.TypeDataLayout"/> to write.</param>
            <param name="typeString">
            The <see cref="M:Duality.ReflectionHelper.GetTypeName(System.Type,Duality.TypeNameFormat)">type string</see> that refers to the <see cref="T:System.Type"/> that
            is described by the specified <see cref="T:Duality.Serialization.TypeDataLayout"/>.
            </param>
            <seealso cref="M:Duality.Serialization.BinaryFormatterBase.WriteTypeDataLayout(System.String)"/>
            <seealso cref="M:Duality.Serialization.BinaryFormatterBase.WriteTypeDataLayout(Duality.Serialization.SerializeType)"/>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.WritePrimitive(System.Object)">
            <summary>
            Writes a single primitive value.
            </summary>
            <param name="obj">The primitive value to write.</param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.WriteString(System.String)">
            <summary>
            Writes a single string value.
            </summary>
            <param name="obj">The string value to write.</param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.WriteArrayData(System.Boolean[])">
            <summary>
            Writes a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.WriteArrayData(System.Byte[])">
            <summary>
            Writes a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.WriteArrayData(System.SByte[])">
            <summary>
            Writes a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.WriteArrayData(System.Int16[])">
            <summary>
            Writes a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.WriteArrayData(System.UInt16[])">
            <summary>
            Writes a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.WriteArrayData(System.Int32[])">
            <summary>
            Writes a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.WriteArrayData(System.UInt32[])">
            <summary>
            Writes a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.WriteArrayData(System.Int64[])">
            <summary>
            Writes a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.WriteArrayData(System.UInt64[])">
            <summary>
            Writes a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.WriteArrayData(System.Single[])">
            <summary>
            Writes a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.WriteArrayData(System.Double[])">
            <summary>
            Writes a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.WriteArrayData(System.Decimal[])">
            <summary>
            Writes a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.WriteArrayData(System.Char[])">
            <summary>
            Writes a primitive array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.WriteArrayData(System.String[])">
            <summary>
            Writes a string array.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.WriteDataType(Duality.Serialization.DataType)">
            <summary>
            Writes a <see cref="T:Duality.Serialization.DataType"/>.
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.ReadDataType">
            <summary>
            Reads a <see cref="T:Duality.Serialization.DataType"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.WritePushOffset">
            <summary>
            Writes the begin of a new "safe zone", usually encapsulating a data set.
            If any error occurs within a safe zone, it is guaranteed to not affect any other
            safe zone, although the damaged safe zone itsself might be unusable. In general,
            a safe zone prevents an error from affecting any of the zones surroundings.
            Safe zones may also be nested.
            </summary>
            <seealso cref="M:Duality.Serialization.BinaryFormatterBase.WritePopOffset"/>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.WritePopOffset">
            <summary>
            Writes the end of the most recent "safe zone", usually encapsulating a data set.
            If any error occurs within a safe zone, it is guaranteed to not affect any other
            safe zone, although the damaged safe zone itsself might be unusable. In general,
            a safe zone prevents an error from affecting any of the zones surroundings.
            Safe zones may also be nested.
            </summary>
            <seealso cref="M:Duality.Serialization.BinaryFormatterBase.WritePushOffset"/>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.ClearStreamSpecificData">
            <summary>
            Clears all <see cref="T:System.IO.Stream"/>- or <see cref="T:Duality.Serialization.BinaryFormatterBase.Operation"/>-specific cache data.
            </summary>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.GetIdFromObject(System.Object)">
            <summary>
            Returns the id that is assigned to the specified object. Assigns one, if
            there is none yet.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.LogCustomSerializationError(System.UInt32,System.Type,System.Exception)">
            <summary>
            Logs an error that occured during <see cref="T:Duality.Serialization.ISerializable">custom serialization</see>.
            </summary>
            <param name="objId">The object id of the affected object.</param>
            <param name="serializeType">The <see cref="T:System.Type"/> of the affected object.</param>
            <param name="e">The <see cref="T:System.Exception"/> that occured.</param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.LogCustomDeserializationError(System.UInt32,System.Type,System.Exception)">
            <summary>
            Logs an error that occured during <see cref="T:Duality.Serialization.ISerializable">custom deserialization</see>.
            </summary>
            <param name="objId">The object id of the affected object.</param>
            <param name="serializeType">The <see cref="T:System.Type"/> of the affected object.</param>
            <param name="e">The <see cref="T:System.Exception"/> that occured.</param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.LogCantResolveTypeError(System.UInt32,System.String)">
            <summary>
            Logs an error that occured trying to resolve a <see cref="T:System.Type"/> by its <see cref="M:Duality.ReflectionHelper.GetTypeName(System.Type,Duality.TypeNameFormat)">type string</see>.
            </summary>
            <param name="objId">The object id of the affected object.</param>
            <param name="typeString">The <see cref="M:Duality.ReflectionHelper.GetTypeName(System.Type,Duality.TypeNameFormat)">type string</see> that couldn't be resolved.</param>
        </member>
        <member name="P:Duality.Serialization.BinaryFormatterBase.WriteTarget">
            <summary>
            [GET / SET] The <see cref="T:System.IO.BinaryWriter"/> that is used for serialization.
            </summary>
        </member>
        <member name="P:Duality.Serialization.BinaryFormatterBase.ReadTarget">
            <summary>
            [GET / SET] The <see cref="T:System.IO.BinaryReader"/> that is used for deserialization.
            </summary>
        </member>
        <member name="P:Duality.Serialization.BinaryFormatterBase.SerializationLog">
            <summary>
            [GET / SET] The de/serialization <see cref="T:Duality.Log"/>.
            </summary>
        </member>
        <member name="P:Duality.Serialization.BinaryFormatterBase.CanWrite">
            <summary>
            [GET] Can this binary serializer write data?
            </summary>
        </member>
        <member name="P:Duality.Serialization.BinaryFormatterBase.CanRead">
            <summary>
            [GET] Can this binary serializer read data?
            </summary>
        </member>
        <member name="P:Duality.Serialization.BinaryFormatterBase.Disposed">
            <summary>
            [GET] Whether this binary serializer has been disposed. A disposed object cannot be used anymore.
            </summary>
        </member>
        <member name="T:Duality.Serialization.BinaryFormatterBase.CustomSerialIO">
            <summary>
            Buffer object for <see cref="T:Duality.Serialization.ISerializable">custom de/serialization</see>, 
            providing read and write functionality.
            </summary>
        </member>
        <member name="T:Duality.Serialization.IDataReader">
            <summary>
            Provides reading capabilities for serialization purposes
            </summary>
        </member>
        <member name="M:Duality.Serialization.IDataReader.ReadValue(System.String)">
            <summary>
            Reads the value that is associated with the specified name.
            </summary>
            <param name="name">The name that is used for retrieving the value.</param>
            <returns>The value that has been read using the given name.</returns>
            <seealso cref="M:Duality.Serialization.IDataReader.ReadValue``1(System.String)"/>
            <seealso cref="M:Duality.Serialization.IDataReader.ReadValue``1(System.String,``0@)"/>
        </member>
        <member name="M:Duality.Serialization.IDataReader.ReadValue``1(System.String)">
            <summary>
            Reads the value that is associated with the specified name.
            </summary>
            <typeparam name="T">The expected value type.</typeparam>
            <param name="name">The name that is used for retrieving the value.</param>
            <returns>The value that has been read and cast using the given name and type.</returns>
            <seealso cref="M:Duality.Serialization.IDataReader.ReadValue(System.String)"/>
            <seealso cref="M:Duality.Serialization.IDataReader.ReadValue``1(System.String,``0@)"/>
        </member>
        <member name="M:Duality.Serialization.IDataReader.ReadValue``1(System.String,``0@)">
            <summary>
            Reads the value that is associated with the specified name.
            </summary>
            <typeparam name="T">The expected value type.</typeparam>
            <param name="name">The name that is used for retrieving the value.</param>
            <param name="value">The value that has been read and cast using the given name and type.</param>
            <seealso cref="M:Duality.Serialization.IDataReader.ReadValue(System.String)"/>
            <seealso cref="M:Duality.Serialization.IDataReader.ReadValue``1(System.String)"/>
        </member>
        <member name="T:Duality.Serialization.IDataWriter">
            <summary>
            Provides writing capabilities for serialization purposes
            </summary>
        </member>
        <member name="M:Duality.Serialization.IDataWriter.WriteValue(System.String,System.Object)">
            <summary>
            Writes the specified name and value.
            </summary>
            <param name="name">
            The name to which the written value is mapped. 
            May, for example, be the name of a <see cref="T:System.Reflection.FieldInfo">Field</see>
            to which the written value belongs, but there are no naming restrictions, except that one name can't be used twice.
            </param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.CustomSerialIO.Serialize(Duality.Serialization.BinaryFormatterBase)">
            <summary>
            Writes the contained data to the specified serializer.
            </summary>
            <param name="formatter">The serializer to write data to.</param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.CustomSerialIO.Deserialize(Duality.Serialization.BinaryFormatterBase)">
            <summary>
            Reads data from the specified serializer
            </summary>
            <param name="formatter">The serializer to read data from.</param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.CustomSerialIO.Clear">
            <summary>
            Clears all contained data.
            </summary>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.CustomSerialIO.WriteValue(System.String,System.Object)">
            <summary>
            Writes the specified name and value.
            </summary>
            <param name="name">
            The name to which the written value is mapped. 
            May, for example, be the name of a <see cref="T:System.Reflection.FieldInfo">Field</see>
            to which the written value belongs, but there are no naming restrictions, except that one name can't be used twice.
            </param>
            <param name="value">The value to write.</param>
            <seealso cref="T:Duality.Serialization.IDataWriter"/>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.CustomSerialIO.ReadValue(System.String)">
            <summary>
            Reads the value that is associated with the specified name.
            </summary>
            <param name="name">The name that is used for retrieving the value.</param>
            <returns>The value that has been read using the given name.</returns>
            <seealso cref="T:Duality.Serialization.IDataReader"/>
            <seealso cref="M:Duality.Serialization.BinaryFormatterBase.CustomSerialIO.ReadValue``1(System.String)"/>
            <seealso cref="M:Duality.Serialization.BinaryFormatterBase.CustomSerialIO.ReadValue``1(System.String,``0@)"/>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.CustomSerialIO.ReadValue``1(System.String)">
            <summary>
            Reads the value that is associated with the specified name.
            </summary>
            <typeparam name="T">The expected value type.</typeparam>
            <param name="name">The name that is used for retrieving the value.</param>
            <returns>The value that has been read and cast using the given name and type.</returns>
            <seealso cref="T:Duality.Serialization.IDataReader"/>
            <seealso cref="M:Duality.Serialization.BinaryFormatterBase.CustomSerialIO.ReadValue(System.String)"/>
            <seealso cref="M:Duality.Serialization.BinaryFormatterBase.CustomSerialIO.ReadValue``1(System.String,``0@)"/>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatterBase.CustomSerialIO.ReadValue``1(System.String,``0@)">
            <summary>
            Reads the value that is associated with the specified name.
            </summary>
            <typeparam name="T">The expected value type.</typeparam>
            <param name="name">The name that is used for retrieving the value.</param>
            <param name="value">The value that has been read and cast using the given name and type.</param>
            <seealso cref="T:Duality.Serialization.IDataReader"/>
            <seealso cref="M:Duality.Serialization.BinaryFormatterBase.CustomSerialIO.ReadValue(System.String)"/>
            <seealso cref="M:Duality.Serialization.BinaryFormatterBase.CustomSerialIO.ReadValue``1(System.String)"/>
        </member>
        <member name="P:Duality.Serialization.BinaryFormatterBase.CustomSerialIO.Values">
            <summary>
            [GET] Enumerates all currently stored <see cref="T:System.Collections.Generic.KeyValuePair`2">KeyValuePairs</see>.
            </summary>
        </member>
        <member name="T:Duality.Serialization.BinaryFormatterBase.Operation">
            <summary>
            Operations, the binary serializer is able to perform.
            </summary>
        </member>
        <member name="F:Duality.Serialization.BinaryFormatterBase.Operation.None">
            <summary>
            No operation.
            </summary>
        </member>
        <member name="F:Duality.Serialization.BinaryFormatterBase.Operation.Read">
            <summary>
            Read a dataset / object
            </summary>
        </member>
        <member name="F:Duality.Serialization.BinaryFormatterBase.Operation.Write">
            <summary>
            Write a dataset / object
            </summary>
        </member>
        <member name="T:Duality.Resource">
            <summary>
            The abstract Resource class is inherited by any kind of Duality content. Instances of it or one of its subclasses
            are usually handled wrapped inside a <see cref="T:Duality.ContentRef`1"/> and requested from the <see cref="T:Duality.ContentProvider"/>.
            </summary>
            <seealso cref="T:Duality.ContentRef`1"/>
            <seealso cref="T:Duality.ContentProvider"/>
        </member>
        <member name="F:Duality.Resource.FileExt">
            <summary>
            A Resource file's extension.
            </summary>
        </member>
        <member name="M:Duality.Resource.Save(System.String)">
            <summary>
            Saves the Resource to the specified path. If it has been generated at runtime, i.e. has
            not been loaded from file before, this will set the Resources <see cref="P:Duality.Resource.Path"/> Property.
            </summary>
            <param name="saveAsPath">The path to which this Resource is saved to. If null, the Resources <see cref="P:Duality.Resource.Path"/> is used as destination.</param>
        </member>
        <member name="M:Duality.Resource.Save(System.IO.Stream)">
            <summary>
            Saves the Resource to the specified stream.
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Duality.Resource.Clone">
            <summary>
            Creates a deep copy of this Resource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duality.Resource.CopyTo(Duality.Resource)">
            <summary>
            Deep-copies this Resource to the specified target Resource. The target Resource's Type must
            match this Resource's Type.
            </summary>
            <param name="r">The target Resource to copy this Resource's data to</param>
        </member>
        <member name="M:Duality.Resource.OnSaving">
            <summary>
            Called when this Resource is now beginning to be saved.
            </summary>
        </member>
        <member name="M:Duality.Resource.OnSaved">
            <summary>
            Called when this Resource has just been saved.
            </summary>
        </member>
        <member name="M:Duality.Resource.OnLoaded">
            <summary>
            Called when this Resource has just been loaded.
            </summary>
        </member>
        <member name="M:Duality.Resource.Dispose">
            <summary>
            Disposes the Resource.
            </summary>
        </member>
        <member name="M:Duality.Resource.OnDisposing(System.Boolean)">
            <summary>
            Called when beginning to dispose the Resource.
            </summary>
            <param name="manually"></param>
        </member>
        <member name="M:Duality.Resource.GetContentRef">
            <summary>
            Creates a <see cref="T:Duality.ContentRef`1"/> referring to this Resource.
            </summary>
            <returns>A <see cref="T:Duality.ContentRef`1"/> referring to this Resource.</returns>
        </member>
        <member name="M:Duality.Resource.LoadResource``1(System.String)">
            <summary>
            Loads the Resource that is located at the specified path. You usually don't need this method. 
            Consider requesting the Resource from the <see cref="T:Duality.ContentProvider"/> instead.
            </summary>
            <typeparam name="T">
            Desired Type of the returned reference. Does not affect the loaded Resource in any way - it is simply returned as T.
            Results in returning null if the loaded Resource's Type isn't assignable to T.
            </typeparam>
            <param name="path">The path to load the Resource from.</param>
            <returns>The Resource that has been loaded.</returns>
        </member>
        <member name="M:Duality.Resource.LoadResource``1(System.IO.Stream,System.String)">
            <summary>
            Loads the Resource from the specified <see cref="T:System.IO.Stream"/>. You usually don't need this method. 
            Consider requesting the Resource from the <see cref="T:Duality.ContentProvider"/> instead.
            </summary>
            <typeparam name="T">
            Desired Type of the returned reference. Does not affect the loaded Resource in any way - it is simply returned as T.
            Results in returning null if the loaded Resource's Type isn't assignable to T.
            </typeparam>
            <param name="str">The stream to load the Resource from.</param>
            <param name="resPath">The path that is assumed as the loaded Resource's origin.</param>
            <returns>The Resource that has been loaded.</returns>
        </member>
        <member name="M:Duality.Resource.GetFileExtByType(System.Type)">
            <summary>
            Returns the Resource file extension for a specific Resource Type.
            </summary>
            <param name="resType">The Resource Type to return the file extension from.</param>
            <returns>The specified Resource Type's file extension.</returns>
        </member>
        <member name="M:Duality.Resource.GetTypeByFileName(System.String)">
            <summary>
            Returns the Resource Type that is associated with the specified file, based on its extension.
            </summary>
            <param name="filePath">Path to the file of whichs Resource Type will be returned</param>
            <returns>The Resource Type of the specified file</returns>
        </member>
        <member name="P:Duality.Resource.Disposed">
            <summary>
            [GET] Returns whether the Resource has been disposed. 
            Disposed Resources are not to be used and are treated the same as a null value by most methods.
            </summary>
        </member>
        <member name="P:Duality.Resource.Path">
            <summary>
            [GET] The path where this Resource has been originally loaded from or was first saved to.
            It is also the path under which this Resource is registered at the ContentProvider.
            </summary>
        </member>
        <member name="T:Duality.Serialization.Surrogates.DictionarySurrogate">
            <summary>
            De/Serializes a <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
        </member>
        <member name="T:Duality.Serialization.Surrogate`1">
            <summary>
            Default base class for <see cref="T:Duality.Serialization.ISurrogate">Serialization Surrogates</see>. It implements both
            <see cref="T:Duality.Serialization.ISurrogate"/> and <see cref="T:Duality.Serialization.ISerializable"/>, thus being able to fully perform de/serialization
            of a designated object type.
            </summary>
            <typeparam name="T">
            The base <see cref="T:System.Type"/> of objects this surrogate can replace.
            </typeparam>
        </member>
        <member name="T:Duality.Serialization.ISurrogate">
            <summary>
            De/Serializes an object instead of letting it de/serialize itsself or using a Reflection-driven approach.
            </summary>
            <seealso cref="T:Duality.Serialization.Surrogate`1"/>
        </member>
        <member name="M:Duality.Serialization.ISurrogate.MatchesType(System.Type)">
            <summary>
            Checks whether this surrogate is able to de/serialize the specified object type.
            </summary>
            <param name="t">The <see cref="T:System.Type"/> of the object in question.</param>
            <returns>True, if this surrogate is able to de/serialize such object, false if not.</returns>
        </member>
        <member name="M:Duality.Serialization.ISurrogate.WriteConstructorData(Duality.Serialization.IDataWriter)">
            <summary>
            Writes constructor data for the replaced object. This will be used in a deserialization pre-pass 
            for constructing the object. Note that constructor data may not contain any object references to
            itsself, since it the object doesn't exist yet at this deserialization stage.
            </summary>
            <param name="writer">The <see cref="T:Duality.Serialization.IDataWriter"/> to serialize constructor data to.</param>
        </member>
        <member name="M:Duality.Serialization.ISurrogate.ConstructObject(Duality.Serialization.IDataReader,System.Type)">
            <summary>
            Constructs an object in deserialization based on the constructor data that has been written in
            serialization using <see cref="M:Duality.Serialization.ISurrogate.WriteConstructorData(Duality.Serialization.IDataWriter)"/>.
            </summary>
            <param name="reader">The <see cref="T:Duality.Serialization.IDataReader"/> to deserialize constructor data from.</param>
            <param name="objType">The <see cref="T:System.Type"/> of the object to create.</param>
            <returns>An instance of the specified <see cref="T:System.Type"/> that has been constructed using the provided data.</returns>
        </member>
        <member name="P:Duality.Serialization.ISurrogate.RealObject">
            <summary>
            [GET / SET] The object that is de/serialized
            </summary>
        </member>
        <member name="P:Duality.Serialization.ISurrogate.SurrogateObject">
            <summary>
            [GET] Returns a serializable object that represents the <see cref="P:Duality.Serialization.ISurrogate.RealObject"/>.
            </summary>
        </member>
        <member name="P:Duality.Serialization.ISurrogate.Priority">
            <summary>
            [GET] If more than one registered ISurrogate is capable of de/serializing a given object type, the one
            with the highest priority is picked.
            </summary>
        </member>
        <member name="T:Duality.Serialization.ISerializable">
            <summary>
            Provides a general interface for an object type with custom serialization.
            </summary>
        </member>
        <member name="M:Duality.Serialization.ISerializable.WriteData(Duality.Serialization.IDataWriter)">
            <summary>
            Writes the object data to the specified <see cref="T:Duality.Serialization.IDataWriter"/>.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Duality.Serialization.ISerializable.ReadData(Duality.Serialization.IDataReader)">
            <summary>
            Reads and applies the object data to the specified <see cref="T:Duality.Serialization.IDataReader"/>.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Duality.Serialization.Surrogate`1.MatchesType(System.Type)">
            <summary>
            Checks whether this surrogate is able to de/serialize the specified object type.
            </summary>
            <param name="t">The <see cref="T:System.Type"/> of the object in question.</param>
            <returns>True, if this surrogate is able to de/serialize such object, false if not.</returns>
        </member>
        <member name="M:Duality.Serialization.Surrogate`1.WriteConstructorData(Duality.Serialization.IDataWriter)">
            <summary>
            Writes constructor data for the replaced object. This will be used in a deserialization pre-pass 
            for constructing the object. Note that constructor data may not contain any object references to
            itsself, since it the object doesn't exist yet at this deserialization stage.
            </summary>
            <param name="writer">The <see cref="T:Duality.Serialization.IDataWriter"/> to serialize constructor data to.</param>
        </member>
        <member name="M:Duality.Serialization.Surrogate`1.WriteData(Duality.Serialization.IDataWriter)">
            <summary>
            Writes the object data to the specified <see cref="T:Duality.Serialization.IDataWriter"/>.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Duality.Serialization.Surrogate`1.ConstructObject(Duality.Serialization.IDataReader,System.Type)">
            <summary>
            Constructs an object in deserialization based on the constructor data that has been written in
            serialization using <see cref="M:Duality.Serialization.Surrogate`1.WriteConstructorData(Duality.Serialization.IDataWriter)"/>.
            </summary>
            <param name="reader">The <see cref="T:Duality.Serialization.IDataReader"/> to deserialize constructor data from.</param>
            <param name="objType">The <see cref="T:System.Type"/> of the object to create.</param>
            <returns>An instance of the specified <see cref="T:System.Type"/> that has been constructed using the provided data.</returns>
        </member>
        <member name="M:Duality.Serialization.Surrogate`1.ReadData(Duality.Serialization.IDataReader)">
            <summary>
            Reads and applies the object data to the specified <see cref="T:Duality.Serialization.IDataReader"/>.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="P:Duality.Serialization.Surrogate`1.RealObject">
            <summary>
            [GET] The object that is de/serialized
            </summary>
        </member>
        <member name="P:Duality.Serialization.Surrogate`1.Priority">
            <summary>
            [GET] If more than one registered surrogate is capable of de/serializing a given object type, the one
            with the highest priority is picked.
            </summary>
        </member>
        <member name="T:Duality.Serialization.SerializeType">
            <summary>
            The SerializeType class is essentially caching serialization-relevant information
            that has been generated basing on a <see cref="T:System.Type"/>. It is cached in the
            <see cref="T:Duality.ReflectionHelper"/> to avoid redundant information gathering.
            </summary>
        </member>
        <member name="M:Duality.Serialization.SerializeType.#ctor(System.Type)">
            <summary>
            Creates a new SerializeType based on a <see cref="T:System.Type"/>, gathering all the information that is necessary for serialization.
            </summary>
            <param name="t"></param>
        </member>
        <member name="P:Duality.Serialization.SerializeType.Type">
            <summary>
            [GET] The <see cref="T:System.Type"/> that is described.
            </summary>
        </member>
        <member name="P:Duality.Serialization.SerializeType.Fields">
            <summary>
            [GET] An array of <see cref="T:System.Reflection.FieldInfo">fields</see> which are serialized.
            </summary>
        </member>
        <member name="P:Duality.Serialization.SerializeType.TypeString">
            <summary>
            [GET] A string referring to the <see cref="T:System.Type"/> that is described.
            </summary>
            <seealso cref="M:Duality.ReflectionHelper.GetTypeName(System.Type,Duality.TypeNameFormat)"/>
        </member>
        <member name="P:Duality.Serialization.SerializeType.DataType">
            <summary>
            [GET] The <see cref="T:Duality.Serialization.DataType"/> associated with the described <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="T:Duality.Time">
            <summary>
            The Time class provides a global interface for time measurement and control. It affects all time-dependent computations. 
            Use the <see cref="P:Duality.Time.TimeMult"/> Property to make your own computations time-dependent instead of frame-dependent. Otherwise, your
            game logic will depend on how many FPS the player's machine achieves and mit behave differently on very slow or fast machines.
            </summary>
        </member>
        <member name="F:Duality.Time.MsPFMult">
            <summary>
            Milliseconds a frame takes at the desired refresh rate of 60 FPS
            </summary>
        </member>
        <member name="F:Duality.Time.SPFMult">
            <summary>
            Seconds a frame takes at the desired refresh rate of 60 FPS
            </summary>
        </member>
        <member name="M:Duality.Time.Freeze">
            <summary>
            Freezes game time. This will cause the GameTimer to stop and TimeMult to equal zero.
            </summary>
        </member>
        <member name="M:Duality.Time.Resume">
            <summary>
            Unfreezes game time. TimeMult resumes to its normal value and GameTimer starts running again.
            </summary>
        </member>
        <member name="P:Duality.Time.MainTimer">
            <summary>
            [GET] Returns the number of milliseconds that have passed in real time.
            </summary>
        </member>
        <member name="P:Duality.Time.FrameBegin">
            <summary>
            [GET] MainTimer value at the beginning of the current frame
            </summary>
        </member>
        <member name="P:Duality.Time.LastDelta">
            <summary>
            [GET] Time in milliseconds the last frame took
            </summary>
        </member>
        <member name="P:Duality.Time.UpdatePerformance">
            <summary>
            [GET] Time in milliseconds the last DualityApp.Update() call took
            </summary>
        </member>
        <member name="P:Duality.Time.RenderPerformance">
            <summary>
            [GET] Time in milliseconds the last DualityApp.Render() call took
            </summary>
        </member>
        <member name="P:Duality.Time.Fps">
            <summary>
            [GET] Frames per Second
            </summary>
        </member>
        <member name="P:Duality.Time.GameTimer">
            <summary>
            [GET] Returns the number of milliseconds that have passed in game time.
            </summary>
        </member>
        <member name="P:Duality.Time.TimeMult">
            <summary>
            [GET] Multiply any frame-independend movement or change with this factor.
            It also applies the time scale you set.
            </summary>
        </member>
        <member name="P:Duality.Time.TimeScale">
            <summary>
            [GET / SET] Specifies how fast game time runs compared to real time i.e. how
            fast the game runs. May be used for slow motion effects.
            </summary>
        </member>
        <member name="P:Duality.Time.FrameCount">
            <summary>
            [GET] The number of frames passed since startup
            </summary>
        </member>
        <member name="T:Duality.LogOutputFormat">
            <summary>
            Holds log output format data that may be shared among different LogOutputs such as the
            current log indent in different outputs writing to the same file.
            </summary>
        </member>
        <member name="M:Duality.OggVorbis.OV.StreamChunk(System.IntPtr,System.IO.MemoryStream@,System.Int32@,System.Int32@)">
            <summary>
            Streams a pcm chunk from an opened ogg vorbis file to the specified OpenAL buffer.
            </summary>
            <param name="alBufferId">OpenAL buffer id to stream to</param>
            <param name="vFPtr">Ogg Vorbis file handle</param>
            <returns>Returns false, if EOF is reached.</returns>
        </member>
        <member name="T:Duality.Serialization.DataType">
            <summary>
            This enum is used by Dualitys serializers to distinguish between certain kinds of data.
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.Unknown">
            <summary>
            Unknown data type
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.Bool">
            <summary>
            A <see cref="T:System.Boolean"/> value
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.Byte">
            <summary>
            A <see cref="T:System.Byte"/> value
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.SByte">
            <summary>
            A <see cref="T:System.SByte"/> value
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.Short">
            <summary>
            A <see cref="T:System.Int16"/> value
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.UShort">
            <summary>
            A <see cref="T:System.UInt16"/> value
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.Int">
            <summary>
            A <see cref="T:System.Int32"/> value
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.UInt">
            <summary>
            A <see cref="T:System.UInt32"/> value
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.Long">
            <summary>
            A <see cref="T:System.Int64"/> value
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.ULong">
            <summary>
            A <see cref="T:System.UInt64"/> value
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.Float">
            <summary>
            A <see cref="T:System.Single"/> value
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.Double">
            <summary>
            A <see cref="T:System.Double"/> value
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.Decimal">
            <summary>
            A <see cref="T:System.Decimal"/> value
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.Char">
            <summary>
            A <see cref="T:System.Char"/> value
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.Type">
            <summary>
            A <see cref="T:System.Type"/> value
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.FieldInfo">
            <summary>
            A <see cref="T:System.Reflection.FieldInfo"/> value
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.PropertyInfo">
            <summary>
            A <see cref="T:System.Reflection.PropertyInfo"/> value
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.MethodInfo">
            <summary>
            A <see cref="T:System.Reflection.MethodInfo"/> value
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.ConstructorInfo">
            <summary>
            A <see cref="T:System.Reflection.ConstructorInfo"/> value
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.EventInfo">
            <summary>
            A <see cref="T:System.Reflection.EventInfo"/> value
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.Delegate">
            <summary>
            A <see cref="T:System.Delegate"/> value
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.Enum">
            <summary>
            A <see cref="T:System.Enum"/> value
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.String">
            <summary>
            A <see cref="T:System.String"/> value
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.Array">
            <summary>
            A <see cref="T:System.Array"/> value
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.Class">
            <summary>
            A class object
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.Struct">
            <summary>
            A struct object
            </summary>
        </member>
        <member name="F:Duality.Serialization.DataType.ObjectRef">
            <summary>
            The reference to an object
            </summary>
        </member>
        <member name="T:Duality.Serialization.ExtMethodsDataType">
            <summary>
            Extension methods for <see cref="T:Duality.Serialization.DataType"/>
            </summary>
        </member>
        <member name="M:Duality.Serialization.ExtMethodsDataType.IsPrimitiveType(Duality.Serialization.DataType)">
            <summary>
            Returns whether the <see cref="T:Duality.Serialization.DataType"/> represents a primitive data type.
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Serialization.ExtMethodsDataType.IsMemberInfoType(Duality.Serialization.DataType)">
            <summary>
            Returns whether the <see cref="T:Duality.Serialization.DataType"/> represents a <see cref="T:System.Reflection.MemberInfo"/> type.
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Serialization.ExtMethodsDataType.ToActualType(Duality.Serialization.DataType)">
            <summary>
            Returns the actual <see cref="T:System.Type"/> that is associated with the <see cref="T:Duality.Serialization.DataType"/>.
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.ReflectionHelper.GetAllFields(System.Type,System.Reflection.BindingFlags)">
            <summary>
            Returns all fields matching the specified bindingflags, even if private and inherited.
            </summary>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.ReflectionHelper.GetTypeName(System.Type,Duality.TypeNameFormat)">
            <summary>
            Returns a string describing a certain Type.
            </summary>
            <param name="T">The Type to describe</param>
            <param name="attrib">How to describe the Type</param>
            <returns></returns>
        </member>
        <member name="M:Duality.ReflectionHelper.FindType(System.String,System.Reflection.Assembly[],Duality.TypeNameFormat)">
            <summary>
            Retrieves a Type based on the specified TypeNameFormat
            </summary>
            <param name="typeName"></param>
            <param name="asmSearch"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="T:Duality.TypeNameFormat">
            <summary>
            An enumeration of possible formats in which Type data can be displayed in a string.
            </summary>
        </member>
        <member name="F:Duality.TypeNameFormat.Keyword">
            <summary>
            The method will return a type keyword, its "short" name. Just the types "base", no generic
            type parameters or array specifications.
            </summary>
        </member>
        <member name="F:Duality.TypeNameFormat.FullNameWithoutAssembly">
            <summary>
            Exactly the same as a Types FullName, but without any Assembly names, versions, keys, etc.
            </summary>
        </member>
        <member name="F:Duality.TypeNameFormat.CSCodeIdent">
            <summary>
            A type name / definition as you would see it in normal C# code. Complete with generic parameters
            or possible array specifications.
            </summary>
        </member>
        <member name="F:Duality.TypeNameFormat.CSCodeIdentShort">
            <summary>
            As CSCodeIdent, but shortened to Keywords
            </summary>
        </member>
        <member name="T:Duality.Resources.Texture">
            <summary>
            A Texture refers to pixel data stored in video memory
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.PxDiameter">
            <summary>
            [GET] The Textures diameter
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.OglWidth">
            <summary>
            [GET] The Textures internal width as uploaded to video memory
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.OglHeight">
            <summary>
            [GET] The Textures internal height as uploaded to video memory
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.PxWidth">
            <summary>
            [GET] The Textures width after taking relative sizes into account
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.PxHeight">
            <summary>
            [GET] The Textures height after taking relative sizes into account
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.OglTexId">
            <summary>
            [GET] The Textures internal id value
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.UVRatio">
            <summary>
            [GET] UV (Texture) coordinates for the Textures lower right
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.Mipmaps">
            <summary>
            Returns whether or not the texture uses mipmaps.
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.NeedsReload">
            <summary>
            Indicates that the textures parameters have been changed in a way that might make it
            necessary to reload its data before using it next time.
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.Size">
            <summary>
            [GET / SET] The Textures (original, unadjusted) size
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.FilterMag">
            <summary>
            [GET / SET] The Textures magnifying filter
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.FilterMin">
            <summary>
            [GET / SET] The Textures minifying filter
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.WrapX">
            <summary>
            [GET / SET] The Textures horizontal wrap mode
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.WrapY">
            <summary>
            [GET / SET] The Textures vertical wrap mode
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.PixelFormat">
            <summary>
            [GET / SET] The Textures pixel format
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.OglSizeMode">
            <summary>
            [GET / SET] Handles how the Textures base Pixmap is adjusted in order to fit GPU texture size requirements (Power of Two dimensions)
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.BasePixmap">
            <summary>
            [GET / SET] Reference to a Pixmap that contains the pixel data that is or has been uploaded to the Texture
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.Atlas">
            <summary>
            [GET / SET] The Textures atlas array, distinguishing different areas in texture coordinates
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.AnimCols">
            <summary>
            [GET / SET] Information about different animation frames contained in this Texture.
            Setting this will lead to an auto-generated atlas map according to the animation.
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.AnimRows">
            <summary>
            [GET / SET] Information about different animation frames contained in this Texture.
            Setting this will lead to an auto-generated atlas map according to the animation.
            </summary>
        </member>
        <member name="P:Duality.Resources.Texture.AnimFrames">
            <summary>
            [GET] Total number of animation frames in this Texture
            </summary>
        </member>
        <member name="T:Duality.Resources.AudioData">
            <summary>
            Stores compressed audio data (Ogg Vorbis) in system memory as well as a reference to the
            OpenAL buffer containing actual PCM data, once set up. The OpenAL buffer is set up lazy
            i.e. as soon as demanded by accessing the AlBuffer property or calling SetupAlBuffer.
            </summary>
        </member>
        <member name="T:Duality.Serialization.TypeDataLayout">
            <summary>
            This class provides information about the data layout when de/serializing an object.
            </summary>
            <seealso cref="T:Duality.Serialization.BinaryFormatterBase"/>
            <seealso cref="T:Duality.Serialization.BinaryFormatter"/>
            <seealso cref="T:Duality.Serialization.BinaryMetaFormatter"/>
        </member>
        <member name="M:Duality.Serialization.TypeDataLayout.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a TypeDataLayout from the specified <see cref="T:System.IO.BinaryReader"/>.
            </summary>
            <param name="r">The BinaryReader from which the type information is read.</param>
        </member>
        <member name="M:Duality.Serialization.TypeDataLayout.#ctor(Duality.Serialization.TypeDataLayout)">
            <summary>
            Initializes a TypeDataLayout by cloning an existing TypeDataLayout.
            </summary>
            <param name="t">The source layout</param>
        </member>
        <member name="M:Duality.Serialization.TypeDataLayout.#ctor(Duality.Serialization.SerializeType)">
            <summary>
            Initializes a TypeDataLayout by extracting necessary information from the specified <see cref="T:Duality.Serialization.SerializeType"/>.
            </summary>
            <param name="t">The source SerializeType.</param>
        </member>
        <member name="M:Duality.Serialization.TypeDataLayout.Write(System.IO.BinaryWriter)">
            <summary>
            Writes the TypeDataLayout to the specified <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="w">The BinaryWriter to store the type information.</param>
        </member>
        <member name="P:Duality.Serialization.TypeDataLayout.Fields">
            <summary>
            [GET / SET] An array of all the necessary field information, typically one <see cref="T:Duality.Serialization.TypeDataLayout.FieldDataInfo"/> 
            entry per <see cref="T:System.Reflection.FieldInfo">field</see>.
            </summary>
        </member>
        <member name="T:Duality.Serialization.TypeDataLayout.FieldDataInfo">
            <summary>
            Holds information about a single field.
            </summary>
            <see cref="T:System.Reflection.FieldInfo"/>
        </member>
        <member name="F:Duality.Serialization.TypeDataLayout.FieldDataInfo.name">
            <summary>
            The fields name
            </summary>
        </member>
        <member name="F:Duality.Serialization.TypeDataLayout.FieldDataInfo.typeString">
            <summary>
            A string referring to the fields type.
            </summary>
        </member>
        <member name="T:Duality.Serialization.BinaryMetaFormatter">
            <summary>
            De/Serializes abstract object data using <see cref="T:Duality.Serialization.MetaFormat.DataNode">DataNodes</see>.
            </summary>
            <seealso cref="T:Duality.Serialization.BinaryFormatter"/>
        </member>
        <member name="M:Duality.Serialization.BinaryMetaFormatter.WriteObject(Duality.Serialization.MetaFormat.DataNode)">
            <summary>
            Serializes the specified data node tree to the underlying <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="data">The data node tree to serialize.</param>
        </member>
        <member name="M:Duality.Serialization.BinaryMetaFormatter.ReadObject">
            <summary>
            Deserializes a data node tree from the underlying <see cref="T:System.IO.Stream"/>.
            </summary>
            <returns>A data node tree that has been deserialized.</returns>
        </member>
        <member name="M:Duality.Serialization.BinaryMetaFormatter.WriteMemberInfo(Duality.Serialization.MetaFormat.MemberInfoNode)">
            <summary>
            Writes the specified <see cref="T:Duality.Serialization.MetaFormat.MemberInfoNode"/>, including possible child nodes.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryMetaFormatter.WriteArray(Duality.Serialization.MetaFormat.ArrayNode)">
            <summary>
            Writes the specified <see cref="T:Duality.Serialization.MetaFormat.ArrayNode"/>, including possible child nodes.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryMetaFormatter.WriteStruct(Duality.Serialization.MetaFormat.StructNode)">
            <summary>
            Writes the specified <see cref="T:Duality.Serialization.MetaFormat.StructNode"/>, including possible child nodes.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryMetaFormatter.WriteDelegate(Duality.Serialization.MetaFormat.DelegateNode)">
            <summary>
            Writes the specified <see cref="T:Duality.Serialization.MetaFormat.DelegateNode"/>, including possible child nodes.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryMetaFormatter.WriteEnum(Duality.Serialization.MetaFormat.EnumNode)">
            <summary>
            Writes the specified <see cref="T:Duality.Serialization.MetaFormat.EnumNode"/>.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryMetaFormatter.ReadMemberInfo(Duality.Serialization.DataType)">
            <summary>
            Reads a <see cref="T:Duality.Serialization.MetaFormat.MemberInfoNode"/>, including possible child nodes.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryMetaFormatter.ReadArray">
            <summary>
            Reads an <see cref="T:Duality.Serialization.MetaFormat.ArrayNode"/>, including possible child nodes.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryMetaFormatter.ReadStruct">
            <summary>
            Reads a <see cref="T:Duality.Serialization.MetaFormat.StructNode"/>, including possible child nodes.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryMetaFormatter.ReadDelegate">
            <summary>
            Reads a <see cref="T:Duality.Serialization.MetaFormat.DelegateNode"/>, including possible child nodes.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryMetaFormatter.ReadEnum">
            <summary>
            Reads an <see cref="T:Duality.Serialization.MetaFormat.EnumNode"/>.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryMetaFormatter.ReadObjectRef">
            <summary>
            Reads an <see cref="T:Duality.Serialization.MetaFormat.ObjectRefNode"/>.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Duality.MathF.InvSqrtFast(System.Single)">
            <summary>
            Returns an approximation of a numbers inverse square root.
            </summary>
            <param name="x">A number.</param>
            <returns>An approximation of the inverse square root of the specified number, with an upper error bound of 0.001</returns>
        </member>
        <member name="M:Duality.MathF.NormalizeVar(System.Single,System.Single,System.Single)">
            <summary>
            Normalizes the given variable to the given circular area.
            Example: NormalizeVar(480, 0, 360) returns 120.
            </summary>
            <returns>The normalized value between min (inclusive) and max (exclusive).</returns>
        </member>
        <member name="M:Duality.MathF.Angle(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Calculates the angle between two points in 2D space.
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <returns>The angle between [x1,y1] and [x2,y2] in radian measure</returns>
        </member>
        <member name="M:Duality.MathF.TurnDir(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Assuming a circular value area, this method returns the direction to "turn" value 1 to
            when it comes to take the shortest way to value 2.
            </summary>
            <param name="val1"></param>
            <param name="val2"></param>
            <param name="minVal"></param>
            <param name="maxVal"></param>
            <returns>-1 for "left" / lower, 1 for "right" / higher and 0 for "stay" / equal</returns>
        </member>
        <member name="M:Duality.MathF.CircularDist(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Calculates the distance between two values assuming a circular value area.
            </summary>
            <param name="v1">Value 1</param>
            <param name="v2">Value 2</param>
            <param name="vMin">Value area minimum</param>
            <param name="vMax">Value area maximum</param>
            <returns>Value distance</returns>
        </member>
        <member name="M:Duality.MathF.TransformCoord(System.Single@,System.Single@,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Turns and scales a specific coordinate around the specified center point
            </summary>
            <param name="xCoord"></param>
            <param name="yCoord"></param>
            <param name="rot"></param>
            <param name="scale"></param>
            <param name="xCenter"></param>
            <param name="yCenter"></param>
        </member>
        <member name="M:Duality.MathF.RectsOverlap(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns true, if the two specified rects overlap.
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="w1"></param>
            <param name="h1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="w2"></param>
            <param name="h2"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.MathF.GetCommonRect(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Returns the common rectangular are of both specified rectangular areas.
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="w1"></param>
            <param name="h1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="w2"></param>
            <param name="h2"></param>
            <param name="x3"></param>
            <param name="y3"></param>
            <param name="w3"></param>
            <param name="h3"></param>
        </member>
        <member name="M:Duality.MathF.LinesCross(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single@,System.Single@,System.Boolean)">
            <summary>
            Checks, if two line segments (or optionally an infinite lines) cross and determines their mutual point.
            </summary>
            <param name="startX1"></param>
            <param name="startY1"></param>
            <param name="endX1"></param>
            <param name="endY1"></param>
            <param name="startX2"></param>
            <param name="startY2"></param>
            <param name="endX2"></param>
            <param name="endY2"></param>
            <param name="infinite"></param>
            <param name="crossX"></param>
            <param name="crossY"></param>
            <returns>Are the lines crossing?</returns>
        </member>
        <member name="M:Duality.MathF.PointLineNearestPoint(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Calculates the point on a line segment (or optionally an infinite line) that has the smalles possible
            distance to a seperate point.
            </summary>
            <param name="pX"></param>
            <param name="pY"></param>
            <param name="lX1"></param>
            <param name="lY1"></param>
            <param name="lX2"></param>
            <param name="lY2"></param>
            <param name="infinite"></param>
            <param name="nX"></param>
            <param name="nY"></param>
        </member>
        <member name="M:Duality.MathF.PointLineDistance(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Calculates the distance between a point and a line segment (or optionally an infinite line)
            </summary>
            <param name="pX"></param>
            <param name="pY"></param>
            <param name="lX1"></param>
            <param name="lY1"></param>
            <param name="lX2"></param>
            <param name="lY2"></param>
            <param name="infinite"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.MathF.GetLinearPrediction(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single@,System.Single@)">
            <summary>
            Assuming two objects travelling at a linear course with constant speed and angle, this method
            calculates at which point they may collide if the angle of object 1 is not defined by a specific
            (but constant!) value.
            In other words: If object 1 tries to hit object 2, let object 1 move towards the calculated point.
            </summary>
            <param name="obj1X"></param>
            <param name="obj1Y"></param>
            <param name="obj1Speed"></param>
            <param name="obj2X"></param>
            <param name="obj2Y"></param>
            <param name="obj2Speed"></param>
            <param name="obj2Angle"></param>
            <param name="colX"></param>
            <param name="colY"></param>
            <returns>
            False if it is not possible for object 1 to collide with object 2 at any course of object 1.
            This is, for example, the case if object 1 and to move to the same direction but object 2 is faster.
            A "collision point" is calculated either way, though it is not a collision point but only a 
            "directional idea" if false is returned.
            </returns>
        </member>
        <member name="M:Duality.MathF.GetLinearPrediction2(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Assuming two objects travelling at a linear course with constant speed and angle, this method
            calculates the time from now at which the distance between the two objects will be minimal. If
            this has already passed, the returned time is negative.
            </summary>
            <param name="obj1X"></param>
            <param name="obj1Y"></param>
            <param name="obj1XSpeed"></param>
            <param name="obj1YSpeed"></param>
            <param name="obj2X"></param>
            <param name="obj2Y"></param>
            <param name="obj2XSpeed"></param>
            <param name="obj2YSpeed"></param>
            <returns></returns>
        </member>
        <member name="T:Duality.Serialization.Surrogates.BitmapSurrogate">
            <summary>
            De/Serializes a <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
        </member>
        <member name="T:Duality.Serialization.MetaFormat.DataNode">
            <summary>
            Describes a single serialization data node.
            </summary>
            <seealso cref="T:Duality.Serialization.BinaryMetaFormatter"/>
        </member>
        <member name="M:Duality.Serialization.MetaFormat.DataNode.GetTypeStrings(System.Boolean)">
            <summary>
            Returns a list of all <see cref="M:Duality.ReflectionHelper.GetTypeName(System.Type,Duality.TypeNameFormat)">type strings</see> in this data node.
            </summary>
            <param name="deep">If true, both this node and all of its children are searched.</param>
            <returns>A list of <see cref="M:Duality.ReflectionHelper.GetTypeName(System.Type,Duality.TypeNameFormat)">type strings</see>.</returns>
        </member>
        <member name="M:Duality.Serialization.MetaFormat.DataNode.GetTypeStrings(System.Collections.Generic.List{System.String}@,System.Boolean)">
            <summary>
            DataNodes may override this method to append their <see cref="M:Duality.ReflectionHelper.GetTypeName(System.Type,Duality.TypeNameFormat)">type strings</see> to the
            specified list. The base version iterates over its children, if a deep search is performed.
            </summary>
            <param name="list">The <see cref="T:System.Collections.Generic.List`1"/> to append type strings to.</param>
            <param name="deep">If true, both this node and all of its children are searched.</param>
        </member>
        <member name="M:Duality.Serialization.MetaFormat.DataNode.IsObjectIdDefined(System.UInt32)">
            <summary>
            Determines whether this data node contains an <see cref="T:Duality.Serialization.MetaFormat.ObjectNode">object</see> with the specified
            object id. DataNodes may override this method to check for their own object id. The base version iterates
            over its children.
            </summary>
            <param name="objId"></param>
            <returns></returns>
        </member>
        <member name="M:Duality.Serialization.MetaFormat.DataNode.ReplaceTypeStrings(System.String,System.String)">
            <summary>
            Searches for one <see cref="M:Duality.ReflectionHelper.GetTypeName(System.Type,Duality.TypeNameFormat)">type string</see> and replaces it with another.
            DataNodes may override this method to rename their own type strings. The base version iterates
            over its children.
            </summary>
            <param name="oldTypeString">The old type string that is to be replaced.</param>
            <param name="newTypeString">The new type string that is to be used instead of the other.</param>
            <returns>The number of occurences that have been replaced.</returns>
        </member>
        <member name="P:Duality.Serialization.MetaFormat.DataNode.SubNodes">
            <summary>
            [GET] Enumerates this nodes child nodes.
            </summary>
        </member>
        <member name="P:Duality.Serialization.MetaFormat.DataNode.Parent">
            <summary>
            [GET / SET] This nodes parent node.
            </summary>
        </member>
        <member name="P:Duality.Serialization.MetaFormat.DataNode.NodeType">
            <summary>
            The <see cref="T:Duality.Serialization.DataType"/> that is associated with this data node.
            </summary>
        </member>
        <member name="T:Duality.Serialization.MetaFormat.PrimitiveNode">
            <summary>
            Describes a serialization primitive data node.
            </summary>
            <seealso cref="T:Duality.Serialization.BinaryMetaFormatter"/>
        </member>
        <member name="P:Duality.Serialization.MetaFormat.PrimitiveNode.PrimitiveValue">
            <summary>
            [GET / SET] This nodes primitive data value.
            </summary>
        </member>
        <member name="T:Duality.Serialization.MetaFormat.StringNode">
            <summary>
            Describes a serialization <see cref="T:System.String"/> data node.
            </summary>
            <seealso cref="T:Duality.Serialization.BinaryMetaFormatter"/>
        </member>
        <member name="P:Duality.Serialization.MetaFormat.StringNode.StringValue">
            <summary>
            [GET / SET] This nodes <see cref="T:System.String"/> value.
            </summary>
        </member>
        <member name="T:Duality.Serialization.MetaFormat.EnumNode">
            <summary>
            Describes a serialization <see cref="T:System.Enum"/> data node.
            </summary>
            <seealso cref="T:Duality.Serialization.BinaryMetaFormatter"/>
        </member>
        <member name="P:Duality.Serialization.MetaFormat.EnumNode.EnumType">
            <summary>
            [GET / SET] A string referring to the <see cref="T:System.Enum">Enums</see> Tyoe.
            </summary>
        </member>
        <member name="P:Duality.Serialization.MetaFormat.EnumNode.ValueName">
            <summary>
            [GET / SET] The values name in the <see cref="T:System.Enum"/>.
            </summary>
        </member>
        <member name="P:Duality.Serialization.MetaFormat.EnumNode.Value">
            <summary>
            [GET / SET] The numeric enum value
            </summary>
        </member>
        <member name="T:Duality.Serialization.MetaFormat.ObjectNode">
            <summary>
            Describes a serialization object data node.
            </summary>
            <seealso cref="T:Duality.Serialization.BinaryMetaFormatter"/>
        </member>
        <member name="P:Duality.Serialization.MetaFormat.ObjectNode.TypeString">
            <summary>
            [GET / SET] A string referring to the objects <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="P:Duality.Serialization.MetaFormat.ObjectNode.ObjId">
            <summary>
            [GET / SET] The objects id.
            </summary>
        </member>
        <member name="T:Duality.Serialization.MetaFormat.ArrayNode">
            <summary>
            Describes a serialization array data node.
            </summary>
            <seealso cref="T:Duality.Serialization.BinaryMetaFormatter"/>
        </member>
        <member name="P:Duality.Serialization.MetaFormat.ArrayNode.PrimitiveData">
            <summary>
            [GET / SET] An <see cref="T:System.Array"/> storing this nodes primitive data. Null, if
            the data stored in this ArrayNode is not primitive.
            </summary>
        </member>
        <member name="P:Duality.Serialization.MetaFormat.ArrayNode.Rank">
            <summary>
            [GET / SET] The rank of the array.
            </summary>
        </member>
        <member name="P:Duality.Serialization.MetaFormat.ArrayNode.Length">
            <summary>
            [GET / SET] The arrays length.
            </summary>
        </member>
        <member name="T:Duality.Serialization.MetaFormat.StructNode">
            <summary>
            Describes a serialization structural object data node.
            </summary>
            <seealso cref="T:Duality.Serialization.BinaryMetaFormatter"/>
        </member>
        <member name="P:Duality.Serialization.MetaFormat.StructNode.CustomSerialization">
            <summary>
            [GET / SET] Whether this structural object uses <see cref="T:Duality.Serialization.ISerializable">custom serialization</see>.
            </summary>
        </member>
        <member name="P:Duality.Serialization.MetaFormat.StructNode.SurrogateSerialization">
            <summary>
            [GET / SET] Whether this structural object uses an <see cref="T:Duality.Serialization.ISurrogate"/>.
            </summary>
        </member>
        <member name="T:Duality.Serialization.MetaFormat.ObjectRefNode">
            <summary>
            Describes a serialization object reference data node.
            </summary>
            <seealso cref="T:Duality.Serialization.BinaryMetaFormatter"/>
        </member>
        <member name="P:Duality.Serialization.MetaFormat.ObjectRefNode.ObjRefId">
            <summary>
            [GET / SET] The id of the referenced object.
            </summary>
        </member>
        <member name="T:Duality.Serialization.MetaFormat.MemberInfoNode">
            <summary>
            Describes a serialization <see cref="T:System.Reflection.MemberInfo"/> data node.
            </summary>
            <seealso cref="T:Duality.Serialization.BinaryMetaFormatter"/>
        </member>
        <member name="P:Duality.Serialization.MetaFormat.MemberInfoNode.IsStatic">
            <summary>
            [GET / SET] Whether the referenced <see cref="T:System.Reflection.MemberInfo"/> is static.
            </summary>
        </member>
        <member name="T:Duality.Serialization.MetaFormat.TypeInfoNode">
            <summary>
            Describes a serialization <see cref="T:System.Type"/> data node.
            </summary>
            <seealso cref="T:Duality.Serialization.BinaryMetaFormatter"/>
        </member>
        <member name="T:Duality.Serialization.MetaFormat.FieldInfoNode">
            <summary>
            Describes a serialization <see cref="T:System.Reflection.FieldInfo"/> data node.
            </summary>
            <seealso cref="T:Duality.Serialization.BinaryMetaFormatter"/>
        </member>
        <member name="P:Duality.Serialization.MetaFormat.FieldInfoNode.FieldName">
            <summary>
            [GET / SET] The name of the <see cref="T:System.Reflection.FieldInfo">field</see>.
            </summary>
        </member>
        <member name="T:Duality.Serialization.MetaFormat.PropertyInfoNode">
            <summary>
            Describes a serialization <see cref="T:System.Reflection.PropertyInfo"/> data node.
            </summary>
            <seealso cref="T:Duality.Serialization.BinaryMetaFormatter"/>
        </member>
        <member name="P:Duality.Serialization.MetaFormat.PropertyInfoNode.PropertyName">
            <summary>
            [GET / SET] The name of the <see cref="T:System.Reflection.PropertyInfo">property</see>.
            </summary>
        </member>
        <member name="P:Duality.Serialization.MetaFormat.PropertyInfoNode.PropertyType">
            <summary>
            [GET / SET] A string referring to the properties <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="P:Duality.Serialization.MetaFormat.PropertyInfoNode.ParameterTypes">
            <summary>
            [GET / SET] An array of strings referring to the properties index parameter types.
            </summary>
        </member>
        <member name="T:Duality.Serialization.MetaFormat.MethodInfoNode">
            <summary>
            Describes a serialization <see cref="T:System.Reflection.MethodInfo"/> data node.
            </summary>
            <seealso cref="T:Duality.Serialization.BinaryMetaFormatter"/>
        </member>
        <member name="P:Duality.Serialization.MetaFormat.MethodInfoNode.MethodName">
            <summary>
            [GET / SET] The name of the <see cref="T:System.Reflection.MethodInfo">method</see>.
            </summary>
        </member>
        <member name="P:Duality.Serialization.MetaFormat.MethodInfoNode.ParameterTypes">
            <summary>
            [GET / SET] An array of strings referring to the methods parameter types.
            </summary>
        </member>
        <member name="T:Duality.Serialization.MetaFormat.ConstructorInfoNode">
            <summary>
            Describes a serialization <see cref="T:System.Reflection.ConstructorInfo"/> data node.
            </summary>
            <seealso cref="T:Duality.Serialization.BinaryMetaFormatter"/>
        </member>
        <member name="P:Duality.Serialization.MetaFormat.ConstructorInfoNode.ParameterTypes">
            <summary>
            [GET / SET] An array of strings referring to the constructors parameter types.
            </summary>
        </member>
        <member name="T:Duality.Serialization.MetaFormat.EventInfoNode">
            <summary>
            Describes a serialization <see cref="T:System.Reflection.EventInfo"/> data node.
            </summary>
            <seealso cref="T:Duality.Serialization.BinaryMetaFormatter"/>
        </member>
        <member name="P:Duality.Serialization.MetaFormat.EventInfoNode.EventName">
            <summary>
            [GET / SET] The name of the <see cref="T:System.Reflection.EventInfo">event</see>.
            </summary>
        </member>
        <member name="T:Duality.Serialization.MetaFormat.DelegateNode">
            <summary>
            Describes a serialization <see cref="T:System.Delegate"/> data node.
            </summary>
            <seealso cref="T:Duality.Serialization.BinaryMetaFormatter"/>
        </member>
        <member name="P:Duality.Serialization.MetaFormat.DelegateNode.InvokeList">
            <summary>
            [GET / SET] A reference to the DataNode containing the <see cref="T:System.Delegate">Delegates</see> invokation list.
            </summary>
        </member>
        <member name="P:Duality.Serialization.MetaFormat.DelegateNode.Method">
            <summary>
            [GET / SET] A reference to the DataNode containing the <see cref="T:System.Delegate">Delegates</see> method.
            </summary>
        </member>
        <member name="P:Duality.Serialization.MetaFormat.DelegateNode.Target">
            <summary>
            [GET / SET] A reference to the DataNode containing the <see cref="T:System.Delegate">Delegates</see> target object.
            </summary>
        </member>
        <member name="T:Duality.Serialization.MetaFormat.TypeDataLayoutNode">
            <summary>
            Describes a serialization <see cref="T:Duality.Serialization.TypeDataLayout"/> data node.
            </summary>
            <seealso cref="T:Duality.Serialization.BinaryMetaFormatter"/>
        </member>
        <member name="P:Duality.Serialization.MetaFormat.TypeDataLayoutNode.Layout">
            <summary>
            [GET / SET] The TypeDataLayout that is stored in this node.
            </summary>
        </member>
        <member name="T:Duality.Serialization.MetaFormat.DummyNode">
            <summary>
            Describes a serialization dummy data node. It does not contain any information but might be used by meta-formatters
            to group and organize other nodes that have actually been read.
            </summary>
            <seealso cref="T:Duality.Serialization.BinaryMetaFormatter"/>
        </member>
        <member name="T:Duality.Resources.Pixmap">
            <summary>
            A Pixmap stores pixel data in system memory. 
            </summary>
        </member>
        <member name="T:Duality.NonSerializedResourceAttribute">
            <summary>
            Indicates that a field will be assumed null when serializing it as part of a Resource serialization.
            </summary>
        </member>
        <member name="T:Duality.GameObject">
            <summary>
            GameObjects are what every <see cref="T:Duality.Resources.Scene"/> consists of. They represent nodes in the hierarchial scene graph and
            can maintain a <see cref="T:Duality.Resources.PrefabLink"/> connection. A GameObject's main duty is to group several <see cref="T:Duality.Component"/>s
            to form one logical instance of an actual object as part of the game, such as "Car" or "PlayerCharacter". However,
            the GameObjects itsself does not contain any game-related logic and, by default, doesn't even occupy a position in space.
            This is the job of its Components.
            </summary>
            <seealso cref="T:Duality.Component"/>
            <seealso cref="T:Duality.Resources.Scene"/>
            <seealso cref="T:Duality.Resources.PrefabLink"/>
        </member>
        <member name="M:Duality.GameObject.#ctor(Duality.ContentRef{Duality.Resources.Prefab})">
            <summary>
            Creates a GameObject based on a specific <see cref="T:Duality.Resources.Prefab"/>.
            </summary>
            <param name="prefab">The Prefab that will be applied to this GameObject.</param>
            <seealso cref="T:Duality.Resources.Prefab"/>
        </member>
        <member name="M:Duality.GameObject.LinkToPrefab(Duality.ContentRef{Duality.Resources.Prefab})">
            <summary>
            Sets or alters this GameObject's <see cref="T:Duality.Resources.PrefabLink"/> to reference the specified <see cref="T:Duality.Resources.Prefab"/>.
            </summary>
            <param name="prefab">The Prefab that will be linked to.</param>
            <seealso cref="T:Duality.Resources.PrefabLink"/>
            <seealso cref="T:Duality.Resources.Prefab"/>
        </member>
        <member name="M:Duality.GameObject.BreakPrefabLink">
            <summary>
            Breaks this GameObject's <see cref="T:Duality.Resources.PrefabLink"/>
            </summary>
        </member>
        <member name="M:Duality.GameObject.ChildAtIndex(System.Int32)">
            <summary>
            Returns the child GameObject that is internally stored at the specified index.
            </summary>
            <param name="index">The index at which the desired GameObject is located.</param>
            <returns>The child GameObject at the specified index. Null, if the index is not valid.</returns>
        </member>
        <member name="M:Duality.GameObject.ChildAtIndexPath(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Executes a series of <see cref="M:Duality.GameObject.ChildAtIndex(System.Int32)"/> calls, beginning at this GameObject and 
            each on the last retrieved child object.
            </summary>
            <param name="indexPath">An enumeration of child indices.</param>
            <returns>The last retrieved GameObject after executing all indexing steps.</returns>
            <example>
            Calling <c>ChildAtIndexPath(new[] { 0, 0 })</c> will return the first child of the first child.
            </example>
        </member>
        <member name="M:Duality.GameObject.IndexOfChild(Duality.GameObject)">
            <summary>
            Determines the index of a specific child GameObject.
            </summary>
            <param name="child">The child GameObject of which the index is to be determined.</param>
            <returns>The index of the specified child GameObject</returns>
            <seealso cref="M:Duality.GameObject.ChildAtIndex(System.Int32)"/>
        </member>
        <member name="M:Duality.GameObject.IndexPathOfChild(Duality.GameObject)">
            <summary>
            Determines the index path from this GameObject to the specified child (or grandchild, etc.) of it.
            </summary>
            <param name="child">The child GameObject to lead to.</param>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> of indices that lead from this GameObject to the specified child GameObject.</returns>
            <seealso cref="M:Duality.GameObject.ChildAtIndexPath(System.Collections.Generic.IEnumerable{System.Int32})"/>
        </member>
        <member name="M:Duality.GameObject.IsChildOf(Duality.GameObject)">
            <summary>
            Returns whether this GameObject is a child, grandchild or similar of the specified GameObject.
            </summary>
            <param name="parent">The GameObject to check whether or not it is a parent of this one.</param>
            <returns>True, if it is, false if not.</returns>
        </member>
        <member name="M:Duality.GameObject.GetComponents``1(System.Boolean)">
            <summary>
            Enumerates all <see cref="T:Duality.Component"/>s of this GameObject that match the specified <see cref="T:System.Type"/> or subclass it.
            </summary>
            <typeparam name="T">The base Type to match when iterating through the Components.</typeparam>
            <param name="activeOnly">If true, only <see cref="P:Duality.Component.Active">active</see> Components are enumerated.</param>
            <returns>An enumeration of all Components that match the specified conditions.</returns>
            <seealso cref="M:Duality.GameObject.GetComponents(System.Type,System.Boolean)"/>
        </member>
        <member name="M:Duality.GameObject.GetComponentsInChildren``1(System.Boolean)">
            <summary>
            Enumerates all <see cref="T:Duality.Component"/>s of this object's child GameObjects that match the specified <see cref="T:System.Type"/> or subclass it.
            </summary>
            <typeparam name="T">The base Type to match when iterating through the Components.</typeparam>
            <param name="activeOnly">If true, only <see cref="P:Duality.Component.Active">active</see> Components are enumerated.</param>
            <returns>An enumeration of all Components that match the specified conditions.</returns>
            <seealso cref="M:Duality.GameObject.GetComponentsInChildren(System.Type,System.Boolean)"/>
        </member>
        <member name="M:Duality.GameObject.GetComponentsDeep``1(System.Boolean)">
            <summary>
            Enumerates all <see cref="T:Duality.Component"/>s of this GameObject or any child GameObject that match the specified <see cref="T:System.Type"/> or subclass it.
            </summary>
            <typeparam name="T">The base Type to match when iterating through the Components.</typeparam>
            <param name="activeOnly">If true, only <see cref="P:Duality.Component.Active">active</see> Components are enumerated.</param>
            <returns>An enumeration of all Components that match the specified conditions.</returns>
            <seealso cref="M:Duality.GameObject.GetComponentsDeep(System.Type,System.Boolean)"/>
        </member>
        <member name="M:Duality.GameObject.GetComponents(System.Type,System.Boolean)">
            <summary>
            Enumerates all <see cref="T:Duality.Component"/>s of this GameObject that match the specified <see cref="T:System.Type"/> or subclass it.
            </summary>
            <param name="t">The base Type to match when iterating through the Components.</param>
            <param name="activeOnly">If true, only <see cref="P:Duality.Component.Active">active</see> Components are enumerated.</param>
            <returns>An enumeration of all Components that match the specified conditions.</returns>
            <seealso cref="M:Duality.GameObject.GetComponents``1(System.Boolean)"/>
        </member>
        <member name="M:Duality.GameObject.GetComponentsInChildren(System.Type,System.Boolean)">
            <summary>
            Enumerates all <see cref="T:Duality.Component"/>s of this object's child GameObjects that match the specified <see cref="T:System.Type"/> or subclass it.
            </summary>
            <param name="t">The base Type to match when iterating through the Components.</param>
            <param name="activeOnly">If true, only <see cref="P:Duality.Component.Active">active</see> Components are enumerated.</param>
            <returns>An enumeration of all Components that match the specified conditions.</returns>
            <seealso cref="M:Duality.GameObject.GetComponentsInChildren``1(System.Boolean)"/>
        </member>
        <member name="M:Duality.GameObject.GetComponentsDeep(System.Type,System.Boolean)">
            <summary>
            Enumerates all <see cref="T:Duality.Component"/>s of this GameObject or any child GameObject that match the specified <see cref="T:System.Type"/> or subclass it.
            </summary>
            <param name="t">The base Type to match when iterating through the Components.</param>
            <param name="activeOnly">If true, only <see cref="P:Duality.Component.Active">active</see> Components are enumerated.</param>
            <returns>An enumeration of all Components that match the specified conditions.</returns>
            <seealso cref="M:Duality.GameObject.GetComponentsDeep``1(System.Boolean)"/>
        </member>
        <member name="M:Duality.GameObject.GetComponent``1(System.Boolean)">
            <summary>
            Returns a single <see cref="T:Duality.Component"/> that matches the specified <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The Type to match the Components with.</typeparam>
            <param name="exactType">If true, the Component must match the specified Type exactly. If false, subclasses of it are also valid.</param>
            <returns>A single Component that matches the specified Type. Null, if none was found.</returns>
        </member>
        <member name="M:Duality.GameObject.GetComponent(System.Type,System.Boolean)">
            <summary>
            Returns a single <see cref="T:Duality.Component"/> that matches the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="t">The Type to match the Components with.</param>
            <param name="exactType">If true, the Component must match the specified Type exactly. If false, subclasses of it are also valid.</param>
            <returns>A single Component that matches the specified Type. Null, if none was found.</returns>
        </member>
        <member name="M:Duality.GameObject.AddComponent``1">
            <summary>
            Adds a <see cref="T:Duality.Component"/> of the specified <see cref="T:System.Type"/> to this GameObject, if not existing yet.
            Simply uses the existing Component otherwise.
            </summary>
            <typeparam name="T">The Type of which to request a Component instance.</typeparam>
            <returns>A reference to a Component of the specified Type.</returns>
            <seealso cref="M:Duality.GameObject.AddComponent(System.Type)"/>
        </member>
        <member name="M:Duality.GameObject.AddComponent(System.Type)">
            <summary>
            Adds a <see cref="T:Duality.Component"/> of the specified <see cref="T:System.Type"/> to this GameObject, if not existing yet.
            Simply uses the existing Component otherwise.
            </summary>
            <param name="t">The Type of which to request a Component instance.</param>
            <returns>A reference to a Component of the specified Type.</returns>
            <seealso cref="M:Duality.GameObject.AddComponent``1"/>
        </member>
        <member name="M:Duality.GameObject.AddComponent``1(``0)">
            <summary>
            Adds the specified <see cref="T:Duality.Component"/> to this GameObject, if no Component of that Type is already part of this GameObject.
            Simply uses the already added Component otherwise.
            </summary>
            <typeparam name="T">The Components Type.</typeparam>
            <param name="newComp">The Component instance to add to this GameObject.</param>
            <returns>A reference to a Component of the specified Type</returns>
            <exception cref="T:System.ArgumentException">Thrown if the specified Component is already attached to a GameObject</exception>
        </member>
        <member name="M:Duality.GameObject.RemoveComponent``1">
            <summary>
            Removes a <see cref="T:Duality.Component"/> of the specified <see cref="T:System.Type"/> from this GameObject, if existing.
            </summary>
            <typeparam name="T">The Type of which to remove a Component instance.</typeparam>
            <returns>A reference to the removed Component. Null otherwise.</returns>
            <seealso cref="M:Duality.GameObject.RemoveComponent(System.Type)"/>
            <seealso cref="M:Duality.GameObject.RemoveComponent(Duality.Component)"/>
        </member>
        <member name="M:Duality.GameObject.RemoveComponent(System.Type)">
            <summary>
            Removes a <see cref="T:Duality.Component"/> of the specified <see cref="T:System.Type"/> from this GameObject, if existing.
            </summary>
            <param name="t">The Type of which to remove a Component instance.</param>
            <returns>A reference to the removed Component. Null otherwise.</returns>
            <seealso cref="M:Duality.GameObject.RemoveComponent``1"/>
            <seealso cref="M:Duality.GameObject.RemoveComponent(Duality.Component)"/>
        </member>
        <member name="M:Duality.GameObject.RemoveComponent(Duality.Component)">
            <summary>
            Removes a specific <see cref="T:Duality.Component"/> from this GameObject.
            </summary>
            <param name="cmp">The Component to remove from this GameObject</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the specified Component is a null reference.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the specified Component does not belong to this GameObject</exception>
            <seealso cref="M:Duality.GameObject.RemoveComponent(System.Type)"/>
            <seealso cref="M:Duality.GameObject.RemoveComponent``1"/>
        </member>
        <member name="M:Duality.GameObject.ClearComponents">
            <summary>
            Removes all <see cref="T:Duality.Component">Components</see> from this GameObject.
            </summary>
        </member>
        <member name="M:Duality.GameObject.Dispose">
            <summary>
            Disposes this GameObject as well as all of its child GameObjects and <see cref="T:Duality.Component">Components</see>.
            You usually don't need this - use <see cref="M:Duality.GameObject.DisposeLater"/> instead.
            </summary>
            <seealso cref="M:Duality.GameObject.DisposeLater"/>
        </member>
        <member name="M:Duality.GameObject.DisposeLater">
            <summary>
            Schedules this GameObject for disposal. It is guaranteed to be executed until the next update cycle starts.
            </summary>
            <seealso cref="M:Duality.GameObject.Dispose"/>
        </member>
        <member name="M:Duality.GameObject.Clone">
            <summary>
            Creates a deep copy of this GameObject.
            </summary>
            <returns>A reference to a newly created deep copy of this GameObject.</returns>
        </member>
        <member name="M:Duality.GameObject.CopyTo(Duality.GameObject)">
            <summary>
            Deep-copies this GameObject's data to the specified target GameObject.
            </summary>
            <param name="target">The target GameObject to copy to.</param>
        </member>
        <member name="P:Duality.GameObject.Parent">
            <summary>
            [GET / SET] This GameObject's parent object in the scene graph.
            A GameObject usually depends on its parent in some way, such as being
            positioned relative to it when occupying a position in space.
            </summary>
        </member>
        <member name="P:Duality.GameObject.Active">
            <summary>
            [GET / SET] Whether or not the GameObject is currently active. To return true,
            both the GameObject itsself and all of its parent GameObjects need to be active.
            </summary>
            <seealso cref="P:Duality.GameObject.ActiveSingle"/>
        </member>
        <member name="P:Duality.GameObject.ActiveSingle">
            <summary>
            [GET / SET] Whether or not the GameObject is currently active. Unlike <see cref="P:Duality.GameObject.Active"/>,
            this property ignores parent activation states and depends only on this single GameObject.
            The scene graph and other Duality instances usually check <see cref="P:Duality.GameObject.Active"/>, not ActiveSingle.
            </summary>
            <seealso cref="P:Duality.GameObject.Active"/>
        </member>
        <member name="P:Duality.GameObject.Name">
            <summary>
            [GET / SET] The name of this GameObject.
            </summary>
        </member>
        <member name="P:Duality.GameObject.FullName">
            <summary>
            [GET] The path-like hierarchial name of this GameObject.
            </summary>
            <example>For an object called <c>Wheel</c> inside an object called <c>Car</c>, this would return <c>Car/Wheel</c>.</example>
        </member>
        <member name="P:Duality.GameObject.HierarchyLevel">
            <summary>
            [GET] Returns the number of parents this object has when travelling upwards the scene graph hierarchy.
            </summary>
            <example>
            This will be zero for a root object (one that has no parent object), one for a root object's child,
            two for a root object's child's child, and so on.
            </example>
        </member>
        <member name="P:Duality.GameObject.ChildCount">
            <summary>
            [GET] The number of child GameObjects this object has.
            </summary>
        </member>
        <member name="P:Duality.GameObject.ComponentCount">
            <summary>
            [GET] The number of <see cref="T:Duality.Component"/>s this object consists of.
            </summary>
        </member>
        <member name="P:Duality.GameObject.Children">
            <summary>
            [GET] Enumerates this objects child GameObjects.
            </summary>
        </member>
        <member name="P:Duality.GameObject.ChildrenDeep">
            <summary>
            [GET] Enumerates all GameObjects that are directly or indirectly parented to this object, i.e. its
            children, grandchildren, etc.
            </summary>
        </member>
        <member name="P:Duality.GameObject.PrefabLink">
            <summary>
            [GET] The <see cref="T:Duality.Resources.PrefabLink"/> that connects this object to a <see cref="T:Duality.Resources.Prefab"/>.
            </summary>
            <seealso cref="T:Duality.Resources.PrefabLink"/>
            <seealso cref="T:Duality.Resources.Prefab"/>
        </member>
        <member name="P:Duality.GameObject.AffectedByPrefabLink">
            <summary>
            [GET] The <see cref="T:Duality.Resources.PrefabLink"/> that connects this object or one or its parent GameObjects to a <see cref="T:Duality.Resources.Prefab"/>.
            </summary>
            <remarks>
            This does not necessarily mean that this GameObject will be affected by the PrefabLink, since it might not be part of
            the linked Prefab. It simply indicates the returned PrefabLink's potential to adjust this GameObject when being applied.
            </remarks>
            <seealso cref="T:Duality.Resources.PrefabLink"/>
            <seealso cref="T:Duality.Resources.Prefab"/>
        </member>
        <member name="P:Duality.GameObject.Disposed">
            <summary>
            [GET] Returns whether this GameObject has been disposed. Disposed GameObjects are not to be used and should
            be treated specifically or as null references by your code.
            </summary>
        </member>
        <member name="P:Duality.GameObject.Transform">
            <summary>
            [GET] The GameObject's <see cref="T:Duality.Components.Transform"/> Component, if existing.
            </summary>
            <seealso cref="T:Duality.Components.Transform"/>
        </member>
        <member name="P:Duality.GameObject.Camera">
            <summary>
            [GET] The GameObject's <see cref="T:Duality.Components.Camera"/> Component, if existing.
            </summary>
            <seealso cref="T:Duality.Components.Camera"/>
        </member>
        <member name="P:Duality.GameObject.Renderer">
            <summary>
            [GET] The GameObject's <see cref="T:Duality.Components.Renderer"/> Component, if existing. 
            </summary>
            <remarks>Note that a GameObject may contain multiple Renderers in which case the return value of this property may be any of them.</remarks>
            <seealso cref="T:Duality.Components.Renderer"/>
        </member>
        <member name="E:Duality.GameObject.EventComponentAdded">
            <summary>
            Fired when a Component has been added to the GameObject
            </summary>
        </member>
        <member name="E:Duality.GameObject.EventComponentRemoving">
            <summary>
            Fired when a Component is about to be removed from the GameObject
            </summary>
        </member>
        <member name="T:Duality.Serialization.BinaryFormatter">
            <summary>
            De/Serializes object data.
            </summary>
            <seealso cref="T:Duality.Serialization.BinaryMetaFormatter"/>
        </member>
        <member name="F:Duality.Serialization.BinaryFormatter.fieldBlockers">
            <summary>
            A list of <see cref="T:System.Reflection.FieldInfo">field</see> blockers. If any registered field blocker
            returns true upon serializing a specific field, a default value is assumed instead.
            </summary>
        </member>
        <member name="F:Duality.Serialization.BinaryFormatter.surrogates">
            <summary>
            A list of <see cref="T:Duality.Serialization.ISurrogate">Serialization Surrogates</see>. If any of them
            matches the <see cref="T:System.Type"/> of an object that is to be serialized, instead of letting it
            serialize itsself, the <see cref="T:Duality.Serialization.ISurrogate"/> with the highest <see cref="P:Duality.Serialization.ISurrogate.Priority"/>
            is used instead.
            </summary>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatter.ClearFieldBlockers">
            <summary>
            Unregisters all <see cref="P:Duality.Serialization.BinaryFormatter.FieldBlockers"/>.
            </summary>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatter.AddFieldBlocker(System.Predicate{System.Reflection.FieldInfo})">
            <summary>
            Registers a new <see cref="P:Duality.Serialization.BinaryFormatter.FieldBlockers">FieldBlocker</see>.
            </summary>
            <param name="blocker"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatter.RemoveFieldBlocker(System.Predicate{System.Reflection.FieldInfo})">
            <summary>
            Unregisters an existing <see cref="P:Duality.Serialization.BinaryFormatter.FieldBlockers">FieldBlocker</see>.
            </summary>
            <param name="blocker"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatter.IsFieldBlocked(System.Reflection.FieldInfo)">
            <summary>
            Determines whether a specific <see cref="T:System.Reflection.FieldInfo">field</see> is blocked.
            Instead of writing the value of a blocked field, the matching <see cref="T:System.Type">Types</see>
            defautl value is assumed.
            </summary>
            <param name="field">The <see cref="T:System.Reflection.FieldInfo">field</see> in question</param>
            <returns>True, if the <see cref="T:System.Reflection.FieldInfo">field</see> is blocked, false if not.</returns>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatter.ClearSurrogates">
            <summary>
            Unregisters all <see cref="T:Duality.Serialization.ISurrogate">Surrogates</see>.
            </summary>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatter.AddSurrogate(Duality.Serialization.ISurrogate)">
            <summary>
            Registers a new <see cref="T:Duality.Serialization.ISurrogate">Surrogate</see>.
            </summary>
            <param name="surrogate"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatter.RemoveSurrogate(Duality.Serialization.ISurrogate)">
            <summary>
            Unregisters an existing <see cref="T:Duality.Serialization.ISurrogate">Surrogate</see>.
            </summary>
            <param name="surrogate"></param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatter.GetSurrogateFor(System.Type)">
            <summary>
            Retrieves a matching <see cref="T:Duality.Serialization.ISurrogate"/> for the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="t">The <see cref="T:System.Type"/> to retrieve a <see cref="T:Duality.Serialization.ISurrogate"/> for.</param>
            <returns></returns>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatter.WriteObject(System.Object)">
            <summary>
            Writes the specified object including all referenced objects using the <see cref="P:Duality.Serialization.BinaryFormatterBase.WriteTarget"/>.
            </summary>
            <param name="obj">The object to write.</param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatter.ReadObject">
            <summary>
            Reads an object including all referenced objects using the <see cref="P:Duality.Serialization.BinaryFormatterBase.ReadTarget"/>.
            </summary>
            <returns>The object that has been read.</returns>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatter.WriteMemberInfo(System.Object,System.UInt32)">
            <summary>
            Writes the specified <see cref="T:System.Reflection.MemberInfo"/>, including references objects.
            </summary>
            <param name="obj">The object to write.</param>
            <param name="id">The objects id.</param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatter.WriteArray(System.Object,Duality.Serialization.SerializeType,System.UInt32)">
            <summary>
            Writes the specified <see cref="T:System.Array"/>, including references objects.
            </summary>
            <param name="obj">The object to write.</param>
            <param name="objSerializeType">The <see cref="T:Duality.Serialization.SerializeType"/> describing the object.</param>
            <param name="id">The objects id.</param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatter.WriteStruct(System.Object,Duality.Serialization.SerializeType,System.UInt32)">
            <summary>
            Writes the specified structural object, including references objects.
            </summary>
            <param name="obj">The object to write.</param>
            <param name="objSerializeType">The <see cref="T:Duality.Serialization.SerializeType"/> describing the object.</param>
            <param name="id">The objects id.</param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatter.WriteDelegate(System.Object,Duality.Serialization.SerializeType,System.UInt32)">
            <summary>
            Writes the specified <see cref="T:System.Delegate"/>, including references objects.
            </summary>
            <param name="obj">The object to write.</param>
            <param name="objSerializeType">The <see cref="T:Duality.Serialization.SerializeType"/> describing the object.</param>
            <param name="id">The objects id.</param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatter.WriteEnum(System.Enum,Duality.Serialization.SerializeType)">
            <summary>
            Writes the specified <see cref="T:System.Enum"/>.
            </summary>
            <param name="obj">The object to write.</param>
            <param name="objSerializeType">The <see cref="T:Duality.Serialization.SerializeType"/> describing the object.</param>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatter.ReadArray">
            <summary>
            Reads an <see cref="T:System.Array"/>, including referenced objects.
            </summary>
            <returns>The object that has been read.</returns>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatter.ReadStruct">
            <summary>
            Reads a structural object, including referenced objects.
            </summary>
            <returns>The object that has been read.</returns>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatter.ReadObjectRef">
            <summary>
            Reads an object reference.
            </summary>
            <returns>The object that has been read.</returns>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatter.ReadMemberInfo(Duality.Serialization.DataType)">
            <summary>
            Reads a <see cref="T:System.Reflection.MemberInfo"/>, including referenced objects.
            </summary>
            <param name="dataType">The <see cref="T:Duality.Serialization.DataType"/> of the object to read.</param>
            <returns>The object that has been read.</returns>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatter.ReadDelegate">
            <summary>
            Reads a <see cref="T:System.Delegate"/>, including referenced objects.
            </summary>
            <returns>The object that has been read.</returns>
        </member>
        <member name="M:Duality.Serialization.BinaryFormatter.ReadEnum">
            <summary>
            Reads an <see cref="T:System.Enum"/>.
            </summary>
            <returns>The object that has been read.</returns>
        </member>
        <member name="P:Duality.Serialization.BinaryFormatter.FieldBlockers">
            <summary>
            [GET] Enumerates registered <see cref="T:System.Reflection.FieldInfo">field</see> blockers. If any registered field blocker
            returns true upon serializing a specific field, a default value is assumed instead.
            </summary>
        </member>
        <member name="P:Duality.Serialization.BinaryFormatter.Surrogates">
            <summary>
            [GET] Enumerates registered <see cref="T:Duality.Serialization.ISurrogate">Serialization Surrogates</see>. If any of them
            matches the <see cref="T:System.Type"/> of an object that is to be serialized, instead of letting it
            serialize itsself, the <see cref="T:Duality.Serialization.ISurrogate"/> with the highest <see cref="P:Duality.Serialization.ISurrogate.Priority"/>
            is used instead.
            </summary>
        </member>
        <member name="T:Duality.IContentRef">
            <summary>
            IContentRef is a general interface for <see cref="T:Duality.ContentRef`1">content references</see> of any <see cref="T:Duality.Resource"/> type.
            </summary>
            <seealso cref="T:Duality.Resource"/>
            <seealso cref="T:Duality.ContentProvider"/>
            <seealso cref="T:Duality.ContentRef`1"/>
        </member>
        <member name="M:Duality.IContentRef.Is(System.Type)">
            <summary>
            Determines if the references Resource's Type is assignable to the specified Type.
            </summary>
            <param name="resType">The Resource Type in question.</param>
            <returns>True, if the referenced Resource is of the specified Type or subclassing it.</returns>
        </member>
        <member name="M:Duality.IContentRef.Is``1">
            <summary>
            Determines if the references Resource's Type is assignable to the specified Type.
            </summary>
            <typeparam name="U">The Resource Type in question.</typeparam>
            <returns>True, if the referenced Resource is of the specified Type or subclassing it.</returns>
        </member>
        <member name="M:Duality.IContentRef.As``1">
            <summary>
            Creates a <see cref="T:Duality.ContentRef`1"/> of the specified Type, referencing the same Resource.
            </summary>
            <typeparam name="U">The Resource Type to create a reference of.</typeparam>
            <returns>
            A <see cref="T:Duality.ContentRef`1"/> of the specified Type, referencing the same Resource.
            Returns a <see cref="F:Duality.ContentRef`1.Null">null reference</see> if the Resource is not assignable
            to the specified Type.
            </returns>
        </member>
        <member name="P:Duality.IContentRef.Res">
            <summary>
            [GET] Returns the actual <see cref="T:Duality.Resource"/>. If currently unavailable, it is loaded and then returned.
            Because of that, this Property is only null if the references Resource is missing, invalid, or
            this content reference has been explicitly set to null. Never returns disposed Resources.
            </summary>
        </member>
        <member name="P:Duality.IContentRef.ResWeak">
            <summary>
            [GET] Returns the current reference to the Resource that is stored locally. No attemp is made to load or reload
            the Resource if currently unavailable.
            </summary>
        </member>
        <member name="P:Duality.IContentRef.ResType">
            <summary>
            [GET] The <see cref="T:System.Type"/> of the referenced Resource. If currently unavailable, this is determined by
            the Resource file path.
            </summary>
        </member>
        <member name="P:Duality.IContentRef.Path">
            <summary>
            [GET / SET] The path where to look for the Resource, if it is currently unavailable.
            </summary>
        </member>
        <member name="P:Duality.IContentRef.IsExplicitNull">
            <summary>
            [GET] Returns whether this content reference has been explicitly set to null.
            </summary>
        </member>
        <member name="P:Duality.IContentRef.IsAvailable">
            <summary>
            [GET] Returns whether this content reference is available in general. This may trigger loading it, if currently unavailable.
            </summary>
        </member>
        <member name="P:Duality.IContentRef.IsLoaded">
            <summary>
            [GET] Returns whether the referenced Resource is currently loaded.
            </summary>
        </member>
        <member name="P:Duality.IContentRef.IsDefaultContent">
            <summary>
            [GET] Returns whether the referenced Resource is part of Duality's embedded default content.
            </summary>
        </member>
        <!-- Ungültiger XML-Kommentar wurde für den Member "T:Duality.ContentRef`1" ignoriert -->
        <member name="F:Duality.ContentRef`1.Null">
            <summary>
            An explicit null reference.
            </summary>
        </member>
        <member name="M:Duality.ContentRef`1.#ctor(`0,System.String)">
            <summary>
            Creates a ContentRef pointing to the specified <see cref="T:Duality.Resource"/>, assuming the
            specified path as its origin, if the Resource itsself is either null or doesn't
            provide a valid <see cref="P:Duality.Resource.Path"/>.
            </summary>
            <param name="res">The Resource to reference.</param>
            <param name="altPath">The referenced Resource's file path.</param>
        </member>
        <member name="M:Duality.ContentRef`1.#ctor(`0)">
            <summary>
            Creates a ContentRef pointing to the specified <see cref="T:Duality.Resource"/>.
            </summary>
            <param name="res">The Resource to reference.</param>
        </member>
        <member name="M:Duality.ContentRef`1.Is(System.Type)">
            <summary>
            Determines if the references Resource's Type is assignable to the specified Type.
            </summary>
            <param name="resType">The Resource Type in question.</param>
            <returns>True, if the referenced Resource is of the specified Type or subclassing it.</returns>
        </member>
        <member name="M:Duality.ContentRef`1.Is``1">
            <summary>
            Determines if the references Resource's Type is assignable to the specified Type.
            </summary>
            <typeparam name="U">The Resource Type in question.</typeparam>
            <returns>True, if the referenced Resource is of the specified Type or subclassing it.</returns>
        </member>
        <member name="M:Duality.ContentRef`1.As``1">
            <summary>
            Creates a <see cref="T:Duality.ContentRef`1"/> of the specified Type, referencing the same Resource.
            </summary>
            <typeparam name="U">The Resource Type to create a reference of.</typeparam>
            <returns>
            A <see cref="T:Duality.ContentRef`1"/> of the specified Type, referencing the same Resource.
            Returns a <see cref="F:Duality.ContentRef`1.Null">null reference</see> if the Resource is not assignable
            to the specified Type.
            </returns>
        </member>
        <member name="M:Duality.ContentRef`1.MakeAvailable">
            <summary>
            Loads the associated content as if it was accessed now.
            You don't usually need to call this method. It is invoked implicitly by trying to access the ContentRef/>
            </summary>
        </member>
        <member name="M:Duality.ContentRef`1.op_Equality(Duality.ContentRef{`0},Duality.ContentRef{`0})">
            <summary>
            Compares two ContentRefs for equality.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
            <remarks>
            This is a two-step comparison. First, their actual Resources references are compared.
            If they're both not null and equal, true is returned. Otherwise, their Resource paths
            are compared for equality
            </remarks>
        </member>
        <member name="M:Duality.ContentRef`1.op_Inequality(Duality.ContentRef{`0},Duality.ContentRef{`0})">
            <summary>
            Compares two ContentRefs for inequality.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="P:Duality.ContentRef`1.Res">
            <summary>
            [GET / SET] The actual <see cref="T:Duality.Resource"/>. If currently unavailable, it is loaded and then returned.
            Because of that, this Property is only null if the references Resource is missing, invalid, or
            this content reference has been explicitly set to null. Never returns disposed Resources.
            </summary>
        </member>
        <member name="P:Duality.ContentRef`1.ResWeak">
            <summary>
            [GET] Returns the current reference to the Resource that is stored locally. No attemp is made to load or reload
            the Resource if currently unavailable.
            </summary>
        </member>
        <member name="P:Duality.ContentRef`1.ResType">
            <summary>
            [GET] The <see cref="T:System.Type"/> of the referenced Resource. If currently unavailable, this is determined by
            the Resource file path.
            </summary>
        </member>
        <member name="P:Duality.ContentRef`1.Path">
            <summary>
            [GET / SET] The path where to look for the Resource, if it is currently unavailable.
            </summary>
        </member>
        <member name="P:Duality.ContentRef`1.IsExplicitNull">
            <summary>
            [GET] Returns whether this content reference has been explicitly set to null.
            </summary>
        </member>
        <member name="P:Duality.ContentRef`1.IsAvailable">
            <summary>
            [GET] Returns whether this content reference is available in general. This may trigger loading it, if currently unavailable.
            </summary>
        </member>
        <member name="P:Duality.ContentRef`1.IsLoaded">
            <summary>
            [GET] Returns whether the referenced Resource is currently loaded.
            </summary>
        </member>
        <member name="P:Duality.ContentRef`1.IsDefaultContent">
            <summary>
            [GET] Returns whether the referenced Resource is part of Duality's embedded default content.
            </summary>
        </member>
        <member name="T:Duality.ContentProvider">
            <summary>
            <para>
            The ContentProvider is Duality's main instance for content management. If you need any kind of <see cref="T:Duality.Resource"/>,
            simply request it from the ContentProvider. It keeps track of which Resources are loaded and valid and prevents
            Resources from being loaded more than once at a time, thus reducing loading times and redundancy.
            </para>
            <para>
            You can also manually <see cref="M:Duality.ContentProvider.RegisterContent(System.String,Duality.Resource)">register Resources</see> that have been created at runtime 
            using a string alias of your choice.
            </para>
            </summary>
            <seealso cref="T:Duality.Resource"/>
            <seealso cref="T:Duality.ContentRef`1"/>
            <seealso cref="T:Duality.IContentRef"/>
        </member>
        <member name="F:Duality.ContentProvider.VirtualContentPath">
            <summary>
            (Virtual) base path for Duality's embedded default content.
            </summary>
        </member>
        <member name="M:Duality.ContentProvider.InitDefaultContent">
            <summary>
            Initializes Dualitys embedded default content.
            </summary>
        </member>
        <member name="M:Duality.ContentProvider.GetAllDefaultContent">
            <summary>
            Returns a list of all available embedded default content.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duality.ContentProvider.GetAvailContent``1">
            <summary>
            Returns a list of all available content matching the specified Type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Duality.ContentProvider.GetAvailContent(System.Type)">
            <summary>
            Returns a list of all available content matching the specified Type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Duality.ContentProvider.ClearContent(System.Boolean)">
            <summary>
            Clears all non-default content.
            </summary>
            <param name="dispose">If true, unregistered content is also disposed.</param>
        </member>
        <member name="M:Duality.ContentProvider.RegisterContent(System.String,Duality.Resource)">
            <summary>
            Registers a <see cref="T:Duality.Resource"/> and maps it to the specified path key.
            </summary>
            <param name="path">The path key to map the Resource to</param>
            <param name="content">The Resource to register.</param>
        </member>
        <member name="M:Duality.ContentProvider.IsContentRegistered(System.String)">
            <summary>
            Returns whether or not there is any content currently registered under the specified path key.
            </summary>
            <param name="path">The path key to look for content</param>
            <returns>True, if there is content available for that path key, false if not.</returns>
        </member>
        <member name="M:Duality.ContentProvider.UnregisterContent(System.String,System.Boolean)">
            <summary>
            Unregisters content that has been registered using the specified path key.
            </summary>
            <param name="path">The path key to unregister.</param>
            <param name="dispose">If true, unregistered content is also disposed.</param>
            <returns>True, if the content has been found and successfully removed. False, if no</returns>
        </member>
        <member name="M:Duality.ContentProvider.UnregisterContentTree(System.String,System.Boolean)">
            <summary>
            Unregisters all content that has been registered using paths contained within
            the specified directory.
            </summary>
            <param name="dir">The directory to unregister</param>
            <param name="dispose">If true, unregistered content is also disposed.</param>
        </member>
        <member name="M:Duality.ContentProvider.UnregisterAllContent``1(System.Boolean)">
            <summary>
            Unregisters all content of the specified Type or subclassed Types.
            </summary>
            <typeparam name="T">The content Type to look for.</typeparam>
            <param name="dispose">If true, unregistered content is also disposed.</param>
        </member>
        <member name="M:Duality.ContentProvider.UnregisterAllContent(System.Type,System.Boolean)">
            <summary>
            Unregisters all content of the specified Type or subclassed Types.
            </summary>
            <param name="t">The content Type to look for.</param>
            <param name="dispose">If true, unregistered content is also disposed.</param>
        </member>
        <member name="M:Duality.ContentProvider.RenameContent(System.String,System.String)">
            <summary>
            Changes the path key under which a specific Resource can be found.
            </summary>
            <param name="path">The Resources current path key.</param>
            <param name="newPath">The Resources new path key.</param>
            <returns>True, if the renaming operation was successful. False, if not.</returns>
        </member>
        <member name="M:Duality.ContentProvider.RenameContentTree(System.String,System.String)">
            <summary>
            Changes the path key under which a set of Resource can be found, i.e.
            renames all path keys located inside the specified directory.
            </summary>
            <param name="dir">The Resources current directory</param>
            <param name="newDir">The Resources new directory</param>
        </member>
        <member name="M:Duality.ContentProvider.RequestContent``1(System.String)">
            <summary>
            Requests a <see cref="T:Duality.Resource"/>.
            </summary>
            <typeparam name="T">
            The requested Resource type. Does not affect actual data, only the kind of <see cref="T:Duality.ContentRef`1"/> that is obtained.
            </typeparam>
            <param name="path">
            The path key to identify the Resource. If there is no matching Resource available yet, the ContentProvider attemps
            to load a Resource from that path.
            </param>
            <returns>A <see cref="T:Duality.ContentRef`1"/> to the requested Resource.</returns>
        </member>
        <member name="M:Duality.ContentProvider.RequestContent(System.String)">
            <summary>
            Requests a <see cref="T:Duality.Resource"/>.
            </summary>
            <param name="path">
            The path key to identify the Resource. If there is no matching Resource available yet, the ContentProvider attemps
            to load a Resource from that path.
            </param>
            <returns>A <see cref="T:Duality.IContentRef"/> to the requested Resource.</returns>
        </member>
    </members>
</doc>
