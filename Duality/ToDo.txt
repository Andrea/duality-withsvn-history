
-->	Duality Tasks (overall)
	-->	Particle Systems & Particle Editor
	-->	Scripts (Each deriving from Script-Baseclass)
	-->	(Property) Animations & Animation Editor
	-->	??? Ingame GUI & GUI Editor

-->	Dualitor: PerformanceMonitor

--> Address the issues from the Issue Tracker: https://code.google.com/p/duality/issues/list



-->	Idea: Bitmap Fonts
	-->	Let a Font specify an optional base Texture. It is used as a fixed Bitmap Font
	-->	Method: MakeBitmapFont(), saves the internal Texture, assigns it, triggers a reload and returns a ContentRef to the new Texture
	-->	Editor Action: Convert to Bitmap Font
	-->	Editor automatism: Reload Bitmap Fonts when their base Texture changed.

-->	Idea: Tilemaps
	-->	Implement as a standard plugin.
		-->	Not every type of project needs tilemaps and they're nicely self-contained.
		-->	Also, some projects might need custom tilemaps, such as a dynamically lit one.
	-->	Resource: Tileset
		-->	References an Atlas Texture, detect tiles by Atlas
			-->	What about additional texture layers for data such as normalmaps, specularmaps, etc.?
			-->	Reference a Material instead, it allows multiple layers and custom data
		-->	Tile Size derived from Atlas
		-->	Stores tile data
			-->	Collision data (Bitmask of 4 edge vertices, each may be blocking or free)
			-->	AutoTile features
			-->	Additional custom data
				-->	Object tag?
	-->	Component: Tilemap
		-->	Maybe split it? Tilemap, TilemapRenderer
		-->	Stores tilemap data
		-->	Renders the tilemap
			-->	As usual, support ColorTint and a custom Material (BatchInfo)
			-->	Cache vertex data, do it in a single drawcall, perform rectangular culling
				-->	See Rpg Project / ZweiDe
			-->	Just behave like the SpriteRenderer and act as an expanded point / based on a single PreprocessCoords call
		-->	If active and a RigidBody Component is present, automatically generates / updates the RigidBodies shape consisting of LoopShapes.
			-->	Enforce static RigidBody
			-->	Allow additional, custom shapes.
				-->	Just don't affect any shapes that haven't been created by the Tilemap.
	-->	Dualitor: Tileset Editor
		-->	Separate Editor
		-->	New: Ability to select a set of tiles which is a global Selection event
			and allows tile data property editing in the PropertyGrid
			-->	How to init / edit additional custom data (Editor doesn't know what to do with a null Object tag)?
			-->	A Tilemap could 
		-->	See Rpg Project
	-->	Dualitor: Tilemap Editor
		-->	CamViewState
		-->	See Rpg Project



--> Idea: StartScreen Tab

-->	Idea: "Stop and Apply" function for Sandbox
	-->	While the Sandbox is active, it tracks which Properties have been actively modified
		-->	(Scene change flushes the record)
	-->	When clicking "Stop and Apply", the modified Properties are applied to the unmodified Scene.

-->	Idea: Add ActionButtonPropertyEditor and auto-use it in MemberwisePropertyEditor
	-->	It's possible to flag a method as editor action via EditorHintFlags
	-->	This method becomes an additional ActionButtonPropertyEditor
	-->	Which is itself a GroupedPropertyEditor with an execute-button
	-->	Parameters to use are child-Properties
	-->	Add this whole functionality in PropertyGrid-Project itself?
		-->	Can't. It requires EditorHintFlags.
		-->	Also, this here will prove / assure PropertyGrids customization support

-->	Idea: Component Wizard
	-->	See below for dialog concept
	-->	Implement in a separate plugin so it is possible to opt-out.
	-->	Work based on a "Parse and Write C# Code" approach
		-->	CodeDomProvider.Parse Method
		-->	CodeDomProvider.GenerateCodeFromCompileUnit Method
		-->	Unfortunately, DotNet doesn't implement the parse method.
		-->	Use NRefactory instead?
			-->	Pro: Seems to be really, really good at what it does
			-->	Pro: Could provide really cool "Here, let me edit your code for you" features
			-->	Con: It's huge.
		-->	Test this approach before by replacing all currently existing C# code interaction with it
			-->	Measure how fast it is. Is it performant enough?
			-->	Compare to current solution.
	-->	Use MsBuild to auto-rebuild core plugins (not the whole solution)
	-->	Also provide editing for existing Components (Rightclick ..> Edit)
		-->	Shortcut-Shortcut: Rightclick --> Add Property...



-->	Refactor: VertexFormat
	-->	Remove all Drawcall-Code from VertexFormats
	-->	Introduce VertexDeclaration class that holds data about a VertexFormat in an abstract way
	-->	Each VertexFormat returns a VertexDeclaration through the interface
	-->	TypeIndex should also go there and be managed automatically
	-->	Don're require VertexFormats to be registered somewhere. Instead, just create the declaration on-demand
		and do any required operations in the base class.

-->	Refactor: Don't expose OpenTK enums in Texture class. Instead, define Duality enums:
	-->	DownscaleFilter:	Nearest, Bilinear, Trilinear, Anisotropic
	-->	UpscaleFilter:		Nearest, Bilinear
	-->	WrapMode:			Clamp, Repeat, Mirror
	-->	PixelFormat:		Rgba, Rgb, LuminanceAlpha, Alpha, Luminance, Depth, RgbaF

--> Reconsider "events" in Duality.
	-->	Are they really necessary?
		-->	In some cases: Yes. Whenever an object needs to react directly to something.
		-->	RigidBody needs EventTransformChanged
		-->	Transform should be able to directly react to parent changes and such
	-->	They are NonSerialized by design.
		-->	Serializing events introduces a whole lot of problems, because
			every registered object will be dragged into the serialization process
		-->	GameObjectManagers do not belong there. Editor-Stuff doesn't either.
		-->	Users may easily double-register by accident, if they are persistent.
			It's harder to work with them that way.
	-->	GameObject events shouldn't be about Components
		-->	User Components can't do this, so don't do it on the engine side as well.
		-->	GameObjects should also not care about Component listener stuff. Same reason.


		
	
		
-->	Concept for "Component Wizard" dialog / editor:
	Das bezieht sich natürlich nicht auf deinen Grundgedanken sondern auf die Implikationen, welche das Bild das ich vom Feature Request insgesamt gewonnen habe mit sich bringt. Insofern würd ich erstmal sagen "Nein, so in der Form halte ich das für keine gute Idee", was aber nichts am Problem ändert das dein Feature hätte lösen sollen. Folgendes wäre ein alternativer Ansatz, den ich mir gut vorstellen könnte:

	--> Implementierung eines neuen Sub-Editors oder Dialogfelds, dem "Component Wizard" (o.Ä.)
	--> Aufgabe dessen ist es, auf Basis einiger Angaben, z.B. einer Auflistung von Property-Definitionen eine Komponentenklasse im Projekt zu erstellen. 
	--> Dabei können dann auch so Späße getrieben werden wie automatisch die Backend-Fields generieren, triviale Getter und Setter implementieren und sowas. Das Ergebnis wird als .cs-Code File im Projekt abgelegt und über Bearbeitung der Projektdatei automatisch hinzugefügt.
	--> Wenn es mir gelingt, über Dualitor Visual Studio dazu zu bewegen, ein bestimmtes Projekt neu zu kompilieren, dann könnte der Component Wizard auch das automatisch veranlassen, sobald die neue Komponentenklasse erstellt wurde
	--> Ist letzteres der Fall wäre es denkbar, im Editor einige Shortcuts einzufügen, die den Component Wizard aufrufen, z.B. direkt im PropertyGrid oder als Rechtsklick-Aktion auf ein GameObject. 

	Im Idealfall wäre der Ablauf also:
	1. GameObject (z.B. Asteroid) erstellen und damit rumbasteln bis zufrieden
	2. Rechtsklick auf GameObject --> "Add custom Component" --> Component Wizard wird aufgerufen
	3. Gewünschte Konfiguration im Component Wizard festlegen
	4. Klick auf "Ok" sorgt für Neukompilierung des Core Plugins, was automatisch zum Neuladen dieses führt
	5. Anschließend kann der neue Komponententyp per Reflection gefunden und automatisch an das GameObject angefügt werden.

	Die Schritte 4 und 5 können natürlich nur umgesetzt werden, wenn ich diese Sache mit Visual Studio ansteuern hinbekomme. Mir ist zwar klar dass ich auch programmatisch ohne Probleme C# Code kompilieren kann, aber effektiv würde ich mit dem manuellen Versuch schon wieder eine neue Baustelle für mögliche Inkonsistenzen einführen, falls ich ein bestimmtes Verhalten in Bezug auf Projektkonfiguration falsch (oder anders als Visual Studio) emuliere. Von daher würde ich hier klar sagen "entweder VS selbst kompilieren lassen oder gar nicht".
		
		
		
		
		


-->	Isometric perspective: How to implement for a game?
	-->	Should actually use the Z Component, but apply it other than currently
	-->	Maybe just utilize PreprocessCoords to add Z to Y?
		-->	Will that work in all cases? Editor? Canvas? Any Renderer?
	-->	Is it really necessary to adjust the Camera? Isn't it possible to 
		adjust objects and rendering setup on the Game-side?

-->	Keep in mind: Saving GameObjects with PrefabLinks is currently highly data-redundant.
	-->	When in ExecutionContext.Editor, consider not saving Components that are part of the Prefab.
	-->	Can't do the same with GameObjects though, because their index is used to locate them when applying
		the PrefabLink. Changing the order or removing existing GameObjects requires extra consideration.


############### HOWTO: Obtain the Z-Pos of a rendered pixel relative to the Camera ###############

//Vector3 screenPos = new Vector3(0.5f, 0.5f, 0.0f);
//GL.ReadPixels(this.pickingTex.PxWidth / 2, this.pickingTex.PxHeight / 2, 1, 1, PixelFormat.DepthComponent, PixelType.Float, ref screenPos.Z);
//screenPos -= Vector3.One * 0.5f;
//screenPos *= 2.0f;
//Matrix4 matTemp = this.matFinal;
//matTemp.Invert();
//Vector3.Transform(ref screenPos, ref matTemp, out screenPos);
//Log.Editor.Write("{0:F},\t{1:F},\t{2:F}", screenPos.X, screenPos.Y, screenPos.Z);