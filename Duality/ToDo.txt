
-->	Documentation, Online Help, Tutorials, Project pages, etc.
	-->	Website reference as Fetzenet-Subdomain, like "http://ddoc.fetzenet.de"
		-->	Probably combined with a fetzenet-local google search?
		-->	Download version (.chm) as google code download
	-->	Tutorials & Examples in google code wiki pages
	-->	Don't forget to link the online reference (Fetzenet) from google code

-->	Maybe find some testers?


-->	Possible schedule:
	1.	Implement sandbox mode for editor
	2.	Implement physics & use sandbox for testing

-->	Duality Tasks (overall)
	-->	Editor Sandbox (Play | Pause | Reset)
	-->	Physics & Collision Detection
	-->	Particle Systems & Particle Editor
	-->	Ingame GUI & GUI Editor
	-->	(Property) Animations & Animation Editor

-->	Editor Sandbox:
	-->	Play:	Switch Duality's execution context and caus the editor to mimic the
				launchers behaviour, i.e. perform actual updates, etc.
				Right before doing that, make a temporary backup of the current Scene.
	-->	Pause:	Switches back to editor context & behaviour (only EditorUpdate, not Update, etc.)
	-->	Reset:	Switch back to editor behaviour and load Scene backup.

	-->	When in sandbox mode, disable the save scene button. The current Scene is temporary.
	-->	Also be sure to adjust the ObjectInspector to update itsself periodically when in sandbox mode.
	-->	The same applies for any visible CamView. Render yourself periodically!
	-->	The SceneView should keep itsself up-to-date already, because it's hooked in Scene events.




-->	Keep in mind: Saving GameObjects with PrefabLinks is currently highly data-redundant.
	-->	When in ExecutionContext.Editor, consider not saving Components that are part of the Prefab.
	-->	Can't do the same with GameObjects though, because their index is used to locate them when applying
		the PrefabLink. Changing the order or removing existing GameObjects requires extra consideration.