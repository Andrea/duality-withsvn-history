
-->	GameMaker-Aufbau, User-Code nur via "Scripting", stark an Unity orientiert

--> Zweiteiliger Aufbau:
	-->	Visual Editor
		--> WYSIWYG-Editor für Level und Objekte
		--> Sandboxmodus
			--> Jederzeit "Play", "Pause" oder "Reset" verfügbar, Live-Bearbeitung möglich.
		--> Generiert Visual Studio Klassenbibliothek-Projekt für Scripte
			-->	Scripting direkt mit C# in VS.
			-->	Kompilieren der Scripte auf User-Seite: Duality liest nur .dll ein.
			-->	Referenzierung der Skripte über Reflection im Editor
			-->	Darüber nachdenken, OpenTK wenn möglich komplett aus den Scripten
				heraus zu halten und wichtige Teile ggf. nach Duality zu migrieren.
	-->	Launcher
		-->	Liest fertige Projekte ein, startet sie.

-->	Component Based GameObjects

--> Jedes Objekt sollte vollständig serialisierbar sein
	-->	Speichern / Laden
	--> Klonen
	
-->	Prefabs
	-->	Möglichkeit zur Instanziierung vorgefertigter Objekte
		-->	Mit Prefab initialisiertes Objekt wird nicht vollständig
			gespeichert, sondern lediglich als Prefab-Link zusammen mit
			einer Liste von Member-Modifikationen
		--> Ohne Prefab-Link wird doch das gesamte Objekt gespeichert
	-->	Serialisierte Form einer Objekthierarchie
		-->	Objekte der Hierarchie können selbst Prefab-Links enthalten (s.O.)
		-->	Ein Prefab kann also wieder auf anderen Prefabs basieren
		-->	Bei der Deserialisierung gehen alle Prefab-Links verloren.
	-->	Wichtig: Schnelle instanziierung.
		-->	Prefab-Cache aufbauen, einmal geladene Prefabs müssen 
			zur Instanziierung so nur noch geklont werden.
		-->	In der gecacheten (deserialisierten) Version sind alle Prefab-Links
			aufgelöst.