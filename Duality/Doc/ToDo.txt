
-->	Debug:
	-->	Get Postprocessing RTT right. Something wrong with the coordinates when
		rendering from RT to another RT (of different size?)
		Take a look at this line:
		if (RenderTarget.BoundRT.IsAvailable) GL.Scale(1.0f, -1.0f, 1.0f);
		Sometimes works "better" without it ..?
	-->	Fix RT / Tex updating. When changing a textures size that is used in a
		RenderTarget, it sometimes completely refuses to update. Could hitting
		unsupported values be a possible cause?
	-->	Don't propagate a MemberwisePropertyEditor's modified state to its
		child editors. It really is a mess.

-->	Test the postprocessing system
	4.	Multiple bounces (3 or more stages)
		-->	Maybe apply the previously used shader multiple times?
		-->	Maybe try some simple blur?
	5.	Split Rendering (2 stages)
		-->	Render color data to multiple textures at once (Multi-RenderTarget)
			while splitting up the information
		-->	Render to screen and put together all information using a shader
		-->	With and without multisampling


-->	Checklist for first Game: Asteroids
	-->	Any Usability stuff that comes up while editing / creating the game

	-->	Title Scene
	-->	Game Scene (No levels, dynamically creates stages)
	-->	Highscore Scene


-->	Usability
	-->	If a SpriteRenderer is attached a Material, consider auto-updating the Rect
	-->	Non-Parallax objects shouldn't be pickable in a parallax CamView
		-->	Selective picking / picking predicate
	-->	Is it possible to recover from deleting classes in a plugin that are still used?
	-->	Find some generalized, Plugin-friendly interface for defining such special behaviour:
		-->	Dragdrop Material to SpriteRenderer: Set SharedMaterial
		-->	Dragdrop Material to GameObject (both CamView & SceneView): If it has a SpriteRenderer, set SharedMaterial

-->	Editor Skeletton
	-->	Sandbox (Play | Pause | Reset)