<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp">
  <head>
    <link rel="SHORTCUT ICON" href="./../icons/favicon.ico" />
    <style type="text/css">.OH_CodeSnippetContainerTabLeftActive, .OH_CodeSnippetContainerTabLeft,.OH_CodeSnippetContainerTabLeftDisabled { backgroundImageName: tabLeftBG.gif; }.OH_CodeSnippetContainerTabRightActive, .OH_CodeSnippetContainerTabRight,.OH_CodeSnippetContainerTabRightDisabled { backgroundImageName: tabRightBG.gif; }.OH_footer { backgroundImageName: footer_slice.gif; background-position: top; background-repeat: repeat-x; }</style>
    <link rel="stylesheet" type="text/css" href="./../styles/branding.css" />
    <link rel="stylesheet" type="text/css" href="./../styles/branding-en-US.css" />
    <style type="text/css">
			body
			{
			border-left:5px solid #e6e6e6;
			overflow-x:scroll;
			overflow-y:scroll;
			}
		</style>
    <script src="./../scripts/branding.js" type="text/javascript">
      <!---->
    </script>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <title>MathF Members</title>
    <meta name="Language" content="en-us" />
    <meta name="System.Keywords" content="MathF class" />
    <meta name="System.Keywords" content="MathF class, all members" />
    <meta name="System.Keywords" content="Duality.MathF class" />
    <meta name="Microsoft.Help.Id" content="AllMembers.T:Duality.MathF" />
    <meta name="Microsoft.Help.ContentType" content="Reference" />
    <meta name="BrandingAware" content="'true'" />
    <meta name="container" content="Duality" />
    <meta name="file" content="AllMembers_T_Duality_MathF" />
    <meta name="guid" content="AllMembers_T_Duality_MathF" />
    
    <meta name="SelfBranded" content="true" />
  </head>
  <body onload="onLoad()" class="primary-mtps-offline-document">
    <div class="OH_outerDiv">
      <div class="OH_outerContent">
        <table class="TitleTable">
          <tr>
            <td class="OH_tdTitleColumn">MathF Members</td>
            <td class="OH_tdRunningTitleColumn">Duality Documentation</td>
          </tr>
        </table>
        <div id="mainSection">
          <div id="mainBody">
            <span class="introStyle"></span>
            <p></p>The <a href="T_Duality_MathF.htm" target="">MathF</a> type exposes the following members.<div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Methods</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><table id="memberList" class="members"><tr><th class="ps_iconColumn">
							 
						</th><th class="ps_nameColumn">Name</th><th class="ps_descriptionColumn">Description</th></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_Abs.htm" target="">Abs(Int32)</a></td><td><div class="summary">
            Returns the absolute value of a <img src="./../icons/online_icon.gif" class="OH_offlineIcon" alt="Online" title="Online" /><a href="http://msdn2.microsoft.com/en-us/library/td2s409d" target="_blank">Int32</a>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_Abs_1.htm" target="">Abs(Single)</a></td><td><div class="summary">
            Returns the absolute value of a <img src="./../icons/online_icon.gif" class="OH_offlineIcon" alt="Online" title="Online" /><a href="http://msdn2.microsoft.com/en-us/library/3www918f" target="_blank">Single</a>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_Acos.htm" target="">Acos</a></td><td><div class="summary">
            Returns the inverse cosine value of the specified (radian) angle.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_Angle.htm" target="">Angle(Single, Single)</a></td><td><div class="summary">
            Calculates the angle from [0,0] to a specified point in 2D space.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_Angle_1.htm" target="">Angle(Single, Single, Single, Single)</a></td><td><div class="summary">
            Calculates the angle between two points in 2D space.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_Asin.htm" target="">Asin</a></td><td><div class="summary">
            Returns the inverse sine value of the specified (radian) angle.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_Atan.htm" target="">Atan</a></td><td><div class="summary">
            Returns the inverse tangent value of the specified (radian) angle.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_Atan2.htm" target="">Atan2</a></td><td><div class="summary">
            Returns the (radian) angle whose tangent is the quotient of two specified numbers.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_Ceiling.htm" target="">Ceiling</a></td><td><div class="summary">
            Returns the lowest whole-number bigger than the specified one. (Rounds up)
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_CircularDist_1.htm" target="">CircularDist(Single, Single)</a></td><td><div class="summary">
            Calculates the distance between two angular (radian) values.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_CircularDist.htm" target="">CircularDist(Int32, Int32, Int32, Int32)</a></td><td><div class="summary">
            Calculates the distance between two values assuming a circular value area.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_CircularDist_2.htm" target="">CircularDist(Single, Single, Single, Single)</a></td><td><div class="summary">
            Calculates the distance between two values assuming a circular value area.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_Clamp.htm" target="">Clamp(Int32, Int32, Int32)</a></td><td><div class="summary">
            Clamps a value between minimum and maximum.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_Clamp_1.htm" target="">Clamp(Single, Single, Single)</a></td><td><div class="summary">
            Clamps a value between minimum and maximum.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_CombineHashCode_1.htm" target="">CombineHashCode(<span id="ID0EDAB0FC0BEAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EDAB0FC0BEAAAAA?vb=|cpp=array&lt;|cs=|fs=|nu=");
				</script>Int32<span id="ID0EBAB0FC0BEAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBAB0FC0BEAAAAA?vb=()|cpp=&gt;|cs=[]|fs=[]|nu=[]");
				</script>)</a></td><td><div class="summary">
            Combines any number of hash codes.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_CombineHashCode.htm" target="">CombineHashCode(Int32<span id="ID0EBAB0EC0BEAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBAB0EC0BEAAAAA?vb=|cpp=%|cs=|fs=|nu=");
				</script>, Int32)</a></td><td><div class="summary">
            Combines two hash codes.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_Cos.htm" target="">Cos</a></td><td><div class="summary">
            Returns the cosine value of the specified (radian) angle.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_DegToRad.htm" target="">DegToRad</a></td><td><div class="summary">
            Converts degrees  to radians.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_Distance.htm" target="">Distance(Single, Single)</a></td><td><div class="summary">
            Returns the distance between a point and [0,0] in 2d space.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_Distance_1.htm" target="">Distance(Single, Single, Single, Single)</a></td><td><div class="summary">
            Returns the distance between two points in 2d space.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_DistanceQuad.htm" target="">DistanceQuad(Single, Single)</a></td><td><div class="summary">
            Returns the squared distance between a point and [0,0] in 2d space.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_DistanceQuad_1.htm" target="">DistanceQuad(Single, Single, Single, Single)</a></td><td><div class="summary">
            Returns the squared distance between two points in 2d space.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_Exp.htm" target="">Exp</a></td><td><div class="summary">
            Returns the specified power of <a href="F_Duality_MathF_E.htm" target="">E</a>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_Factorial.htm" target="">Factorial</a></td><td><div class="summary">
            Returns the factorial of an integer value.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_Floor.htm" target="">Floor</a></td><td><div class="summary">
            Returns the highest whole-number smaller than the specified one. (Rounds down)
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_GetLinearPrediction.htm" target="">GetLinearPrediction</a></td><td><div class="summary">
            Assuming two objects travelling at a linear course with constant speed and angle, this method
            calculates at which point they may collide if the angle of object 1 is not defined by a specific
            (but constant!) value.
            In other words: If object 1 tries to hit object 2, let object 1 move towards the calculated point.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_GetLinearPrediction2.htm" target="">GetLinearPrediction2</a></td><td><div class="summary">
            Assuming two objects travelling at a linear course with constant speed and angle, this method
            calculates the time from now at which the distance between the two objects will be minimal. If
            this has already passed, the returned time is negative.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_GetTransformDotVec_1.htm" target="">GetTransformDotVec(Single, Vector2<span id="ID0EDAB0YB0BEAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EDAB0YB0BEAAAAA?vb=|cpp=%|cs=|fs=|nu=");
				</script>, Vector2<span id="ID0EBAB0YB0BEAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBAB0YB0BEAAAAA?vb=|cpp=%|cs=|fs=|nu=");
				</script>)</a></td><td><div class="summary">
            Prepares a 2d transformation (rotation).
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_GetTransformDotVec.htm" target="">GetTransformDotVec(Single, Vector2, Vector2<span id="ID0EDAB0XB0BEAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EDAB0XB0BEAAAAA?vb=|cpp=%|cs=|fs=|nu=");
				</script>, Vector2<span id="ID0EBAB0XB0BEAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBAB0XB0BEAAAAA?vb=|cpp=%|cs=|fs=|nu=");
				</script>)</a></td><td></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_GetTransformDotVec_2.htm" target="">GetTransformDotVec(Single, Single, Vector2<span id="ID0EDAB0WB0BEAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EDAB0WB0BEAAAAA?vb=|cpp=%|cs=|fs=|nu=");
				</script>, Vector2<span id="ID0EBAB0WB0BEAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBAB0WB0BEAAAAA?vb=|cpp=%|cs=|fs=|nu=");
				</script>)</a></td><td></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_IsPolygonConvex.htm" target="">IsPolygonConvex</a></td><td><div class="summary">
            Returns whether or not the specified polygon is convex.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_LinesCross.htm" target="">LinesCross(Single, Single, Single, Single, Single, Single, Single, Single, Boolean)</a></td><td><div class="summary">
            Checks, if two line segments (or infinite lines) cross and determines their mutual point.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_LinesCross_1.htm" target="">LinesCross(Single, Single, Single, Single, Single, Single, Single, Single, Single<span id="ID0EDAB0TB0BEAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EDAB0TB0BEAAAAA?vb=|cpp=%|cs=|fs=|nu=");
				</script>, Single<span id="ID0EBAB0TB0BEAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBAB0TB0BEAAAAA?vb=|cpp=%|cs=|fs=|nu=");
				</script>, Boolean)</a></td><td><div class="summary">
            Checks, if two line segments (or infinite lines) cross and determines their mutual point.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_Log.htm" target="">Log(Single)</a></td><td><div class="summary">
            Returns the natural logarithm of a value.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_Log_1.htm" target="">Log(Single, Single)</a></td><td><div class="summary">
            Returns the logarithm of a value.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_Max_3.htm" target="">Max(<span id="ID0EDAB0QB0BEAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EDAB0QB0BEAAAAA?vb=|cpp=array&lt;|cs=|fs=|nu=");
				</script>Int32<span id="ID0EBAB0QB0BEAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBAB0QB0BEAAAAA?vb=()|cpp=&gt;|cs=[]|fs=[]|nu=[]");
				</script>)</a></td><td><div class="summary">
            Returns the highest of any number of values.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_Max_7.htm" target="">Max(<span id="ID0EDAB0PB0BEAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EDAB0PB0BEAAAAA?vb=|cpp=array&lt;|cs=|fs=|nu=");
				</script>Single<span id="ID0EBAB0PB0BEAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBAB0PB0BEAAAAA?vb=()|cpp=&gt;|cs=[]|fs=[]|nu=[]");
				</script>)</a></td><td><div class="summary">
            Returns the highest of any number of values.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_Max.htm" target="">Max(Int32, Int32)</a></td><td><div class="summary">
            Returns the higher of two values.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_Max_4.htm" target="">Max(Single, Single)</a></td><td><div class="summary">
            Returns the higher of two values.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_Max_1.htm" target="">Max(Int32, Int32, Int32)</a></td><td><div class="summary">
            Returns the highest of three values.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_Max_5.htm" target="">Max(Single, Single, Single)</a></td><td><div class="summary">
            Returns the highest of three values.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_Max_2.htm" target="">Max(Int32, Int32, Int32, Int32)</a></td><td><div class="summary">
            Returns the highest of four values.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_Max_6.htm" target="">Max(Single, Single, Single, Single)</a></td><td><div class="summary">
            Returns the highest of four values.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_Min_3.htm" target="">Min(<span id="ID0EDAB0IB0BEAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EDAB0IB0BEAAAAA?vb=|cpp=array&lt;|cs=|fs=|nu=");
				</script>Int32<span id="ID0EBAB0IB0BEAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBAB0IB0BEAAAAA?vb=()|cpp=&gt;|cs=[]|fs=[]|nu=[]");
				</script>)</a></td><td><div class="summary">
            Returns the lowest of any number of values.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_Min_7.htm" target="">Min(<span id="ID0EDAB0HB0BEAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EDAB0HB0BEAAAAA?vb=|cpp=array&lt;|cs=|fs=|nu=");
				</script>Single<span id="ID0EBAB0HB0BEAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBAB0HB0BEAAAAA?vb=()|cpp=&gt;|cs=[]|fs=[]|nu=[]");
				</script>)</a></td><td><div class="summary">
            Returns the lowest of any number of values.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_Min.htm" target="">Min(Int32, Int32)</a></td><td><div class="summary">
            Returns the lower of two values.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_Min_4.htm" target="">Min(Single, Single)</a></td><td><div class="summary">
            Returns the lower of two values.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_Min_1.htm" target="">Min(Int32, Int32, Int32)</a></td><td><div class="summary">
            Returns the lowest of three values.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_Min_5.htm" target="">Min(Single, Single, Single)</a></td><td><div class="summary">
            Returns the lowest of three values.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_Min_2.htm" target="">Min(Int32, Int32, Int32, Int32)</a></td><td><div class="summary">
            Returns the lowest of four values.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_Min_6.htm" target="">Min(Single, Single, Single, Single)</a></td><td><div class="summary">
            Returns the lowest of four values.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_NextPowerOfTwo.htm" target="">NextPowerOfTwo</a></td><td><div class="summary">
            Returns the next power of two that is larger than the specified number.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_NormalizeAngle.htm" target="">NormalizeAngle</a></td><td><div class="summary">
            Normalizes a radian angle to values between zero and <a href="F_Duality_MathF_TwoPi.htm" target="">TwoPi</a>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_NormalizeVar.htm" target="">NormalizeVar(Int32, Int32, Int32)</a></td><td><div class="summary">
            Normalizes a value to the given circular area.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_NormalizeVar_1.htm" target="">NormalizeVar(Single, Single, Single)</a></td><td><div class="summary">
            Normalizes a value to the given circular area.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_PointLineDistance.htm" target="">PointLineDistance</a></td><td><div class="summary">
            Calculates the distance between a point and a line segment (or infinite line).
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_PointLineNearestPoint.htm" target="">PointLineNearestPoint</a></td><td><div class="summary">
            Calculates the point on a line segment (or infinite line) that has the lowest possible
            distance to a point.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_Pow.htm" target="">Pow</a></td><td><div class="summary">
            Returns the specified power of a value.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_RadToDeg.htm" target="">RadToDeg</a></td><td><div class="summary">
            Converts radians to degrees.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_Round.htm" target="">Round(Single)</a></td><td><div class="summary">
            Rounds the specified value.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_Round_1.htm" target="">Round(Single, Int32)</a></td><td><div class="summary">
            Rounds the specified value to a certain number of fraction digits.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_Round_3.htm" target="">Round(Single, MidpointRounding)</a></td><td><div class="summary">
            Rounds the specified value.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_Round_2.htm" target="">Round(Single, Int32, MidpointRounding)</a></td><td><div class="summary">
            Rounds the specified value to a certain number of fraction digits.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_RoundToInt.htm" target="">RoundToInt(Single)</a></td><td><div class="summary">
            Rounds the specified value to an integer value.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_RoundToInt_1.htm" target="">RoundToInt(Single, MidpointRounding)</a></td><td><div class="summary">
            Rounds the specified value to an integer value.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_SafeToDecimal.htm" target="">SafeToDecimal</a></td><td><div class="summary">
            Converts the specified float value to decimal and clamps it if necessary.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_Sign.htm" target="">Sign(Int32)</a></td><td><div class="summary">
            Returns the sign of a value.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_Sign_1.htm" target="">Sign(Single)</a></td><td><div class="summary">
            Returns the sign of a value.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_Sin.htm" target="">Sin</a></td><td><div class="summary">
            Returns the sine value of the specified (radian) angle.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_Sqrt.htm" target="">Sqrt</a></td><td><div class="summary">
            Returns a numbers square root.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_Swap__1.htm" target="">Swap<span id="ID0ECABNBEAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0ECABNBEAAAAA?vb=(Of |cpp=&lt;|cs=&lt;|fs=&lt;'|nu=(");
				</script>T<span id="ID0EAABNBEAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EAABNBEAAAAA?vb=)|cpp=&gt;|cs=&gt;|fs=&gt;|nu=)");
				</script></a></td><td><div class="summary">
            Swaps the values of two variables.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_Tan.htm" target="">Tan</a></td><td><div class="summary">
            Returns the tangent value of the specified (radian) angle.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_TransformCoord.htm" target="">TransformCoord(Single<span id="ID0EDABLBEAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EDABLBEAAAAA?vb=|cpp=%|cs=|fs=|nu=");
				</script>, Single<span id="ID0EBABLBEAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBABLBEAAAAA?vb=|cpp=%|cs=|fs=|nu=");
				</script>, Single)</a></td><td><div class="summary">
            Turns a specific coordinate around [0,0].
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_TransformCoord_1.htm" target="">TransformCoord(Single<span id="ID0EDABKBEAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EDABKBEAAAAA?vb=|cpp=%|cs=|fs=|nu=");
				</script>, Single<span id="ID0EBABKBEAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBABKBEAAAAA?vb=|cpp=%|cs=|fs=|nu=");
				</script>, Single, Single)</a></td><td><div class="summary">
            Turns and scales a specific coordinate around [0,0].
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_TransformCoord_2.htm" target="">TransformCoord(Single<span id="ID0EDABJBEAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EDABJBEAAAAA?vb=|cpp=%|cs=|fs=|nu=");
				</script>, Single<span id="ID0EBABJBEAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBABJBEAAAAA?vb=|cpp=%|cs=|fs=|nu=");
				</script>, Single, Single, Single, Single)</a></td><td><div class="summary">
            Turns and scales a specific coordinate around the specified center point.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_TransformDotVec.htm" target="">TransformDotVec(Vector2, Vector2, Vector2)</a></td><td><div class="summary">
            Performs a 2d transformation
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_TransformDotVec_1.htm" target="">TransformDotVec(Vector2<span id="ID0EBABHBEAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBABHBEAAAAA?vb=|cpp=%|cs=|fs=|nu=");
				</script>, Vector2, Vector2)</a></td><td><div class="summary">
            Performs a 2d transformation
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_TransformDotVec_2.htm" target="">TransformDotVec(Vector2<span id="ID0EFABGBEAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EFABGBEAAAAA?vb=|cpp=%|cs=|fs=|nu=");
				</script>, Vector2<span id="ID0EDABGBEAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EDABGBEAAAAA?vb=|cpp=%|cs=|fs=|nu=");
				</script>, Vector2<span id="ID0EBABGBEAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBABGBEAAAAA?vb=|cpp=%|cs=|fs=|nu=");
				</script>)</a></td><td><div class="summary">
            Performs a 2d transformation
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_TransformDotVec_3.htm" target="">TransformDotVec(Vector3, Vector2, Vector2)</a></td><td><div class="summary">
            Performs a 2d transformation
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_TransformDotVec_4.htm" target="">TransformDotVec(Vector3<span id="ID0EBABEBEAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBABEBEAAAAA?vb=|cpp=%|cs=|fs=|nu=");
				</script>, Vector2, Vector2)</a></td><td><div class="summary">
            Performs a 2d transformation
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_TransformDotVec_5.htm" target="">TransformDotVec(Vector3<span id="ID0EFABDBEAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EFABDBEAAAAA?vb=|cpp=%|cs=|fs=|nu=");
				</script>, Vector2<span id="ID0EDABDBEAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EDABDBEAAAAA?vb=|cpp=%|cs=|fs=|nu=");
				</script>, Vector2<span id="ID0EBABDBEAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBABDBEAAAAA?vb=|cpp=%|cs=|fs=|nu=");
				</script>)</a></td><td><div class="summary">
            Performs a 2d transformation
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_TurnDir_1.htm" target="">TurnDir(Single, Single)</a></td><td><div class="summary">
            Assuming an angular (radian) value area, this method returns the direction to "turn" value 1 to
            when it comes to take the shortest way to value 2.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_TurnDir.htm" target="">TurnDir(Int32, Int32, Int32, Int32)</a></td><td><div class="summary">
            Assuming a circular value area, this method returns the direction to "turn" value 1 to
            when it comes to take the shortest way to value 2.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Duality_MathF_TurnDir_2.htm" target="">TurnDir(Single, Single, Single, Single)</a></td><td><div class="summary">
            Assuming a circular value area, this method returns the direction to "turn" value 1 to
            when it comes to take the shortest way to value 2.
            </div></td></tr></table><a href="#mainBody" target="">Back to Top</a><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Fields</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><table id="memberList" class="members"><tr><th class="ps_iconColumn">
							 
						</th><th class="ps_nameColumn">Name</th><th class="ps_descriptionColumn">Description</th></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubfield.gif" alt="Public field" title="Public field" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="F_Duality_MathF_E.htm" target="">E</a></td><td><div class="summary">
            Euler's number, base of the natural logarithm. Approximately 2.7182818284.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubfield.gif" alt="Public field" title="Public field" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="F_Duality_MathF_Pi.htm" target="">Pi</a></td><td><div class="summary">
            Mmmhh... pie!
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubfield.gif" alt="Public field" title="Public field" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="F_Duality_MathF_PiOver2.htm" target="">PiOver2</a></td><td><div class="summary">
            Equals <a href="F_Duality_MathF_Pi.htm" target="">Pi</a> / 2.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubfield.gif" alt="Public field" title="Public field" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="F_Duality_MathF_PiOver3.htm" target="">PiOver3</a></td><td><div class="summary">
            Equals <a href="F_Duality_MathF_Pi.htm" target="">Pi</a> / 3.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubfield.gif" alt="Public field" title="Public field" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="F_Duality_MathF_PiOver4.htm" target="">PiOver4</a></td><td><div class="summary">
            Equals <a href="F_Duality_MathF_Pi.htm" target="">Pi</a> / 4.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubfield.gif" alt="Public field" title="Public field" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="F_Duality_MathF_PiOver6.htm" target="">PiOver6</a></td><td><div class="summary">
            Equals <a href="F_Duality_MathF_Pi.htm" target="">Pi</a> / 6.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubfield.gif" alt="Public field" title="Public field" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="F_Duality_MathF_RadAngle1.htm" target="">RadAngle1</a></td><td><div class="summary">
            A one degree angle in radians.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubfield.gif" alt="Public field" title="Public field" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="F_Duality_MathF_RadAngle180.htm" target="">RadAngle180</a></td><td><div class="summary">
            A 180 degree angle in radians. Equals <a href="F_Duality_MathF_Pi.htm" target="">Pi</a>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubfield.gif" alt="Public field" title="Public field" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="F_Duality_MathF_RadAngle270.htm" target="">RadAngle270</a></td><td><div class="summary">
            A 270 degree angle in radians. Equals <a href="F_Duality_MathF_Pi.htm" target="">Pi</a>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubfield.gif" alt="Public field" title="Public field" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="F_Duality_MathF_RadAngle30.htm" target="">RadAngle30</a></td><td><div class="summary">
            A 30 degree angle in radians. Equals <a href="F_Duality_MathF_PiOver6.htm" target="">PiOver6</a>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubfield.gif" alt="Public field" title="Public field" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="F_Duality_MathF_RadAngle360.htm" target="">RadAngle360</a></td><td><div class="summary">
            A 360 degree angle in radians. Equals <a href="F_Duality_MathF_TwoPi.htm" target="">TwoPi</a>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubfield.gif" alt="Public field" title="Public field" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="F_Duality_MathF_RadAngle45.htm" target="">RadAngle45</a></td><td><div class="summary">
            A 45 degree angle in radians. Equals <a href="F_Duality_MathF_PiOver4.htm" target="">PiOver4</a>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubfield.gif" alt="Public field" title="Public field" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="F_Duality_MathF_RadAngle90.htm" target="">RadAngle90</a></td><td><div class="summary">
            A 90 degree angle in radians. Equals <a href="F_Duality_MathF_PiOver2.htm" target="">PiOver2</a>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubfield.gif" alt="Public field" title="Public field" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="F_Duality_MathF_TwoPi.htm" target="">TwoPi</a></td><td><div class="summary">
            Equals 2 * <a href="F_Duality_MathF_Pi.htm" target="">Pi</a>.
            </div></td></tr></table><a href="#mainBody" target="">Back to Top</a><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Properties</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><table id="memberList" class="members"><tr><th class="ps_iconColumn">
							 
						</th><th class="ps_nameColumn">Name</th><th class="ps_descriptionColumn">Description</th></tr><tr data="public;static;declared;notNetfw;"><td><img src="./../icons/pubproperty.gif" alt="Public property" title="Public property" /><img src="./../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="P_Duality_MathF_Rnd.htm" target="">Rnd</a></td><td><div class="summary">
            [GET / SET] Global random number generator. Is never null.
            </div></td></tr></table><a href="#mainBody" target="">Back to Top</a><a name="seeAlsoSection"><!----></a><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">See Also</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><div class="seeAlsoStyle"><a href="T_Duality_MathF.htm" target="">MathF Class</a></div><div class="seeAlsoStyle"><a href="N_Duality.htm" target="">Duality Namespace</a></div></div>
        </div>
      </div>
    </div>
    <div id="OH_footer" class="OH_footer">
      <p />
      <div class="OH_feedbacklink">
        <a href="mailto:?subject=Duality+Documentation+MathF+Members+100+EN-US&amp;body=Your%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report%2c%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed%2c%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.">Send Feedback</a> on this topic.</div>
    </div>
  </body>
</html>